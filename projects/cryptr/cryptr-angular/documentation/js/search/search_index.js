var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractNavigator.html",[0,0.841,1,1.906]],["body/injectables/AbstractNavigator.html",[0,1.298,1,2.943,2,2.32,3,0.526,4,0.526,5,0.459,6,4.492,7,3.066,8,0.278,9,1.174,10,2.329,11,5.174,12,4.191,13,1.432,14,4.711,15,2.066,16,3.715,17,1.923,18,5.828,19,2.108,20,4.711,21,1.919,22,0.039,23,1.74,24,0.467,25,1.174,26,4.711,27,0.733,28,3.715,29,4.711,30,4.711,31,4.077,32,4.711,33,4.711,34,4.711,35,4.711,36,4.711,37,4.711,38,4.711,39,2.32,40,4.711,41,1.513,42,0.952,43,1.734,44,1.129,45,2.32,46,2.32,47,1.672,48,1.672,49,0.526,50,1.245,51,2.639,52,2.639,53,3.889,54,3.715,55,2.639,56,1.854,57,3.066,58,3.715,59,2.639,60,1.245,61,3.715,62,0.023,63,0.029,64,0.023]],["title/components/AccountAccessButtonComponent.html",[65,1.906,66,1.697]],["body/components/AccountAccessButtonComponent.html",[3,0.112,4,0.112,5,0.097,8,0.105,12,1.639,19,2.039,22,0.039,23,0.519,24,0.452,27,0.767,31,0.56,39,0.493,42,0.724,43,0.984,44,0.24,45,0.493,49,0.112,50,0.471,51,0.56,52,0.998,53,0.651,55,0.998,59,3.759,60,1.609,62,0.005,63,0.009,64,0.005,65,2.593,66,1.283,67,1.405,68,0.789,69,0.789,70,0.789,71,0.789,72,4.167,73,3.599,74,3.587,75,0.651,76,2.518,77,1.405,78,1.405,79,1.405,80,1.16,81,0.936,82,1.904,83,0.878,84,1.9,85,1.16,86,0.789,87,1.9,88,1.432,89,1.9,90,1.405,91,1.9,92,1.405,93,1.405,94,1.405,95,1.9,96,1.9,97,2.647,98,2.185,99,1.9,100,1.9,101,1.9,102,1.9,103,1.9,104,3.182,105,1.9,106,1.9,107,0.637,108,1.9,109,1.9,110,1.9,111,1.9,112,1.9,113,1.9,114,0.637,115,1.9,116,1.9,117,1.9,118,1.9,119,1.9,120,0.789,121,0.789,122,0.789,123,0.948,124,0.789,125,0.701,126,1.405,127,0.789,128,0.789,129,0.789,130,0.789,131,0.789,132,0.789,133,2.935,134,1.9,135,0.789,136,2.307,137,1.405,138,0.729,139,0.387,140,1.405,141,1.441,142,0.387,143,0.686,144,0.789,145,1.405,146,1.9,147,1.639,148,0.789,149,0.789,150,0.789,151,0.789,152,0.789,153,0.852,154,0.789,155,0.789,156,0.789,157,0.789,158,0.789,159,0.789,160,0.789,161,0.789,162,5.048,163,1.405,164,1.405,165,0.56,166,0.998,167,0.493,168,0.998,169,0.998,170,0.998,171,0.998,172,0.998,173,0.998,174,0.651,175,0.56,176,0.789,177,0.651,178,2.307,179,0.269,180,3.716,181,0.789,182,1.35,183,0.789,184,0.56,185,0.789,186,0.471,187,0.789,188,0.789,189,1.405,190,1.9,191,0.724,192,0.789,193,0.789,194,1.405,195,0.789,196,0.789,197,2.647,198,0.789,199,0.789,200,0.789,201,1.9,202,0.789,203,0.998,204,0.789,205,0.789,206,0.789,207,2.307,208,2.307,209,1.405,210,0.789,211,1.405,212,0.789,213,1.405,214,0.789,215,1.405,216,1.405,217,1.405,218,1.405,219,0.789,220,0.789,221,0.789,222,0.789,223,1.191,224,0.789,225,1.9,226,1.9,227,0.572,228,0.789,229,1.569,230,0.789,231,1.569,232,1.569,233,0.789,234,0.789,235,0.439,236,0.789,237,0.789,238,0.789,239,0.878,240,1.405,241,0.789,242,0.789,243,0.789,244,0.789,245,0.789,246,0.264,247,0.789,248,1.405,249,0.789,250,0.789,251,0.789,252,0.789,253,0.789,254,0.789,255,0.264,256,0.789,257,0.789,258,0.789,259,2.647,260,0.789,261,0.578,262,1.9,263,0.789,264,3.182,265,0.789,266,1.9,267,0.789,268,0.789,269,0.789,270,1.9,271,0.789,272,0.197,273,0.789,274,0.789,275,0.789,276,1.9,277,0.789,278,0.789,279,1.9,280,0.789,281,0.789,282,0.789,283,0.789,284,0.789,285,0.789,286,0.56,287,0.789,288,0.56,289,0.789,290,0.789,291,2.307,292,1.405,293,0.471,294,1.405,295,1.16,296,1.405,297,2.307,298,2.307,299,2.185,300,1.405,301,3.913,302,5.198,303,4.53,304,2.66,305,3.597,306,2.647,307,4.447,308,4.541,309,3.671,310,3.097,311,0.789,312,0.789,313,0.789,314,4.91,315,2.307,316,0.789,317,0.789,318,0.789,319,3.913,320,1.9,321,1.9,322,3.182,323,3.397,324,1.405,325,3.802,326,2.959,327,0.789,328,0.789,329,1.405,330,2.307,331,1.405,332,0.789,333,1.405,334,0.789,335,1.9,336,2.307,337,1.405,338,2.307,339,1.9,340,1.9,341,1.88,342,1.405,343,1.405,344,1.9,345,2.627,346,2.804,347,3.899,348,2.935,349,3.182,350,3.397,351,4.009,352,3.751,353,2.185,354,2.949,355,3.182,356,2.307,357,3.328,358,2.185,359,1.9,360,0.789,361,3.86,362,2.185,363,0.789,364,2.804,365,3.328,366,0.789,367,3.427,368,2.627,369,2.935,370,3.899,371,1.405,372,1.405,373,2.422,374,3.802,375,2.647,376,1.9,377,3.182,378,3.751,379,2.627,380,2.185,381,2.307,382,3.516,383,1.9,384,3.219,385,0.789,386,0.789,387,0.789,388,1.9,389,1.405,390,0.632,391,1.405,392,1.405,393,1.405,394,2.804,395,1.405,396,2.422,397,1.833,398,2.422,399,2.185,400,2.185,401,1.405,402,0.789,403,0.789,404,2.422,405,0.789,406,2.422,407,2.627,408,1.405,409,1.569,410,6.125,411,0.789,412,0.789,413,1.16,414,1.405,415,1.405,416,1.16,417,1.16,418,0.789,419,0.789,420,0.789,421,1.9,422,1.9,423,0.789,424,2.185,425,1.88,426,1.405,427,0.789,428,1.9,429,0.789,430,2.935,431,2.647,432,2.647,433,2.647,434,2.307,435,1.405,436,1.16,437,0.789,438,0.789,439,1.904,440,2.307,441,1.405,442,0.789,443,0.789,444,0.789,445,1.9,446,1.9,447,0.789,448,0.789,449,0.789,450,1.405,451,0.789,452,1.9,453,1.9,454,0.789,455,1.16,456,1.16,457,1.16,458,2.307,459,1.405,460,2.935,461,0.789,462,0.789,463,0.789,464,0.789,465,0.789,466,0.651,467,0.789,468,0.789,469,2.307,470,2.307,471,0.789,472,0.789,473,0.789,474,1.9,475,0.789,476,0.789,477,0.789,478,0.789,479,0.789,480,0.651,481,0.789,482,0.56,483,1.405,484,1.405,485,0.789,486,0.789,487,0.789,488,0.789]],["title/injectables/AuthClientConfig.html",[0,0.841,489,1.243]],["body/injectables/AuthClientConfig.html",[0,1.191,2,2.031,3,0.46,4,0.46,5,0.402,8,0.243,9,1.077,10,2.184,13,1.476,15,1.808,19,2.107,21,1.76,22,0.039,23,1.596,24,0.467,25,1.21,27,0.837,39,2.031,41,1.76,42,0.873,43,1.09,44,0.989,47,1.464,48,1.464,49,0.812,50,1.09,56,1.623,60,1.448,62,0.02,63,0.027,64,0.02,88,1.464,125,2.581,143,0.657,179,0.837,191,0.657,223,1.945,227,1.325,272,0.811,390,1.464,489,1.76,490,1.201,491,3.141,492,2.684,493,2.408,494,4.321,495,2.031,496,3.252,497,2.699,498,3.23,499,2.699,500,3.252,501,2.699,502,2.876,503,2.699,504,2.403,505,2.403,506,2.699,507,1.623,508,2.403,509,1.808,510,1.808,511,1.808,512,0.896,513,2.699,514,2.403,515,2.403,516,2.403,517,2.403,518,2.403,519,2.422,520,1.792,521,1.464,522,2.699,523,2.031,524,0.221,525,2.156,526,2.031,527,1.623,528,2.031,529,0.896,530,0.811,531,0.896,532,0.896,533,0.811,534,0.896,535,1.808,536,2.031,537,2.031,538,2.031,539,1.808,540,2.031,541,2.403,542,1.325,543,1.808]],["title/interfaces/AuthConfig.html",[493,1.243,524,0.139]],["body/interfaces/AuthConfig.html",[0,1.17,3,0.449,4,0.449,5,0.392,8,0.237,9,1.059,10,1.426,13,0.963,22,0.039,24,0.531,25,1.467,27,0.878,42,0.64,43,1.062,44,0.963,47,1.426,48,1.426,49,0.808,50,1.062,56,1.581,60,1.423,62,0.02,63,0.026,64,0.02,88,1.426,125,2.119,143,0.968,179,0.778,191,0.64,223,1.912,227,1.291,272,1.276,390,1.426,489,1.291,490,1.17,491,2.664,493,2.238,497,1.979,498,2.653,499,1.979,501,1.979,502,2.362,503,1.979,504,1.762,505,1.762,506,1.979,507,1.581,508,2.362,509,1.762,510,1.762,511,1.762,512,0.873,513,2.664,514,2.362,515,2.362,516,2.362,517,2.362,518,2.362,519,2.39,520,1.769,521,1.426,522,2.664,523,1.979,524,0.219,525,2.554,526,1.979,527,1.581,528,1.979,529,1.41,530,1.276,531,1.41,532,1.41,533,1.276,534,1.41,535,2.846,536,3.197,537,3.197,538,1.979,539,1.762,540,1.979,541,2.362,542,1.291,543,1.762,544,0.873]],["title/guards/AuthGuard.html",[235,1.697,545,2.168]],["body/guards/AuthGuard.html",[0,1.292,3,0.522,4,0.522,5,0.456,8,0.275,13,1.425,15,2.049,19,2.21,21,2.21,22,0.039,23,2.004,24,0.49,25,1.352,41,2.1,43,1.818,44,1.121,45,2.302,47,1.659,48,1.659,49,0.522,50,1.235,51,2.619,60,1.728,62,0.023,63,0.029,64,0.023,83,2.302,98,3.87,123,2.707,165,2.619,232,4.624,235,2.607,546,3.686,547,3.042,548,5.602,549,5.426,550,3.686,551,3.686,552,3.686,553,5.818,554,4.727,555,5.818,556,3.686,557,3.87,558,4.134,559,3.686,560,3.686,561,4.688,562,4.688,563,3.98,564,5.155,565,5.426,566,3.686,567,3.042,568,2.619,569,3.686,570,4.688]],["title/interceptors/AuthHttpInterceptor.html",[571,2.519,572,2.168]],["body/interceptors/AuthHttpInterceptor.html",[0,1.158,3,0.442,4,0.442,5,0.385,8,0.233,10,2.389,13,1.277,15,2.336,19,1.711,21,1.711,22,0.039,23,1.552,24,0.379,25,1.047,27,0.673,31,2.215,41,1.27,43,1.833,44,0.948,49,0.442,50,1.045,60,1.929,62,0.019,63,0.026,64,0.019,83,1.948,143,0.63,147,2.985,179,0.595,180,3.376,182,2.985,186,1.045,191,0.849,223,2.139,229,2.574,304,3.176,492,2.574,493,2.071,507,1.556,519,2.096,520,1.152,521,1.403,527,2.371,535,2.336,539,1.734,542,1.27,557,3.922,558,3.613,563,2.215,568,2.215,572,2.985,573,3.118,574,2.574,575,4.752,576,1.309,577,3.118,578,3.118,579,5.468,580,5.085,581,3.118,582,5.085,583,3.118,584,3.118,585,3.118,586,2.215,587,3.118,588,2.574,589,2.215,590,2.215,591,2.574,592,4.752,593,2.574,594,4.201,595,3.118,596,3.118,597,4.201,598,3.118,599,3.118,600,3.118,601,3.118,602,3.118,603,3.118,604,5.085,605,4.201,606,3.118,607,4.752,608,3.118,609,3.176,610,3.118,611,4.201,612,3.118,613,3.118,614,3.118,615,3.118,616,3.118,617,3.118,618,4.201,619,3.118,620,3.118,621,4.201,622,3.118,623,3.118,624,3.118,625,3.118,626,3.118,627,3.118]],["title/modules/AuthModule.html",[628,2.168,629,1.906]],["body/modules/AuthModule.html",[3,0.528,4,0.528,5,0.461,13,1.133,19,1.518,21,1.518,22,0.039,23,1.376,24,0.336,25,0.929,41,1.518,43,1.955,44,1.133,46,2.328,49,0.528,50,1.249,60,1.249,62,0.023,63,0.029,64,0.023,66,3.425,73,2.949,74,2.648,76,2.328,123,2.356,165,2.648,179,0.668,235,2.625,397,2.328,482,2.648,489,1.923,493,2.219,495,2.328,542,1.923,586,2.648,589,3.354,590,2.648,628,2.648,629,3.721,630,2.648,631,2.328,632,4.277,633,4.277,634,3.897,635,4.277,636,3.076,637,3.076,638,3.076,639,3.897,640,3.076,641,3.727,642,4.721,643,3.727,644,4.721,645,3.727,646,5.182,647,5.182,648,3.727,649,3.727,650,4.721,651,3.727,652,3.727,653,4.721,654,3.727,655,3.727,656,3.727,657,3.727]],["title/interfaces/AuthResponseError.html",[524,0.139,658,1.023]],["body/interfaces/AuthResponseError.html",[3,0.47,4,0.47,5,0.41,8,0.248,9,1.092,17,1.468,22,0.038,24,0.395,27,0.894,42,0.885,49,0.826,62,0.02,63,0.027,64,0.02,81,0.915,107,1.866,114,1.866,138,0.915,139,0.915,142,0.915,143,1.125,153,1.926,179,0.694,186,1.113,191,1.054,246,1.113,255,1.113,261,1.01,272,0.828,293,1.113,512,0.915,524,0.263,529,0.915,530,0.828,531,0.915,532,0.915,533,0.828,534,0.915,544,0.915,576,0.915,658,1.468,659,1.113,660,2.124,661,2.124,662,1.468,663,1.01,664,1.468,665,1.113,666,1.226,667,1.226,668,1.332,669,1.226,670,1.226,671,1.353,672,1.468,673,1.353,674,1.353,675,1.817,676,1.353,677,1.353,678,1.353,679,1.353,680,1.353,681,1.353,682,1.353,683,2.205,684,1.353,685,1.353,686,1.353,687,1.353,688,1.226,689,1.226,690,1.353,691,1.353,692,1.353,693,1.353,694,1.226,695,1.353,696,1.353,697,1.353,698,1.353,699,1.226,700,1.332,701,1.353,702,1.353,703,1.353,704,1.226,705,1.353]],["title/injectables/AuthService.html",[0,0.841,123,1.523]],["body/injectables/AuthService.html",[0,0.552,1,1.25,2,0.74,3,0.168,4,0.168,5,0.147,8,0.089,10,2.372,12,1.846,13,0.609,15,0.659,17,1.388,19,2.024,21,1.059,22,0.039,23,0.96,24,0.235,25,0.648,27,0.783,39,1.908,41,2.285,42,0.988,43,1.538,44,0.36,45,0.74,46,0.74,47,0.533,48,0.533,49,0.168,50,0.397,52,1.422,55,1.422,56,2.067,57,0.978,60,1.902,62,0.007,63,0.012,64,0.007,73,1.25,76,1.25,80,1.652,81,1.265,82,3.881,83,0.74,85,3.683,88,2.008,107,1.796,114,1.576,123,1.524,125,0.999,138,1.296,139,1.02,141,3.261,142,0.842,143,1.055,147,0.842,167,0.74,174,0.978,177,0.978,179,0.558,180,3.777,182,1.422,191,0.872,203,1.422,223,2.008,227,1.244,231,1.652,239,2.588,246,1.024,255,1.495,261,0.929,286,2.17,288,2.17,293,0.671,295,2.521,354,0.842,390,0.533,489,0.815,495,2.313,502,1.698,505,2.804,507,0.591,527,1.524,530,0.295,533,0.499,541,0.659,554,4.31,558,4.018,563,0.842,567,2.145,568,0.842,576,0.716,586,0.842,588,0.978,589,0.842,590,0.842,591,0.978,593,0.978,609,2.695,662,0.397,663,0.609,664,0.671,666,0.739,667,0.438,668,1.126,669,0.438,670,0.739,683,1.648,688,0.739,689,0.739,694,0.438,699,1.128,700,0.609,704,0.739,706,0.978,707,5.167,708,3.054,709,3.054,710,3.054,711,3.054,712,3.054,713,3.054,714,3.054,715,3.054,716,1.185,717,2.002,718,3.054,719,1.185,720,5.167,721,5.501,722,2.002,723,1.185,724,3.054,725,1.185,726,1.185,727,3.054,728,2.521,729,2.002,730,2.521,731,1.185,732,2.002,733,1.185,734,1.185,735,1.185,736,1.185,737,2.002,738,2.002,739,3.054,740,3.254,741,3.054,742,2.002,743,5.398,744,3.054,745,3.703,746,1.185,747,1.185,748,1.185,749,3.054,750,4.143,751,3.054,752,3.054,753,3.42,754,4.162,755,3.881,756,3.054,757,3.054,758,3.054,759,3.054,760,3.054,761,3.054,762,4.702,763,2.599,764,2.002,765,3.054,766,2.002,767,2.002,768,2.002,769,1.185,770,2.599,771,2.002,772,1.185,773,2.002,774,3.054,775,2.002,776,2.002,777,1.185,778,0.978,779,0.978,780,0.978,781,1.185,782,2.002,783,2.002,784,1.185,785,2.002,786,2.002,787,1.185,788,1.185,789,1.185,790,1.185,791,1.185,792,1.185,793,2.002,794,1.185,795,1.185,796,1.185,797,1.185,798,1.185,799,2.002,800,1.185,801,1.185,802,1.185,803,1.185,804,1.185,805,1.185,806,1.185,807,2.002,808,1.185,809,2.002,810,1.185,811,2.002,812,2.002,813,2.002,814,3.703,815,1.185,816,2.599,817,2.002,818,2.599,819,2.002,820,1.652,821,2.002,822,1.185,823,1.185,824,2.599,825,1.185,826,1.185,827,1.185,828,0.978,829,1.185,830,1.185,831,1.185,832,1.185,833,1.185,834,1.185,835,3.054,836,2.002,837,1.185,838,1.185,839,1.185,840,1.185,841,1.185,842,1.185,843,1.185,844,1.185,845,1.185,846,1.185,847,2.002,848,1.185,849,1.185,850,1.185,851,1.185,852,1.185,853,1.185,854,1.185,855,1.185,856,1.185,857,3.942,858,1.185,859,2.599,860,1.185,861,1.185,862,2.002,863,1.185,864,1.185,865,1.185,866,1.185,867,1.185,868,1.185,869,1.185,870,1.185,871,2.599,872,1.185,873,1.185,874,1.185,875,1.185,876,1.185,877,1.185,878,1.185,879,1.185,880,2.599,881,1.185,882,1.185,883,1.185,884,2.002,885,1.185,886,1.185,887,1.185,888,1.185,889,1.185,890,1.185,891,1.185,892,1.185,893,1.185,894,1.185,895,1.185,896,1.185,897,1.185,898,1.185,899,1.185,900,1.185,901,1.185,902,1.185,903,1.185]],["title/interfaces/Authorization.html",[524,0.139,665,1.023]],["body/interfaces/Authorization.html",[3,0.47,4,0.47,5,0.41,8,0.248,9,1.092,17,1.468,22,0.038,24,0.395,27,0.894,42,0.885,49,0.826,62,0.02,63,0.027,64,0.02,81,0.915,107,1.866,114,1.866,138,0.915,139,0.915,142,0.915,143,1.125,153,1.926,179,0.694,186,1.113,191,1.054,246,1.113,255,1.113,261,1.01,272,0.828,293,1.113,512,0.915,524,0.263,529,0.915,530,0.828,531,0.915,532,0.915,533,0.828,534,0.915,544,0.915,576,0.915,658,1.113,659,1.113,660,1.353,661,1.353,662,1.468,663,1.01,664,1.468,665,1.468,666,1.926,667,1.926,668,1.332,669,1.226,670,1.226,671,1.353,672,1.468,673,1.353,674,1.353,675,1.817,676,1.353,677,1.353,678,1.353,679,1.353,680,1.353,681,1.353,682,1.353,683,2.205,684,1.353,685,1.353,686,1.353,687,1.353,688,1.226,689,1.226,690,1.353,691,1.353,692,1.353,693,1.353,694,1.226,695,1.353,696,1.353,697,1.353,698,1.353,699,1.226,700,1.332,701,1.353,702,1.353,703,1.353,704,1.226,705,1.353]],["title/interfaces/Config.html",[179,0.432,524,0.139]],["body/interfaces/Config.html",[3,0.439,4,0.439,5,0.383,8,0.232,9,1.043,17,1.403,22,0.039,24,0.512,25,1.415,27,0.895,42,0.846,49,0.814,62,0.019,63,0.026,64,0.019,81,0.855,107,1.83,114,1.83,138,0.855,139,0.855,142,0.855,143,1.147,153,1.874,179,0.718,186,1.039,191,1.025,246,1.039,255,1.039,261,0.943,272,1.265,293,1.039,512,0.855,524,0.259,529,1.398,530,1.265,531,1.398,532,1.398,533,1.265,534,1.398,544,0.855,576,0.855,658,1.039,659,1.039,660,1.263,661,1.263,662,1.403,663,0.943,664,1.403,665,1.039,666,1.145,667,1.145,668,1.273,669,1.145,670,1.145,671,2.067,672,1.403,673,1.263,674,1.263,675,1.776,676,1.263,677,1.263,678,1.263,679,1.263,680,1.263,681,1.263,682,1.263,683,2.182,684,1.263,685,1.263,686,1.263,687,1.263,688,1.145,689,1.145,690,1.263,691,1.263,692,1.263,693,1.263,694,1.145,695,1.263,696,1.263,697,1.263,698,1.263,699,1.145,700,1.273,701,1.263,702,1.263,703,1.263,704,1.145,705,1.263]],["title/interfaces/CryptrClient.html",[524,0.139,576,0.841]],["body/interfaces/CryptrClient.html",[3,0.297,4,0.297,5,0.259,8,0.157,9,0.789,13,0.962,17,1.605,19,2.422,21,2.338,22,0.039,23,2.12,24,0.521,25,1.431,27,0.891,41,2.422,42,0.857,49,0.741,62,0.013,63,0.019,64,0.013,81,0.578,107,1.935,114,1.935,138,0.578,139,0.578,142,0.578,143,1.078,153,1.567,179,0.724,186,1.061,191,1.004,239,1.977,246,1.422,255,1.422,261,0.638,272,0.523,286,2.249,288,2.249,293,0.703,495,3.703,512,0.578,524,0.233,529,0.578,530,0.523,531,0.578,532,0.578,533,0.523,534,0.578,544,0.578,576,0.872,658,0.703,659,0.703,660,0.855,661,0.855,662,1.061,663,0.638,664,1.061,665,0.703,666,0.775,667,0.775,668,1.29,669,0.775,670,1.169,671,0.855,672,1.422,673,0.855,674,0.855,675,1.88,676,0.855,677,0.855,678,0.855,679,0.855,680,0.855,681,1.729,682,1.729,683,2.189,684,1.289,685,1.289,686,1.289,687,1.289,688,1.169,689,1.169,690,1.289,691,1.289,692,1.289,693,1.289,694,1.567,695,1.289,696,1.729,697,1.729,698,1.289,699,1.567,700,1.29,701,1.289,702,1.289,703,1.289,704,1.169,705,1.289,740,1.732,753,4.223,828,2.613,904,3.165,905,3.165,906,3.165,907,3.165,908,3.165,909,3.165,910,3.165,911,3.165,912,3.165,913,3.165,914,3.165,915,3.165,916,3.165,917,2.098,918,3.165,919,2.098,920,2.098,921,2.098,922,2.098,923,2.098,924,2.098,925,2.098,926,2.098,927,2.098,928,2.098,929,2.098,930,2.098,931,2.098,932,2.098,933,2.098,934,2.098,935,2.098,936,2.098,937,2.098,938,2.098,939,2.098,940,2.098,941,2.098,942,2.098,943,2.098,944,2.098,945,2.098]],["title/interfaces/HttpInterceptorConfig.html",[524,0.139,525,1.523]],["body/interfaces/HttpInterceptorConfig.html",[0,1.253,3,0.498,4,0.498,5,0.434,8,0.263,9,1.133,10,1.582,13,1.069,22,0.039,24,0.41,25,0.876,27,0.848,42,0.71,43,1.178,44,1.069,47,1.582,48,1.582,49,0.826,50,1.178,56,1.754,60,1.524,62,0.022,63,0.028,64,0.022,88,1.582,125,2.269,143,0.71,179,0.801,191,0.71,223,2.047,227,1.432,272,0.876,390,1.582,489,1.432,490,1.298,491,2.803,493,2.249,497,2.195,498,2.84,499,2.195,501,2.195,502,2.529,503,2.195,504,1.954,505,1.954,506,2.195,507,1.754,508,2.529,509,1.954,510,1.954,511,1.954,512,0.968,513,2.803,514,2.529,515,2.529,516,2.529,517,2.529,518,2.529,519,2.755,520,1.862,521,1.582,522,2.803,523,2.195,524,0.23,525,2.515,526,3.329,527,1.754,528,2.195,529,0.968,530,0.876,531,0.968,532,0.968,533,0.876,534,0.968,535,1.954,536,2.195,537,2.195,538,2.195,539,1.954,540,2.195,541,2.529,542,1.432,543,1.954,544,0.968]],["title/interfaces/HttpInterceptorRouteConfig.html",[520,1.127,524,0.139]],["body/interfaces/HttpInterceptorRouteConfig.html",[0,1.229,3,0.483,4,0.483,5,0.422,8,0.255,9,1.112,10,1.536,13,1.038,22,0.039,24,0.476,25,1.363,27,0.861,42,0.69,43,1.144,44,1.038,47,1.536,48,1.536,49,0.821,50,1.144,56,1.703,60,1.495,62,0.021,63,0.027,64,0.021,88,1.536,125,2.226,143,0.69,179,0.794,191,0.69,223,2.008,227,1.39,272,0.851,390,1.536,489,1.39,490,1.26,491,2.763,493,2.228,497,2.132,498,2.786,499,2.132,501,2.132,502,2.48,503,2.132,504,1.898,505,1.898,506,2.132,507,1.703,508,2.48,509,1.898,510,1.898,511,1.898,512,0.94,513,3.223,514,2.48,515,2.48,516,2.48,517,2.48,518,2.48,519,2.48,520,1.946,521,1.536,522,2.763,523,2.132,524,0.227,525,2.226,526,2.132,527,2.63,528,3.292,529,0.94,530,0.851,531,0.94,532,0.94,533,0.851,534,0.94,535,1.898,536,2.132,537,2.132,538,2.132,539,1.898,540,2.132,541,2.48,542,1.39,543,1.898,544,0.94]],["title/interfaces/RefreshStore.html",[524,0.139,675,1.023]],["body/interfaces/RefreshStore.html",[3,0.457,4,0.457,5,0.399,8,0.241,9,1.071,17,1.44,22,0.039,24,0.485,27,0.892,42,0.868,49,0.821,62,0.02,63,0.026,64,0.02,81,0.889,107,1.85,114,1.85,138,0.889,139,0.889,142,0.889,143,1.116,153,2.196,179,0.684,186,1.081,191,1.042,246,1.081,255,1.081,261,0.981,272,0.804,293,1.081,512,0.889,524,0.261,529,0.889,530,0.804,531,0.889,532,0.889,533,0.804,534,0.889,544,0.889,576,0.889,658,1.081,659,1.081,660,1.314,661,1.314,662,1.44,663,0.981,664,1.44,665,1.081,666,1.191,667,1.191,668,1.307,669,1.191,670,1.191,671,1.314,672,1.44,673,1.314,674,1.314,675,1.85,676,2.1,677,2.1,678,2.1,679,2.1,680,2.1,681,1.314,682,1.314,683,2.196,684,1.314,685,1.314,686,1.314,687,1.314,688,1.191,689,1.191,690,1.314,691,1.314,692,1.314,693,1.314,694,1.191,695,1.314,696,1.314,697,1.314,698,1.314,699,1.191,700,1.307,701,1.314,702,1.314,703,1.314,704,1.191,705,1.314]],["title/interfaces/TokenError.html",[524,0.139,672,1.023]],["body/interfaces/TokenError.html",[3,0.467,4,0.467,5,0.408,8,0.246,9,1.087,17,1.462,22,0.038,24,0.441,27,0.893,42,0.881,49,0.824,62,0.02,63,0.027,64,0.02,81,0.909,107,1.862,114,1.862,138,0.909,139,0.909,142,0.909,143,1.123,153,1.921,179,0.692,186,1.105,191,1.051,246,1.105,255,1.105,261,1.003,272,0.822,293,1.743,512,0.909,524,0.263,529,0.909,530,0.822,531,0.909,532,0.909,533,0.822,534,0.909,544,0.909,576,0.909,658,1.105,659,1.105,660,1.343,661,1.343,662,1.462,663,1.003,664,1.462,665,1.105,666,1.218,667,1.218,668,1.326,669,1.218,670,1.218,671,1.343,672,1.638,673,2.118,674,2.118,675,1.812,676,1.343,677,1.343,678,1.343,679,1.343,680,1.343,681,1.343,682,1.343,683,2.203,684,1.343,685,1.343,686,1.343,687,1.343,688,1.218,689,1.218,690,1.343,691,1.343,692,1.343,693,1.343,694,1.218,695,1.343,696,1.343,697,1.343,698,1.343,699,1.218,700,1.326,701,1.343,702,1.343,703,1.343,704,1.218,705,1.343]],["title/interfaces/Tokens.html",[524,0.139,668,0.928]],["body/interfaces/Tokens.html",[3,0.469,4,0.469,5,0.409,8,0.247,9,1.09,17,1.466,22,0.038,24,0.395,25,1.09,27,0.893,42,0.884,49,0.825,62,0.02,63,0.027,64,0.02,81,0.912,107,1.864,114,1.864,138,0.912,139,0.912,142,0.912,143,1.164,153,1.924,179,0.693,186,1.11,191,1.052,246,1.11,255,1.11,261,1.007,272,0.825,293,1.11,512,0.912,524,0.263,529,0.912,530,0.825,531,0.912,532,0.912,533,0.825,534,0.912,544,0.912,576,0.912,658,1.11,659,1.11,660,1.349,661,1.349,662,1.466,663,1.007,664,1.466,665,1.11,666,1.223,667,1.223,668,1.489,669,1.924,670,1.924,671,1.349,672,1.466,673,1.349,674,1.349,675,1.815,676,1.349,677,1.349,678,1.349,679,1.349,680,1.349,681,1.349,682,1.349,683,2.205,684,1.349,685,1.349,686,1.349,687,1.349,688,1.223,689,1.223,690,1.349,691,1.349,692,1.349,693,1.349,694,1.223,695,1.349,696,1.349,697,1.349,698,1.349,699,1.223,700,1.33,701,1.349,702,1.349,703,1.349,704,1.223,705,1.349]],["title/interfaces/User.html",[81,0.841,524,0.139]],["body/interfaces/User.html",[3,0.475,4,0.475,5,0.415,8,0.251,9,1.099,17,1.478,22,0.038,24,0.303,27,0.893,42,0.891,49,0.827,62,0.021,63,0.027,64,0.021,81,1.215,107,1.871,114,1.871,138,0.924,139,0.924,142,0.924,143,1.128,153,1.933,179,0.698,186,1.124,191,1.058,246,1.124,255,1.124,261,1.592,272,0.836,293,1.124,512,0.924,524,0.263,529,0.924,530,0.836,531,0.924,532,0.924,533,0.836,534,0.924,544,0.924,576,0.924,658,1.124,659,1.124,660,1.366,661,1.366,662,1.478,663,1.02,664,1.478,665,1.124,666,1.239,667,1.239,668,1.341,669,1.239,670,1.239,671,1.366,672,1.478,673,1.366,674,1.366,675,1.823,676,1.366,677,1.366,678,1.366,679,1.366,680,1.366,681,1.366,682,1.366,683,2.209,684,1.366,685,1.366,686,1.366,687,1.366,688,1.239,689,1.239,690,1.366,691,1.366,692,1.366,693,1.366,694,1.239,695,1.366,696,1.366,697,1.366,698,1.366,699,1.239,700,1.341,701,1.366,702,1.366,703,1.366,704,1.239,705,1.366]],["title/coverage.html",[946,3.418]],["body/coverage.html",[0,1.383,1,2.176,5,0.431,6,2.875,7,2.875,22,0.039,24,0.314,59,4.419,62,0.021,63,0.028,64,0.021,65,2.176,66,1.937,72,2.875,73,2.824,74,2.475,75,2.875,81,0.96,123,1.738,166,2.475,167,2.176,168,2.475,169,2.475,170,2.475,171,2.475,172,2.475,173,2.475,175,2.475,179,0.493,227,1.419,235,1.937,341,3.566,390,2.035,489,1.419,490,2.083,493,1.419,520,1.286,521,1.568,524,0.273,525,1.738,542,1.419,545,2.475,547,2.875,571,2.875,572,2.475,574,2.875,576,0.96,658,1.167,659,1.951,665,1.167,668,1.059,672,1.167,675,1.167,706,2.875,946,2.875,947,3.483,948,3.483,949,2.875,950,3.483,951,3.483,952,3.483,953,3.483,954,3.483,955,3.483,956,3.483,957,4.521,958,4.521,959,5.978,960,5.978,961,3.483,962,5.312,963,3.483,964,4.805,965,2.875,966,3.483,967,3.483,968,3.483,969,3.212,970,2.875,971,4.521,972,2.875,973,3.483,974,3.483]],["title/dependencies.html",[631,2.288,975,2.56]],["body/dependencies.html",[22,0.037,44,1.436,46,2.951,62,0.029,63,0.034,64,0.029,631,3.404,778,3.899,779,3.899,780,3.899,976,4.724,977,4.724,978,4.724,979,4.724,980,5.45]],["title/miscellaneous/enumerations.html",[981,1.043,982,3.024]],["body/miscellaneous/enumerations.html",[8,0.329,13,1.339,22,0.038,62,0.027,63,0.032,64,0.027,138,1.441,139,1.214,142,1.214,490,1.627,491,2.449,509,2.449,510,2.449,511,2.449,513,2.909,514,2.909,515,2.909,516,2.909,517,2.909,518,2.909,609,3.844,659,1.476,662,1.753,663,1.339,664,1.753,981,1.794,982,3.636,983,2.751,984,4.405]],["title/miscellaneous/functions.html",[981,1.043,985,2.603]],["body/miscellaneous/functions.html",[8,0.343,21,1.871,22,0.037,23,1.697,25,1.145,41,2.184,62,0.028,63,0.033,64,0.028,141,2.87,184,4.035,490,1.697,520,1.697,521,2.414,522,2.555,700,1.397,969,3.264,970,4.688,981,1.871,983,2.87,985,3.264,986,3.792,987,4.594,988,4.594,989,4.594,990,4.594]],["title/index.html",[8,0.191,991,2.56,992,2.56]],["body/index.html",[22,0.034,62,0.029,63,0.034,64,0.029,504,2.664,730,3.955,949,3.955,985,3.404,993,4.791,994,4.791,995,4.791,996,4.791,997,4.791,998,4.791]],["title/modules.html",[630,2.942]],["body/modules.html",[22,0.034,62,0.03,63,0.034,64,0.03,466,3.988,629,3.017,630,3.432,999,4.831,1000,4.831,1001,4.831]],["title/overview.html",[1002,3.418]],["body/overview.html",[2,2.804,22,0.036,62,0.028,63,0.033,64,0.028,65,2.804,66,3.416,304,3.513,397,2.804,416,3.705,425,3.189,482,3.189,544,1.237,545,3.189,628,3.758,629,3.75,631,2.804,632,3.705,633,3.705,634,3.705,635,3.705,636,3.705,637,3.705,638,3.705,639,4.367,640,3.705,1002,3.705]],["title/miscellaneous/typealiases.html",[981,1.043,1003,3.664]],["body/miscellaneous/typealiases.html",[8,0.357,22,0.036,24,0.432,27,0.677,62,0.029,63,0.034,64,0.029,490,1.766,519,2.738,520,1.766,981,1.948,983,2.987,1004,4.781]],["title/miscellaneous/variables.html",[981,1.043,1005,3.024]],["body/miscellaneous/variables.html",[8,0.198,22,0.038,24,0.501,27,0.774,62,0.016,63,0.023,64,0.016,76,1.655,88,1.193,138,1.035,139,0.73,141,3.559,142,1.035,166,2.668,167,2.345,168,2.668,169,2.668,170,2.668,171,2.668,172,2.668,173,2.668,175,2.668,184,2.668,203,1.883,227,1.529,239,2.345,261,0.806,299,3.099,301,4.133,304,2.345,305,4.133,308,4.822,309,4.133,310,4.413,319,4.509,325,3.915,326,3.099,341,2.668,345,4.292,346,3.915,351,4.509,353,4.292,354,3.799,357,4.413,358,4.509,361,4.586,362,3.099,364,4.413,365,4.65,367,3.099,368,3.099,373,3.915,374,4.292,379,4.292,380,3.099,382,3.599,384,4.292,394,4.292,396,4.292,397,3.34,398,4.292,399,4.133,400,3.599,404,3.599,406,2.187,407,3.599,409,2.187,413,4.586,417,3.099,424,2.187,425,2.668,436,3.099,439,3.915,455,3.099,456,3.099,457,3.915,480,4.413,490,0.979,508,1.474,542,1.529,543,1.474,609,3.559,663,1.142,700,0.806,728,2.187,754,2.187,755,2.187,820,2.187,964,2.187,965,2.187,969,1.883,972,3.099,981,1.079,983,1.655,986,2.187,1005,2.187,1006,5.463,1007,2.65,1008,3.755,1009,2.65,1010,3.755,1011,5.2,1012,2.65,1013,3.755,1014,2.65,1015,4.361,1016,3.755,1017,4.361,1018,2.65,1019,2.65,1020,2.65,1021,2.65,1022,2.65,1023,2.65,1024,3.755,1025,2.65,1026,2.65,1027,2.65,1028,2.65,1029,2.65,1030,2.65,1031,2.65,1032,2.65]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":59,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["0.05",{"_index":334,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.06",{"_index":454,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.1",{"_index":331,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.1.10",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":393,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.25rem",{"_index":446,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.375rem",{"_index":360,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.5em",{"_index":465,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.5rem",{"_index":355,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.75rem",{"_index":401,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.875rem",{"_index":451,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0/1",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":967,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["0000",{"_index":338,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0px",{"_index":423,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1",{"_index":304,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.25rem",{"_index":349,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1.5rem",{"_index":352,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1.75rem",{"_index":437,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1/1",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":341,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["100vw",{"_index":427,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["10px",{"_index":327,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["11",{"_index":416,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"overview.html":{}}}],["114",{"_index":312,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["12",{"_index":434,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["128",{"_index":313,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["130",{"_index":412,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["15",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["150",{"_index":398,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["150ms",{"_index":395,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["158",{"_index":415,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["15px",{"_index":328,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["16/16",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["163",{"_index":419,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["175",{"_index":420,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1px",{"_index":453,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1rem",{"_index":376,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["2",{"_index":354,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":298,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["200",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20rem",{"_index":429,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["24",{"_index":317,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["244",{"_index":343,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["246",{"_index":344,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["25",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":333,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3",{"_index":425,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39",{"_index":318,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3px",{"_index":329,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3rem",{"_index":435,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["4",{"_index":321,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["4/26",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":417,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["4px",{"_index":324,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["5",{"_index":346,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":310,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":351,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["65",{"_index":448,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["6px",{"_index":332,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["700",{"_index":440,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["800",{"_index":403,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["81",{"_index":449,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["9",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["900",{"_index":315,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["915",{"_index":214,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["935",{"_index":212,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["9999px",{"_index":405,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["_blank",{"_index":251,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["absolute",{"_index":422,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["abstract",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstractnavigator",{"_index":1,"title":{"injectables/AbstractNavigator.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access",{"_index":73,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access_token",{"_index":729,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_expiration_date",{"_index":677,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["accessbutton",{"_index":77,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accesstoken",{"_index":670,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["account",{"_index":76,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accountaccessbuttoncomponent",{"_index":66,"title":{"components/AccountAccessButtonComponent.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accountaccessdata",{"_index":249,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountbtnclass",{"_index":95,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountbtnstyle",{"_index":96,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountlabel",{"_index":97,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountpopup",{"_index":183,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["action",{"_index":739,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroute",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroutesnapshot",{"_index":553,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":140,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["actual",{"_index":990,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual_component",{"_index":488,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["aliases",{"_index":1004,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":366,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["angular.config",{"_index":543,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["angular/common",{"_index":46,"title":{},"body":{"injectables/AbstractNavigator.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":584,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["angular/core",{"_index":44,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"dependencies.html":{}}}],["angular/router",{"_index":45,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["apirequeststosecure",{"_index":526,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["apiroutedefinition",{"_index":519,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/typealiases.html":{}}}],["args",{"_index":752,"title":{},"body":{"injectables/AuthService.html":{}}}],["asterisk",{"_index":614,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["async",{"_index":876,"title":{},"body":{"injectables/AuthService.html":{}}}],["atoken",{"_index":592,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["audience",{"_index":530,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["audience.concat(stateurl",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":98,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["auth.client",{"_index":590,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.config",{"_index":586,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":648,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":165,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["authclientconfig",{"_index":489,"title":{"injectables/AuthClientConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfig",{"_index":493,"title":{"interfaces/AuthConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfigservice",{"_index":542,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentiation",{"_index":724,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticate",{"_index":877,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationinprogress",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":235,"title":{"guards/AuthGuard.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authhttpinterceptor",{"_index":572,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["authmodule",{"_index":629,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":665,"title":{"interfaces/Authorization.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authorization_id",{"_index":861,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponseerror",{"_index":658,"title":{"interfaces/AuthResponseError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authservice",{"_index":123,"title":{"injectables/AuthService.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":34,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["await",{"_index":809,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosrequestconfig",{"_index":922,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["back",{"_index":37,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["background",{"_index":306,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badge",{"_index":473,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badge_class",{"_index":166,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["badgeclass",{"_index":99,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badgestyle",{"_index":100,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["base",{"_index":373,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":471,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bearer",{"_index":601,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["behave",{"_index":145,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["behaviorsubject",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(null",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(true",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{}}}],["between",{"_index":452,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bezier(0.4",{"_index":392,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bg",{"_index":301,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["block",{"_index":474,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["blue",{"_index":409,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["bold",{"_index":439,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":143,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["bootstrap",{"_index":633,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["border",{"_index":319,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":356,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["box",{"_index":335,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["branches",{"_index":993,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1001,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":999,"title":{},"body":{"modules.html":{}}}],["btn",{"_index":460,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component",{"_index":649,"title":{},"body":{"modules/AuthModule.html":{}}}],["button.component.html",{"_index":93,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.scss",{"_index":91,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts",{"_index":75,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["button.component.ts:34",{"_index":124,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:40",{"_index":144,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:47",{"_index":135,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:48",{"_index":132,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:49",{"_index":161,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:50",{"_index":148,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:51",{"_index":156,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:52",{"_index":149,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:53",{"_index":129,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:54",{"_index":152,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:55",{"_index":122,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:56",{"_index":154,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:57",{"_index":155,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:60",{"_index":158,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:61",{"_index":160,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:62",{"_index":128,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:63",{"_index":121,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:64",{"_index":151,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:65",{"_index":131,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:68",{"_index":157,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:69",{"_index":159,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:70",{"_index":127,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:71",{"_index":120,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:72",{"_index":150,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:73",{"_index":130,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button/account",{"_index":74,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["button[auth",{"_index":89,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["buttonlabel",{"_index":101,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(0.5rem",{"_index":371,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(1",{"_index":372,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(1.5rem",{"_index":459,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["call",{"_index":741,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback",{"_index":740,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["callback(isauthenticated",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":232,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["canactivate(next",{"_index":552,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild",{"_index":548,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild(childroute",{"_index":559,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canattachtoken",{"_index":606,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canhandleauthentication",{"_index":828,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["canhandleauthentication(searchparams",{"_index":702,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canhandleinvitation",{"_index":904,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canhandleinvitation(searchparams",{"_index":703,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canload",{"_index":549,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canload(route",{"_index":562,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cannotdisplayuser",{"_index":258,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["canrefresh",{"_index":905,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canrefresh(refreshstore",{"_index":695,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["capitalize",{"_index":445,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["catch",{"_index":55,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["catch((err",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch((error",{"_index":811,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":365,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":295,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["checkauthentication",{"_index":805,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkconfig",{"_index":222,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["childclass",{"_index":102,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["children",{"_index":478,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["childroute",{"_index":561,"title":{},"body":{"guards/AuthGuard.html":{}}}],["childstyle",{"_index":103,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["choose",{"_index":136,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["chosen",{"_index":751,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":50,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["cleanroutestate",{"_index":874,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanurltree(sourceurltree",{"_index":856,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id",{"_index":529,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["closeaccountpopup",{"_index":188,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["cluster_authmodule",{"_index":636,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_declarations",{"_index":638,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":637,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":667,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["color",{"_index":307,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["combinelatest",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["common",{"_index":510,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["commonmodule",{"_index":650,"title":{},"body":{"modules/AuthModule.html":{}}}],["component",{"_index":65,"title":{"components/AccountAccessButtonComponent.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"overview.html":{}}}],["component_template",{"_index":486,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["components",{"_index":67,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["compte",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":179,"title":{"interfaces/Config.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["config.default_locale",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.default_redirect_uri",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{}}}],["configfactory",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":502,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["configured",{"_index":234,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["connexion",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console",{"_index":296,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["console.error('handling",{"_index":837,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(err.message",{"_index":254,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["console.error(error",{"_index":812,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(tokens",{"_index":839,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('can",{"_index":888,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('tokens",{"_index":832,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(tokens",{"_index":833,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":223,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["constructor(@optional",{"_index":538,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor(auth",{"_index":550,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(config",{"_index":492,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["constructor(location",{"_index":16,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["consumers",{"_index":498,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["content",{"_index":408,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["coverage",{"_index":946,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cryptr",{"_index":88,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["cryptr/cryptr",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cryptr_base_url",{"_index":534,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cryptrangular",{"_index":995,"title":{},"body":{"index.html":{}}}],["cryptrclient",{"_index":576,"title":{"interfaces/CryptrClient.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["cryptrclientfactory",{"_index":651,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientfactory.createclient",{"_index":656,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientservice",{"_index":589,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["cryptrspa",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["cubic",{"_index":391,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["current",{"_index":721,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationobservable",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationstate",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentlocale",{"_index":200,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["currenttogglebtnclass",{"_index":290,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["currenturltree",{"_index":869,"title":{},"body":{"injectables/AuthService.html":{}}}],["cursor",{"_index":455,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":248,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["declarations",{"_index":632,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["decoratedrequest",{"_index":906,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["decoratedrequest(axiosrequestconfig",{"_index":705,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["def",{"_index":522,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":141,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_locale",{"_index":533,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_redirect_uri",{"_index":531,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_scope",{"_index":167,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultauthenticationcallback(isauthenticated",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["defaultsigntext",{"_index":104,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["defaultsigntype",{"_index":105,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["defines",{"_index":509,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":517,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":631,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":657,"title":{},"body":{"modules/AuthModule.html":{}}}],["description",{"_index":39,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}}}],["destroy",{"_index":737,"title":{},"body":{"injectables/AuthService.html":{}}}],["direction",{"_index":363,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["directive",{"_index":485,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["directives",{"_index":487,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["display",{"_index":340,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["div",{"_index":464,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["doc",{"_index":998,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":70,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["duration",{"_index":394,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["dynamic",{"_index":78,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["déconnexion",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":194,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ease",{"_index":396,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["easily",{"_index":79,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["element",{"_index":484,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ellipsis",{"_index":443,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["email",{"_index":261,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["emailname",{"_index":267,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["emailname.split('.').join",{"_index":269,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["empty",{"_index":479,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["en",{"_index":203,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":742,"title":{},"body":{"injectables/AuthService.html":{}}}],["ends",{"_index":613,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["enum",{"_index":512,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["enumerations",{"_index":982,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":253,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["error",{"_index":293,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["error(this.errormessage",{"_index":237,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["error_btn_class",{"_index":168,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_description",{"_index":674,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["errorbtnclass",{"_index":187,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["errormessage",{"_index":185,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["errors",{"_index":934,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["example",{"_index":85,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["exports",{"_index":635,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["extend",{"_index":410,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["extrabold",{"_index":402,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["failed",{"_index":838,"title":{},"body":{"injectables/AuthService.html":{}}}],["falls",{"_index":36,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["false",{"_index":182,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["field",{"_index":660,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["fill",{"_index":386,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["filter",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["filter(([isloading",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["finally",{"_index":884,"title":{},"body":{"injectables/AuthService.html":{}}}],["finalreq",{"_index":594,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["finalscope",{"_index":907,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["finalscope(scope",{"_index":684,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["findmatchingroute",{"_index":625,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first",{"_index":587,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first((route",{"_index":627,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["flex",{"_index":361,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["focus:bg",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:border",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:outline",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:shadow",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":374,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["footer",{"_index":477,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["forroot",{"_index":643,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroot(config",{"_index":644,"title":{},"body":{"modules/AuthModule.html":{}}}],["fr",{"_index":820,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":864,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.config.httpinterceptor.apirequeststosecure).pipe",{"_index":626,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["from(this.cryptrclient.isauthenticated",{"_index":851,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.logout(this.prelogoutcallback(callback",{"_index":827,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signinwithredirect(scope",{"_index":823,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signupwithredirect(scope",{"_index":825,"title":{},"body":{"injectables/AuthService.html":{}}}],["full",{"_index":404,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["fullauthenticateprocess",{"_index":896,"title":{},"body":{"injectables/AuthService.html":{}}}],["fullname",{"_index":266,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["function",{"_index":390,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["functions",{"_index":985,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["gap",{"_index":421,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["getaccesstoken",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{}}}],["getclaimsfromaccess",{"_index":908,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["getclaimsfromaccess(accesstoken",{"_index":701,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getclientuser",{"_index":844,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentaccesstoken",{"_index":681,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getcurrentidtoken",{"_index":682,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getidtoken",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{}}}],["getobservableuser",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshstore",{"_index":696,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gets",{"_index":497,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["getting",{"_index":991,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":699,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gray",{"_index":309,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":339,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["guard",{"_index":545,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":546,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":406,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["h3",{"_index":476,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["handle",{"_index":80,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["handled",{"_index":880,"title":{},"body":{"injectables/AuthService.html":{}}}],["handleinvitationstate",{"_index":909,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handleinvitationstate(scope",{"_index":691,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlenewtokens",{"_index":910,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handlenewtokens(refreshstore",{"_index":693,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handleredirectcallback",{"_index":694,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlerefreshtokens",{"_index":697,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handletokens(tokens",{"_index":831,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokenserrors",{"_index":911,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handletokenserrors(errors",{"_index":692,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["has_ssr",{"_index":536,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["head",{"_index":518,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["header",{"_index":472,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["headers",{"_index":599,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["height",{"_index":378,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["hidden",{"_index":431,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["hover:bg",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:shadow",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:text",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":483,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["http",{"_index":511,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["http://localhsot:4201",{"_index":821,"title":{},"body":{"injectables/AuthService.html":{}}}],["http_response",{"_index":673,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["httpevent",{"_index":583,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httphandler",{"_index":580,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":535,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpinterceptorconfig",{"_index":525,"title":{"interfaces/HttpInterceptorConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["httpinterceptorrouteconfig",{"_index":520,"title":{"interfaces/HttpInterceptorRouteConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["httpinterceptorrouteconfig).uri",{"_index":523,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpmethod",{"_index":513,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["httprequest",{"_index":579,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["id",{"_index":666,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["id_token",{"_index":732,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":948,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":475,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ignore",{"_index":180,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["iif",{"_index":585,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["img",{"_index":462,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["implements",{"_index":83,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["import",{"_index":43,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["imports",{"_index":652,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["initials",{"_index":264,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inject",{"_index":507,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(authconfigservice",{"_index":539,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(cryptrclientservice",{"_index":591,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["injection",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":508,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('browser",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":18,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["injector.get(router",{"_index":54,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["inline",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input",{"_index":162,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inputs",{"_index":94,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inscription",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instance",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instanceof",{"_index":199,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["intercept",{"_index":575,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["intercept(req",{"_index":578,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interceptor",{"_index":571,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":573,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interface",{"_index":524,"title":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":544,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invitation",{"_index":886,"title":{},"body":{"injectables/AuthService.html":{}}}],["invite",{"_index":662,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["invitewithoutredirect",{"_index":912,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithoutredirect(scope",{"_index":687,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["invitewithredirect",{"_index":913,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithredirect(scope",{"_index":690,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["isauthenticated",{"_index":255,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["ishttpinterceptorrouteconfig",{"_index":521,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(def",{"_index":987,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(route",{"_index":620,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["isloading",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{}}}],["isopened",{"_index":181,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["iswidget",{"_index":106,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["items",{"_index":364,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":275,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["js",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["justify",{"_index":407,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["leading",{"_index":379,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["left",{"_index":348,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["legend",{"_index":482,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["level",{"_index":470,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["lg",{"_index":326,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":377,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["lines",{"_index":994,"title":{},"body":{"index.html":{}}}],["live",{"_index":730,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["locale",{"_index":107,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["localizedstring(key",{"_index":204,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["localizedstrings",{"_index":175,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localizedstrings[this.currentlocale()][key",{"_index":205,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["location",{"_index":17,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["location=yes,height=${this.popupheight},width=${this.popupwidth},scrollbars=yes,status=yes",{"_index":245,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["log",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_out_btn_class",{"_index":169,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logosrc",{"_index":108,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logout",{"_index":239,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/variables.html":{}}}],["logout(callback",{"_index":704,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["logoutbtnclass",{"_index":109,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logoutbtnstyle",{"_index":110,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logoutlabel",{"_index":111,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logouttext",{"_index":276,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["manage",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccount",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccounttext",{"_index":279,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["map",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(([isloading",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{}}}],["margin",{"_index":370,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["match",{"_index":229,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["matching",{"_index":63,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":428,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["mb",{"_index":383,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["md",{"_index":358,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["medium",{"_index":380,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":661,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["metadata",{"_index":86,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":981,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ml",{"_index":441,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["module",{"_index":628,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":630,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":646,"title":{},"body":{"modules/AuthModule.html":{}}}],["mon",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":996,"title":{},"body":{"index.html":{}}}],["mt",{"_index":424,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":40,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl",{"_index":14,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl(url",{"_index":26,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigates",{"_index":29,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigationend",{"_index":164,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["navigator",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigator.ts",{"_index":7,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["navigator.ts:22",{"_index":28,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator.ts:9",{"_index":20,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["new",{"_index":227,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newparams",{"_index":862,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpath",{"_index":871,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":557,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["next.handle(finalreq",{"_index":602,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["ngmodule",{"_index":647,"title":{},"body":{"modules/AuthModule.html":{}}}],["ngonchanges(_changes",{"_index":219,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ngondestroy",{"_index":802,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngunsubscribe",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["none",{"_index":480,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["not(:empty",{"_index":481,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["notes",{"_index":506,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["nowrap",{"_index":444,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["null",{"_index":186,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["number",{"_index":153,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["object",{"_index":700,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":558,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["observableauthenticated",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{}}}],["offset",{"_index":337,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["onchanges",{"_index":84,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ondestroy",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":33,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["ont",{"_index":438,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["opacity",{"_index":303,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["openid",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["opens",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/Tokens.html":{},"miscellaneous/functions.html":{}}}],["other_key",{"_index":537,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["otherwise",{"_index":35,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["out",{"_index":397,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overflow",{"_index":430,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["overview",{"_index":1002,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":432,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["package",{"_index":975,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":347,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["page",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{}}}],["pane",{"_index":467,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":516,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":231,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["path).tostring",{"_index":873,"title":{},"body":{"injectables/AuthService.html":{}}}],["peer",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["performs",{"_index":749,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":294,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["pointer",{"_index":456,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["popupheight",{"_index":112,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["popupparams",{"_index":244,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["popupwidth",{"_index":113,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["position",{"_index":300,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["post",{"_index":514,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["prelogoutcallback(callback",{"_index":826,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["process",{"_index":743,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["profile&quot",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["progress",{"_index":718,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":683,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["prompt",{"_index":137,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["properties",{"_index":9,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["property",{"_index":385,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["provide",{"_index":653,"title":{},"body":{"modules/AuthModule.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["provider",{"_index":988,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":634,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["provides",{"_index":989,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providing",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":515,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["px",{"_index":345,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["py",{"_index":353,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["queryparams",{"_index":859,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;en&quot",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;fr&quot",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;http://localhsot:4201&quot",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["radius",{"_index":359,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["read",{"_index":503,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["read:invoices",{"_index":819,"title":{},"body":{"injectables/AuthService.html":{}}}],["read:invoices&quot",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["recurringrefreshtoken",{"_index":914,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["recurringrefreshtoken(refreshtokenwrapper",{"_index":698,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["red",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect",{"_index":745,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirection",{"_index":750,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirecturi",{"_index":114,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["redirecturipath",{"_index":226,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["reerror",{"_index":801,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":664,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["refresh_expiration_date",{"_index":678,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_leeway",{"_index":679,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_retry",{"_index":680,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_token",{"_index":676,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refreshstore",{"_index":675,"title":{"interfaces/RefreshStore.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenwrapper",{"_index":940,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["region",{"_index":532,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["related",{"_index":997,"title":{},"body":{"index.html":{}}}],["relative",{"_index":299,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":582,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.clone",{"_index":598,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.headers.set('authorization",{"_index":600,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request",{"_index":607,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.method",{"_index":622,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.url.startswith(value.substr(0",{"_index":619,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["requested",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpath",{"_index":611,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["reset",{"_index":640,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["resetauthentication(isauthenticated",{"_index":815,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":62,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":64,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":720,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieving/opening",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["reverse",{"_index":369,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(0",{"_index":330,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(107",{"_index":311,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(156",{"_index":418,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(17",{"_index":316,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(243",{"_index":342,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(245",{"_index":414,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(55",{"_index":447,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(59",{"_index":411,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rigerror",{"_index":798,"title":{},"body":{"injectables/AuthService.html":{}}}],["right",{"_index":350,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ring",{"_index":336,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["root",{"_index":48,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["rounded",{"_index":357,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":563,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["route.httpmethod",{"_index":621,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["routecleanedpath",{"_index":867,"title":{},"body":{"injectables/AuthService.html":{}}}],["router",{"_index":12,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["routerconfig",{"_index":224,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["routerconfig.foreach",{"_index":230,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["routerstatesnapshot",{"_index":555,"title":{},"body":{"guards/AuthGuard.html":{}}}],["row",{"_index":362,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":568,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["rxjs/operators",{"_index":588,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":753,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["scopes",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{}}}],["screen",{"_index":426,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["searchparams",{"_index":918,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["see",{"_index":504,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"index.html":{}}}],["segments",{"_index":564,"title":{},"body":{"guards/AuthGuard.html":{}}}],["selector",{"_index":87,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["separator",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":125,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["session",{"_index":82,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["set",{"_index":491,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["set(config",{"_index":499,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["setdefaults",{"_index":206,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sets",{"_index":501,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["settimeout",{"_index":57,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["settings",{"_index":722,"title":{},"body":{"injectables/AuthService.html":{}}}],["setuser(newuser",{"_index":842,"title":{},"body":{"injectables/AuthService.html":{}}}],["shadow",{"_index":325,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["showaccessbuttononly",{"_index":285,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showsigninbutton",{"_index":282,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showsignupbutton",{"_index":283,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showwidgetbtn",{"_index":284,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign",{"_index":138,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sign.in",{"_index":133,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign.up",{"_index":134,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign_btn_class",{"_index":170,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signbtnclass",{"_index":115,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["signbtnstyle",{"_index":116,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["signin",{"_index":142,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signinwithoutredirect",{"_index":915,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signinwithoutredirect(scope",{"_index":685,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signinwithredirect",{"_index":286,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signinwithredirect(\"email",{"_index":818,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(&quot;email",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(scope",{"_index":688,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signup",{"_index":663,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signupwithoutredirect",{"_index":916,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signupwithoutredirect(scope",{"_index":686,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signupwithredirect",{"_index":288,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signupwithredirect(\"email",{"_index":824,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(&quot;email",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(scope",{"_index":689,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["simplechanges",{"_index":163,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["size",{"_index":375,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sm",{"_index":450,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sm:px",{"_index":468,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["sourceurltree",{"_index":866,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.fragment",{"_index":865,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.queryparams",{"_index":860,"title":{},"body":{"injectables/AuthService.html":{}}}],["spa",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["space",{"_index":367,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["span",{"_index":463,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["specific",{"_index":738,"title":{},"body":{"injectables/AuthService.html":{}}}],["specified",{"_index":30,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["src/.../auth.config.ts",{"_index":983,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":984,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../window.ts",{"_index":986,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/abstract",{"_index":6,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["src/lib/account",{"_index":72,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["src/lib/auth.config.ts",{"_index":490,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.config.ts:49",{"_index":494,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:61",{"_index":500,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:68",{"_index":496,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.guard.ts",{"_index":547,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/lib/auth.guard.ts:18",{"_index":551,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:21",{"_index":566,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:25",{"_index":556,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:32",{"_index":560,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.interceptor.ts",{"_index":574,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["src/lib/auth.interceptor.ts:23",{"_index":577,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:29",{"_index":581,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.module.ts",{"_index":641,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.module.ts:16",{"_index":645,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.service.ts",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/lib/auth.service.ts:114",{"_index":748,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:143",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:162",{"_index":736,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:205",{"_index":735,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:213",{"_index":726,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:221",{"_index":731,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:243",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:251",{"_index":747,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:259",{"_index":719,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:267",{"_index":734,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:275",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:283",{"_index":746,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:291",{"_index":733,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:300",{"_index":725,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:316",{"_index":723,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/utils/constants.ts",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/enums.ts",{"_index":965,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/types.ts",{"_index":659,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/utils/types.ts:48",{"_index":925,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:49",{"_index":926,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:50",{"_index":937,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:51",{"_index":923,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:52",{"_index":941,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:53",{"_index":943,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:54",{"_index":935,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:55",{"_index":942,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:56",{"_index":944,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:57",{"_index":936,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:58",{"_index":929,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:59",{"_index":933,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:60",{"_index":930,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:61",{"_index":931,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:62",{"_index":920,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:63",{"_index":927,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:64",{"_index":932,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:65",{"_index":939,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:66",{"_index":928,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:67",{"_index":924,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:68",{"_index":917,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:69",{"_index":919,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:70",{"_index":945,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:71",{"_index":938,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:72",{"_index":921,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/window.ts",{"_index":969,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":992,"title":{"index.html":{}},"body":{}}],["startswith",{"_index":616,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["state",{"_index":554,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["statements",{"_index":949,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stateurl",{"_index":857,"title":{},"body":{"injectables/AuthService.html":{}}}],["stateurl.split('?')[0",{"_index":858,"title":{},"body":{"injectables/AuthService.html":{}}}],["static",{"_index":642,"title":{},"body":{"modules/AuthModule.html":{}}}],["still",{"_index":717,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":727,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":27,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stripqueryfrom(uri",{"_index":603,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["stroke",{"_index":387,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["style",{"_index":178,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["styles",{"_index":69,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["styleurls",{"_index":90,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sub",{"_index":469,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["subject",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["sugnup",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":1000,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":466,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules.html":{}}}],["t",{"_index":320,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["table",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["telemetry",{"_index":671,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["template",{"_index":68,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["templateurl",{"_index":92,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["tenant_domain",{"_index":272,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["tenantkey",{"_index":271,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["testprimitive",{"_index":608,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route",{"_index":624,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route.uri",{"_index":623,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["text",{"_index":308,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["this.accountbtnclass",{"_index":216,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountlabel",{"_index":280,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountpopup",{"_index":190,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountpopup.close",{"_index":192,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.config().default_locale",{"_index":202,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.config()[tenantkey].split",{"_index":274,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.currentauthenticationstate",{"_index":256,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.fullauthenticateprocess(state.url",{"_index":570,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.getclientuser",{"_index":257,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.logout",{"_index":241,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.observableauthenticated",{"_index":569,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.signinwithredirect(default_scope",{"_index":287,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.signupwithredirect(default_scope",{"_index":289,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.useraccountaccess().then(accountaccessdata",{"_index":247,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.authenticate",{"_index":810,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.asobservable",{"_index":855,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.next(newauthenticated",{"_index":854,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.value",{"_index":835,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.badgeclass",{"_index":217,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.buttonlabel",{"_index":273,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.canattachtoken(route",{"_index":597,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.canhandleauthentication",{"_index":878,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cannotdisplayuser",{"_index":262,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.checkauthentication",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkconfig",{"_index":220,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.cleanroutestate",{"_index":883,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanurltree(currenturltree",{"_index":872,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.closeaccountpopup",{"_index":195,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.config",{"_index":541,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.config.httpinterceptor.apirequeststosecure.foreach(route",{"_index":596,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.config.httpinterceptor?.apirequeststosecure",{"_index":595,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.configfactory.get().has_ssr",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient",{"_index":822,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleauthentication",{"_index":829,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleinvitation",{"_index":887,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.config",{"_index":848,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentaccesstoken",{"_index":593,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentidtoken",{"_index":841,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getuser",{"_index":845,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handleredirectcallback",{"_index":830,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handlerefreshtokens",{"_index":847,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.isauthenticated",{"_index":840,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.useraccountaccess",{"_index":846,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultauthenticationcallback(isauthenticated",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultsigntext",{"_index":209,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.defaultsigntype",{"_index":208,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.email().split('@')[0",{"_index":268,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.errormessage",{"_index":233,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.fullname().match(/\\b(\\w)/g).join",{"_index":265,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.handleredirectcallback().then((tokens",{"_index":879,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handletokens(tokens",{"_index":881,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated",{"_index":259,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.isauthenticated().then((isauthenticated",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then(async",{"_index":806,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.asobservable",{"_index":850,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.next(false",{"_index":814,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isopened",{"_index":197,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.iswidget",{"_index":207,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.locale",{"_index":201,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring('logout",{"_index":278,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring('manageaccount",{"_index":281,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring(this.defaultsigntype",{"_index":210,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.location.path",{"_index":868,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(this.routecleanedpath",{"_index":875,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(url",{"_index":61,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.logout(null",{"_index":799,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logoutbtnclass",{"_index":218,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.logoutlabel",{"_index":277,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.ngunsubscribe$.complete",{"_index":804,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.next",{"_index":803,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.popupheight",{"_index":211,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.popupparams",{"_index":252,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.popupwidth",{"_index":213,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.redirecturi",{"_index":225,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.resetauthentication(false",{"_index":813,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(isauthenticated",{"_index":808,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router",{"_index":53,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{}}}],["this.router.createurltree([path",{"_index":863,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.events.subscribe((val",{"_index":196,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.router.navigatebyurl(url",{"_index":58,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.parseurl(path",{"_index":870,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.set(config",{"_index":540,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.setdefaults",{"_index":221,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.setuser(null",{"_index":817,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setuser(this.getclientuser",{"_index":836,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signbtnclass",{"_index":215,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.signinwithredirect",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect(default_scope",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripqueryfrom(request.url",{"_index":612,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.togglebtnclass",{"_index":292,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.toggleopen",{"_index":240,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.unauthenticatedpath",{"_index":243,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.updatecurrentauthstate(false",{"_index":816,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(handled",{"_index":882,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(isauthenticated",{"_index":807,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(valid",{"_index":834,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user",{"_index":260,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.user$.asobservable",{"_index":852,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.next(newuser",{"_index":843,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.value",{"_index":849,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user().email",{"_index":263,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["throw",{"_index":236,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["timing",{"_index":389,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["todo",{"_index":885,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle",{"_index":461,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggle_cass_closed",{"_index":171,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggle_cass_opened",{"_index":172,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["togglebtnclass",{"_index":117,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["togglebtnstyle",{"_index":118,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggleclass",{"_index":291,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggleopen",{"_index":238,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["token",{"_index":728,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":672,"title":{"interfaces/TokenError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["tokenoptions",{"_index":528,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["tokens",{"_index":668,"title":{"interfaces/Tokens.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["top",{"_index":322,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["transform",{"_index":388,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["transition",{"_index":384,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["transparent",{"_index":457,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["tree",{"_index":71,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["true",{"_index":147,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["truncate",{"_index":442,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["try",{"_index":52,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["tslib",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["tw",{"_index":302,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1003,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":189,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["unauthenticatedpath",{"_index":119,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["undefined",{"_index":191,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["up",{"_index":139,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updatecurrentauthstate(newauthenticated",{"_index":853,"title":{},"body":{"injectables/AuthService.html":{}}}],["uppercase",{"_index":399,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["uri",{"_index":527,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["uri.indexof",{"_index":604,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["uri.substr(0",{"_index":605,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["url(this.redirecturi).pathname",{"_index":228,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["urlsegment",{"_index":565,"title":{},"body":{"guards/AuthGuard.html":{}}}],["urltree",{"_index":567,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["usage",{"_index":505,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["use",{"_index":126,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["used",{"_index":32,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["usefactory",{"_index":655,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":81,"title":{"interfaces/User.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["user_account_btn_class",{"_index":173,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useraccountaccess",{"_index":246,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":654,"title":{},"body":{"modules/AuthModule.html":{}}}],["using",{"_index":615,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["utils/constants",{"_index":174,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["utils/enums",{"_index":176,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["utils/types",{"_index":177,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["val",{"_index":198,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["valid",{"_index":669,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["value",{"_index":609,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.indexof",{"_index":617,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.length",{"_index":618,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.trim",{"_index":610,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["var",{"_index":314,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["variable",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1005,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":42,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["w",{"_index":382,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["weight",{"_index":381,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["white",{"_index":305,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["whitespace",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{}}}],["widget",{"_index":146,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["widgetbuttontext",{"_index":270,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["width",{"_index":323,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window",{"_index":184,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["window.addeventlistener('beforeunload",{"_index":193,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_expired",{"_index":800,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_invalid_grant",{"_index":797,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.history.replacestate",{"_index":38,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["window.location",{"_index":744,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.location.href",{"_index":242,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window.open(url",{"_index":250,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["windowprovider",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["windowservice",{"_index":972,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["wrap",{"_index":433,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["x",{"_index":368,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["xl",{"_index":436,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["xs",{"_index":400,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":458,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["yellow",{"_index":413,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":495,"title":{},"body":{"injectables/AuthClientConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["z",{"_index":297,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["zoom",{"_index":639,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractNavigator.html":{"url":"injectables/AbstractNavigator.html","title":"injectable - AbstractNavigator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AbstractNavigator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/abstract-navigator.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateByUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateByUrl\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateByUrl(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/abstract-navigator.ts:22\n                \n            \n\n\n            \n                \n                    Navigates to the specified url. The router will be used if one is available, otherwise it falls back\nto window.history.replaceState.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The url to navigate to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AccountAccessButtonComponent.html":{"url":"components/AccountAccessButtonComponent.html","title":"component - AccountAccessButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AccountAccessButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/account-access-button/account-access-button.component.ts\n\n\n    \n        Description\n    \n    \n        Account AccessButton Component\nDynamic component to easily handle User session\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                cryptr-account-access-button[auth]\n            \n\n            \n                styleUrls\n                ./account-access-button.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./account-access-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                accountBtnClass\n                            \n                            \n                                accountBtnStyle\n                            \n                            \n                                accountLabel\n                            \n                            \n                                auth\n                            \n                            \n                                badgeClass\n                            \n                            \n                                badgeStyle\n                            \n                            \n                                buttonLabel\n                            \n                            \n                                childClass\n                            \n                            \n                                childStyle\n                            \n                            \n                                defaultSignText\n                            \n                            \n                                defaultSignType\n                            \n                            \n                                isWidget\n                            \n                            \n                                locale\n                            \n                            \n                                logoSrc\n                            \n                            \n                                logOutBtnClass\n                            \n                            \n                                logOutBtnStyle\n                            \n                            \n                                logOutLabel\n                            \n                            \n                                popupHeight\n                            \n                            \n                                popupWidth\n                            \n                            \n                                redirectUri\n                            \n                            \n                                signBtnClass\n                            \n                            \n                                signBtnStyle\n                            \n                            \n                                toggleBtnClass\n                            \n                            \n                                toggleBtnStyle\n                            \n                            \n                                unauthenticatedPath\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        accountBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:71\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        accountBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        accountLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        auth\n                    \n                \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:34\n                            \n                        \n                \n                    \n                        Cryptr Auth service to use for this component\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        badgeClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:70\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        badgeStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buttonLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:53\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        childClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:73\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        childStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:65\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultSignText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:48\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultSignType\n                    \n                \n                \n                    \n                        Type :         Sign.In | Sign.Up\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:47\n                            \n                        \n                \n                    \n                        Choose if Component should prompt sign in or sign up when\nno active session\nDefault: Sign.In -> \"signin\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isWidget\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:40\n                            \n                        \n                \n                    \n                        Choose if component should behave like a widget.\nDefault: true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        locale\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:50\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        logoSrc\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:72\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        popupHeight\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        popupWidth\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        redirectUri\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:51\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        signBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:68\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        signBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        toggleBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:69\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        toggleBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        unauthenticatedPath\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:49\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport {\n  BADGE_CLASS,\n  DEFAULT_SCOPE,\n  ERROR_BTN_CLASS,\n  LOG_OUT_BTN_CLASS,\n  SIGN_BTN_CLASS,\n  TOGGLE_CASS_CLOSED,\n  TOGGLE_CASS_OPENED,\n  USER_ACCOUNT_BTN_CLASS\n} from '../utils/constants';\nimport { LocalizedStrings } from '../utils/enums';\nimport { Sign, User } from '../utils/types';\n\n/**\n * Account AccessButton Component\n * Dynamic component to easily handle User session\n *\n * @example\n * \n * \n */\n@Component({\n  selector: 'cryptr-account-access-button[auth]',\n  templateUrl: './account-access-button.component.html',\n  styleUrls: ['./account-access-button.component.scss']\n})\nexport class AccountAccessButtonComponent implements OnChanges {\n  /**\n   * Cryptr Auth service to use for this component\n   */\n  @Input() auth: AuthService;\n  /**\n   * Choose if component should behave like a widget.\n   *\n   * **Default:** true\n   */\n  @Input() isWidget: boolean;\n  /**\n   * Choose if Component should prompt sign in or sign up when\n   * no active session\n   *\n   * **Default:** Sign.In -> `\"signin\"`\n   */\n  @Input() defaultSignType: Sign.In | Sign.Up;\n  @Input() defaultSignText: string;\n  @Input() unauthenticatedPath: string;\n  @Input() locale: string;\n  @Input() redirectUri: string;\n  @Input() logoSrc: string;\n  @Input() buttonLabel: string;\n  @Input() logOutLabel: string;\n  @Input() accountLabel: string;\n  @Input() popupHeight: number;\n  @Input() popupWidth: number;\n\n  // STYLE config\n  @Input() signBtnStyle: any;\n  @Input() toggleBtnStyle: any;\n  @Input() badgeStyle: any;\n  @Input() accountBtnStyle: any;\n  @Input() logOutBtnStyle: any;\n  @Input() childStyle: any;\n\n  // CLASS config\n  @Input() signBtnClass: string;\n  @Input() toggleBtnClass: string;\n  @Input() badgeClass: string;\n  @Input() accountBtnClass: string;\n  @Input() logOutBtnClass: string;\n  @Input() childClass: string;\n\n  /**\n   * @ignore\n   */\n  isOpened = false;\n  /**\n   * @ignore\n   */\n  accountPopup: Window;\n  /**\n   * @ignore\n   */\n  errorMessage: string = null;\n  /**\n   * @ignore\n   */\n  errorBtnClass = ERROR_BTN_CLASS;\n\n  /**\n   * @ignore\n   */\n  closeAccountPopup(): void {\n    if (typeof this.accountPopup !== 'undefined' && this.accountPopup !== null) {\n      this.accountPopup.close();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(private router: Router) {\n    window.addEventListener('beforeunload', (e) => {\n      this.closeAccountPopup();\n    });\n\n    this.router.events.subscribe((val) => {\n      if (this.isOpened && (val instanceof NavigationEnd)) {\n        this.isOpened = false;\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  currentLocale(): string {\n    try {\n      return this.locale || this.auth.config().default_locale || 'en';\n    } catch (e) {\n      return 'en';\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  localizedString(key: string): string {\n    return LocalizedStrings[this.currentLocale()][key];\n  }\n\n  /**\n   * @ignore\n   */\n  setDefaults(): void {\n    if (this.isWidget === undefined) {\n      this.isWidget = true;\n    }\n    if (this.defaultSignType === undefined) {\n      this.defaultSignType = Sign.In;\n    }\n    if (this.defaultSignText === undefined) {\n      this.defaultSignText = this.localizedString(this.defaultSignType);\n    }\n    this.popupHeight = this.popupHeight || 935;\n    this.popupWidth = this.popupWidth || 915;\n\n    this.signBtnClass = this.signBtnClass || SIGN_BTN_CLASS;\n    this.accountBtnClass = this.accountBtnClass || USER_ACCOUNT_BTN_CLASS;\n    this.badgeClass = this.badgeClass || BADGE_CLASS;\n    this.logOutBtnClass = this.logOutBtnClass || LOG_OUT_BTN_CLASS;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(_changes: SimpleChanges): void {\n    this.checkConfig();\n    this.setDefaults();\n  }\n\n  /**\n   * @ignore\n   */\n  checkConfig(): void {\n    // const { config: routerConfig } = this.router;\n    // if (this.redirectUri) {\n    //   const redirectUriPath = new URL(this.redirectUri).pathname;\n    //   let match = false;\n    //   routerConfig.forEach(({ path, canActivate }) => {\n    //     if (canActivate !== undefined && `/${path}` === redirectUriPath) {\n    //       match = true;\n    //     }\n    //   });\n    //   if (!match) {\n    //     this.errorMessage = `The path '${redirectUriPath}' MUST BE Configured in your router with 'canActivate: [AuthGuard]'`;\n    //     throw new Error(this.errorMessage);\n    //   }\n    // }\n  }\n\n  /**\n   * @ignore\n   */\n  toggleOpen(): void {\n    this.isOpened = !this.isOpened;\n  }\n\n  /**\n   * @ignore\n   */\n  logOut(): void {\n    this.toggleOpen();\n    this.auth.logOut(() => {\n      window.location.href = this.unauthenticatedPath || '/';\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  popupParams(): string {\n    return `location=yes,height=${this.popupHeight},width=${this.popupWidth},scrollbars=yes,status=yes`;\n  }\n\n  /**\n   * @ignore\n   */\n  userAccountAccess(): void {\n    this.toggleOpen();\n    this.auth.userAccountAccess().then(accountAccessData => {\n      try {\n        const { data: { data: { url } } } = accountAccessData;\n        this.accountPopup = window.open(url, '_blank', this.popupParams());\n      } catch (err) {\n        console.error(err.message);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  isAuthenticated(): boolean {\n    return this.auth.currentAuthenticationState();\n  }\n\n  /**\n   * @ignore\n   */\n  user(): User | undefined {\n    return this.auth.getClientUser();\n  }\n\n  /**\n   * @ignore\n   */\n  cannotDisplayUser(): boolean {\n    return !this.isAuthenticated() || typeof this.user() === 'undefined';\n  }\n\n  /**\n   * @ignore\n   */\n  email(): string | undefined {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    return this.user().email;\n  }\n\n  /**\n   * @ignore\n   */\n  initials(): any {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    return this.fullName().match(/\\b(\\w)/g).join('');\n  }\n\n  /**\n   * @ignore\n   */\n  fullName(): any {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    const emailName = this.email().split('@')[0];\n    return emailName.split('.').join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  widgetButtonText(): string {\n    const tenantKey = 'tenant_domain';\n    return this.buttonLabel || this.auth.config()[tenantKey].split('-').join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  logOutText(): string {\n    return this.logOutLabel || this.localizedString('logOut');\n  }\n\n  /**\n   * @ignore\n   */\n  manageAccountText(): string {\n    return this.accountLabel || this.localizedString('manageAccount');\n  }\n\n  /**\n   * @ignore\n   */\n  showSigninButton(): boolean {\n    return !this.isAuthenticated() && this.defaultSignType === Sign.In;\n  }\n\n  /**\n   * @ignore\n   */\n  showSignupButton(): boolean {\n    return !this.isAuthenticated() && this.defaultSignType === Sign.Up;\n  }\n\n  /**\n   * @ignore\n   */\n  showWidgetBtn(): boolean {\n    return this.isWidget && this.isAuthenticated();\n  }\n\n  /**\n   * @ignore\n   */\n  showAccessButtonOnly(): boolean {\n    return this.isAuthenticated() && !this.isWidget;\n  }\n\n  /**\n   * @ignore\n   */\n  signInWithRedirect(): void {\n    this.auth.signInWithRedirect(DEFAULT_SCOPE, this.locale, this.redirectUri);\n  }\n\n  /**\n   * @ignore\n   */\n  signUpWithRedirect(): void {\n    this.auth.signUpWithRedirect(DEFAULT_SCOPE, this.locale, this.redirectUri);\n  }\n\n  /**\n   * @ignore\n   */\n  currentToggleBtnClass(): string {\n    let toggleClass = TOGGLE_CASS_CLOSED;\n    if (this.toggleBtnClass !== undefined) {\n      toggleClass = this.toggleBtnClass;\n    } else if (this.isOpened) {\n      toggleClass = TOGGLE_CASS_OPENED;\n    }\n    return toggleClass;\n  }\n}\n\n    \n\n    \n        \n  \n  \n    Error please check your console\n  \n  \n  \n    {{ defaultSignText }}\n  \n\n  \n    {{ defaultSignText }}\n  \n\n  \n  \n    \n      \n      \n        {{ widgetButtonText() }}\n      \n      \n        {{ initials() }}\n      \n      \n        \n      \n    \n    \n      \n        \n          \n            \n            \n              \n                \n                  {{ initials() }}\n                \n              \n              \n                \n                  \n                    {{ fullName() }}\n                  \n                  \n                    {{ email() }}\n                  \n                \n                \n                  \n                    {{ manageAccountText() }}\n                  \n                \n              \n            \n            \n              \n            \n            \n              \n                \n                  \n                    {{ logOutText() }}\n                  \n                \n              \n            \n          \n        \n      \n    \n  \n\n  \n    \n      {{ accountLabel }}\n    \n  \n\n\n    \n\n    \n                \n                    ./account-access-button.component.scss\n                \n                .z-20 {\n  z-index: 20;\n}\n\n.relative {\n  position: relative;\n}\n\n.bg {\n  --tw-bg-opacity: 1;\n}\n\n.bg-white {\n  background-color: white;\n}\n\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgba(107, 114, 128, var(--tw-text-opacity));\n}\n\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, var(--tw-text-opacity));\n}\n\n.border-t-4 {\n  border-top-width: 4px;\n}\n\n.border-white {\n  border-color: white;\n}\n\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n    0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.grid {\n  display: grid;\n}\n\n.border-gray-100 {\n  --tw-border-opacity: 1;\n  border-color: rgba(243, 244, 246, var(--tw-border-opacity));\n}\n\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-row {\n  flex-direction: row;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.space-x-2 {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n.leading-6 {\n  line-height: 1.5rem;\n}\n\n.font-medium {\n  font-weight: 500;\n}\n\n.w-6 {\n  width: 1.5rem;\n}\n\n.mb-0 {\n  margin-bottom: 0;\n}\n\n.transition {\n  transition-property: background-color, border-color, color, fill, stroke,\n    opacity, box-shadow, transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.ease-in-out {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.duration-150 {\n  transition-duration: 150ms;\n}\n\n.uppercase {\n  text-transform: uppercase;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-extrabold {\n  font-weight: 800;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.h-6 {\n  height: 1.5rem;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.bg-blue-500 {\n  @extend .bg;\n  background-color: rgba(59, 130, 246, var(--tw-bg-opacity));\n}\n\n.bg-gray-100 {\n  @extend .bg;\n  background-color: rgba(243, 244, 246, var(--tw-bg-opacity));\n}\n\n.text-white {\n  color: white;\n}\n\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgba(245, 158, 11, var(--tw-text-opacity));\n}\n\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgba(156, 163, 175, var(--tw-text-opacity));\n}\n\n.gap-6 {\n  gap: 1.5rem;\n}\n\n.h-5 {\n  height: 1.25rem;\n}\n\n.w-5 {\n  width: 1.25rem;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.right-0 {\n  right: 0px;\n}\n\n.mt-3 {\n  margin-top: 0.75rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.w-screen {\n  width: 100vw;\n}\n\n.max-w-xs {\n  max-width: 20rem;\n}\n\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.p-6 {\n  padding: 1.5rem;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.h-12 {\n  height: 3rem;\n}\n\n.w-12 {\n  width: 3rem;\n}\n\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n\n.ont-bold {\n  font-weight: 700;\n}\n\n.ml-6 {\n  margin-left: 1.5rem;\n}\n\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.capitalize {\n  text-transform: capitalize;\n}\n\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n.leading-5 {\n  line-height: 1.25rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.mt-1 {\n  margin-top: 0.25rem;\n}\n\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgba(55, 65, 81, var(--tw-text-opacity));\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-transparent {\n  border-color: transparent;\n}\n\n.bg-yellow-500 {\n  @extend .bg;\n  background-color: rgba(245, 158, 11, var(--tw-bg-opacity));\n}\n\n.space-y-6 {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\n}\n\n#cryptr-account-access-btn {\n  @extend .z-20;\n  @extend .relative;\n\n  .btn-style-1 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  .btn-style-2 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  .btn-style-3 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  #cryptr-toggle-btn {\n    img {\n      @extend .w-6;\n      @extend .mb-0;\n    }\n\n    span {\n      @extend .text-gray-900;\n      @extend .uppercase;\n      @extend .text-xs;\n\n      margin-right: 0.5rem;\n    }\n\n    // div {\n    //   @extend .uppercase;\n    //   @extend .rounded-full;\n    //   @extend .h-6;\n    //   @extend .w-6;\n    //   @extend .flex;\n    //   @extend .items-center;\n    //   @extend .justify-center;\n    //   @extend .bg-blue-500;\n    //   @extend .text-xs;\n    //   @extend .text-white;\n\n    //   margin-left: 0.5em;\n    // }\n\n    svg {\n      @extend .text-gray-400;\n      @extend .h-5;\n      @extend .w-5;\n      @extend .transition;\n      @extend .ease-in-out;\n      @extend .duration-150;\n    }\n  }\n\n  .widget-pane {\n    @extend .absolute;\n    @extend .right-0;\n    @extend .mt-3;\n    @extend .px-2;\n    @extend .w-screen;\n    @extend .max-w-xs;\n    // @extend .sm:px-0;\n  }\n\n  .sub-level-1 {\n    @extend .rounded-lg;\n    @extend .shadow-lg;\n  }\n\n  .sub-level-2 {\n    @extend .rounded-lg;\n    @extend .overflow-hidden;\n  }\n\n  .sub-level-3 {\n    @extend .rounded-lg;\n    @extend .overflow-hidden;\n  }\n\n  .sub-level-3 {\n    @extend .relative;\n    @extend .bg-white;\n  }\n\n  .basic-header {\n    @extend .p-6;\n    @extend .flex;\n    @extend .flex-wrap;\n    @extend .w-full;\n  }\n\n  .initials-badge {\n    @extend .flex;\n    @extend .items-center;\n\n    .initials {\n      // @extend .uppercase;\n      // @extend .rounded-full;\n      @extend .h-12;\n      @extend .w-12;\n      // @extend .flex;\n      // @extend .items-center;\n      // @extend .justify-center;\n      // @extend .bg-blue-500;\n      @extend .text-xl;\n      @extend .font-bold;\n      // @extend .text-white;\n    }\n  }\n\n  .user-block {\n    @extend .ml-6;\n\n    .user-identity {\n      h3 {\n        @extend .capitalize;\n        @extend .text-gray-900;\n        @extend .text-base;\n        @extend .leading-5;\n        @extend .font-bold;\n        @extend .mb-0;\n      }\n\n      p {\n        @extend .mt-1;\n        @extend .text-gray-700;\n        @extend .font-medium;\n        @extend .text-sm;\n        @extend .leading-5;\n      }\n    }\n\n    .user-account-block {\n      @extend .flex;\n      @extend .flex-wrap;\n      @extend .w-full;\n      @extend .justify-between;\n    }\n  }\n\n  .logout-footer {\n    @extend .border-t-4;\n    @extend .border-white;\n    @extend .p-6;\n    @extend .bg-gray-100;\n  }\n\n  .children {\n    &:empty {\n      display: none;\n    }\n\n    &:not(:empty) {\n      @extend .z-20;\n      @extend .border-t-4;\n      @extend .border-gray-100;\n      @extend .relative;\n      @extend .grid;\n      @extend .gap-6;\n      @extend .bg-white;\n      @extend .p-6;\n      @extend .transition;\n      @extend .ease-in-out;\n      @extend .duration-150;\n      @extend .text-gray-900;\n    }\n  }\n\n  .btn-block {\n    @extend .rounded-md;\n    @extend .shadow;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Error please check your console          {{ defaultSignText }}        {{ defaultSignText }}                              {{ widgetButtonText() }}                    {{ initials() }}                                                                                                                                  {{ initials() }}                                                                                                  {{ fullName() }}                                                        {{ email() }}                                                                                        {{ manageAccountText() }}                                                                                                                                                                                  {{ logOutText() }}                                                                                                      {{ accountLabel }}      '\n    var COMPONENTS = [{'name': 'AccountAccessButtonComponent', 'selector': 'cryptr-account-access-button[auth]'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AccountAccessButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthClientConfig.html":{"url":"injectables/AuthClientConfig.html","title":"injectable - AuthClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:68\n                \n            \n\n\n            \n                \n                    Gets the config that has been set by other consumers of the service\n\n\n                    \n                        Returns :         AuthConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(config: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:61\n                \n            \n\n\n            \n                \n                    Sets configuration to be read by other consumers of the service (see usage notes)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The configuration to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        has_ssr\n                                \n                                \n                                        httpInterceptor\n                                \n                                \n                                            Optional\n                                        other_key\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        has_ssr\n                                    \n                                \n                                \n                                    \n                                        has_ssr:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpInterceptor\n                                    \n                                \n                                \n                                    \n                                        httpInterceptor:         HttpInterceptorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpInterceptorConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        other_key\n                                    \n                                \n                                \n                                    \n                                        other_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable {\n    return this.auth.observableAuthenticated();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthHttpInterceptor.html":{"url":"interceptors/AuthHttpInterceptor.html","title":"interceptor - AuthHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AuthConfig, cryptrClient: any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.interceptor.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { first } from 'rxjs/operators';\nimport { CryptrClientService } from './auth.client';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(CryptrClientService) private cryptrClient: any\n  ) { }\n\n  intercept(\n    req: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const aToken = this.cryptrClient.getCurrentAccessToken();\n    let finalReq = req;\n\n    if (this.config.httpInterceptor?.apiRequestsToSecure !== undefined && aToken !== undefined) {\n      this.config.httpInterceptor.apiRequestsToSecure.forEach(route => {\n        if (this.canAttachToken(route, req)) {\n\n          finalReq = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${aToken}`),\n          });\n        }\n      });\n    }\n    return next.handle(finalReq);\n  }\n\n  /**\n   * @ignore\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * @ignore\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * @ignore\n   */\n  private findMatchingRoute(\n    request: HttpRequest\n  ): Observable {\n    return from(this.config.httpInterceptor.apiRequestsToSecure).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.module.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService, AuthClientConfig } from './auth.config';\nimport { AuthGuard } from './auth.guard';\nimport { AccountAccessButtonComponent } from './account-access-button/account-access-button.component';\nimport { CommonModule } from '@angular/common';\nimport { CryptrClientFactory, CryptrClientService } from './auth.client';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AccountAccessButtonComponent],\n  exports: [AccountAccessButtonComponent],\n  bootstrap: [AccountAccessButtonComponent]\n})\nexport class AuthModule {\n  static forRoot(config?: AuthConfig): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        {\n          provide: AuthConfigService,\n          useValue: config,\n        },\n        {\n          provide: CryptrClientService,\n          useFactory: CryptrClientFactory.createClient,\n          deps: [AuthClientConfig],\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponseError.html":{"url":"interfaces/AuthResponseError.html","title":"interface - AuthResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                AuthService - Cryptr Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticationInProgress\n                            \n                            \n                                config\n                            \n                            \n                                currentAuthenticationObservable\n                            \n                            \n                                currentAuthenticationState\n                            \n                            \n                                getAccessToken\n                            \n                            \n                                getIdToken\n                            \n                            \n                                getObservableUser\n                            \n                            \n                                getUser\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                logOut\n                            \n                            \n                                observableAuthenticated\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signInWithRedirect\n                            \n                            \n                                signUpWithRedirect\n                            \n                            \n                                userAccountAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authenticationInProgress\n                        \n                        \n                    \n                \n            \n            \n                \nauthenticationInProgress()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:275\n                \n            \n\n\n            \n                \n                    Check if authentication check still in progress\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication progress state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:259\n                \n            \n\n\n            \n                \n                    Retrieve Cryptr current configuration\n\n\n                    \n                    \n                    \n                        Returns :         Config\n\n                    \n                    \n                        Current Cryptr configuration settings\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationObservable\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationObservable()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:316\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state as Observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        boolean observable of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationState\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationState()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:300\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:213\n                \n            \n\n\n            \n                \n                    Retrieve current stored access token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session access_token or undefined if no live session\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:221\n                \n            \n\n\n            \n                \n                    retrieve current stored id token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session id_token or undefined if no live session.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObservableUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetObservableUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:291\n                \n            \n\n\n            \n                \n                    Retrieve current user as observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Current user as Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:267\n                \n            \n\n\n            \n                \n                    Retrieve current user\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        User object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:205\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        authentication state in a Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: () => void, location: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:162\n                \n            \n\n\n            \n                \n                    Destroy current session with specific action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nAction to call at the end of logout process\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        window.location\n                                    \n\n                                    \n                                        \nDefault: window.location. Where to redirect after logout process\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        process logout of session with callback call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            observableAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nobservableAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:283\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:251\n                \n            \n\n\n            \n                \n                    Refresh current tokens.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:114\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signin process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign in process (whitespace separator)\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign in process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign in process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignInWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignInWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this signin redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:143\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signup process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign up process (whitespace separator).\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign up process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign up process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignUpWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignUpWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this sugnup redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:243\n                \n            \n\n\n            \n                \n                    Opens user account page.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise of retrieving/opening page\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\nimport { BehaviorSubject, combineLatest, from, Observable, Subject } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\nimport { Config, CryptrClient, Tokens } from './utils/types';\nimport { ActivatedRoute, Router, UrlTree } from '@angular/router';\nimport { CryptrClientService } from './auth.client';\nimport { filter, map } from 'rxjs/operators';\nimport { DEFAULT_SCOPE } from './utils/constants';\nimport { AuthClientConfig } from './auth.config';\n\n/**\n * AuthService - Cryptr Authentication Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnDestroy {\n  /**\n   * @ignore\n   */\n  private ngUnsubscribe$ = new Subject();\n  /**\n   * @ignore\n   */\n  private authenticated$ = new BehaviorSubject(false);\n  /**\n   * @ignore\n   */\n  private user$ = new BehaviorSubject(null);\n  /**\n   * @ignore\n   */\n  private isLoading$ = new BehaviorSubject(true);\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Inject(CryptrClientService) private cryptrClient: CryptrClient,\n    private location: Location,\n    private navigator: AbstractNavigator,\n    private router: Router,\n    private route: ActivatedRoute,\n    private configFactory: AuthClientConfig,\n  ) {\n    this.checkAuthentication();\n    window.addEventListener(CryptrSpa.events.REFRESH_INVALID_GRANT, (RigError) => {\n      this.logOut(null);\n    });\n    window.addEventListener(CryptrSpa.events.REFRESH_EXPIRED, (ReError) => {\n      this.logOut(null);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  private checkAuthentication(): void {\n    this.isAuthenticated().then(async (isAuthenticated: boolean) => {\n      this.updateCurrentAuthState(isAuthenticated);\n      this.resetAuthentication(isAuthenticated);\n      await this.authenticate();\n    }).catch((error) => {\n      console.error(error);\n      this.resetAuthentication(false);\n      this.isLoading$.next(false);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private resetAuthentication(isAuthenticated: boolean): void {\n    if (isAuthenticated) {\n      return;\n    }\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n  }\n\n  /**\n   * Performs redirection to Cryptr for signin process with chosen args\n   * @example\n   * Default usage\n   * signInWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signInWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign in process (whitespace separator)\n   * @param locale - Default: `config.default_locale` value. locale for this sign in process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign in process.\n   * @returns Observable of this signin redirection\n   */\n  signInWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    if (this.cryptrClient) {\n      return from(this.cryptrClient.signInWithRedirect(scope, redirectUri, locale));\n    }\n  }\n\n  /**\n   * Performs redirection to Cryptr for signup process with chosen args\n   * @example\n   * Default usage\n   * signUpWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signUpWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign up process (whitespace separator).\n   * @param locale - Default: `config.default_locale` value. locale for this sign up process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign up process.\n   * @returns Observable of this sugnup redirection\n   */\n  signUpWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    return from(this.cryptrClient.signUpWithRedirect(scope, redirectUri, locale));\n  }\n\n  /**\n   * @ignore\n   */\n  private preLogOutCallBack(callback: () => void): () => void {\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n    return callback;\n  }\n\n  /**\n   * Destroy current session with specific action\n   * @param callback - Action to call at the end of logout process\n   * @param location - **Default:** `window.location`. Where to redirect after logout process\n   * @returns process logout of session with callback call\n   */\n  logOut(callback: () => void, location: any = window.location): Observable {\n    return from(this.cryptrClient.logOut(this.preLogOutCallBack(callback), location));\n  }\n\n  /**\n   * @ignore\n   */\n  canHandleAuthentication(): boolean {\n    return this.cryptrClient.canHandleAuthentication();\n  }\n\n  /**\n   * @ignore\n   */\n  handleRedirectCallback(): Promise {\n    try {\n      return this.cryptrClient.handleRedirectCallback();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  handleTokens(tokens: Tokens): boolean {\n    // console.log('tokens');\n    // console.log(tokens);\n    const { valid, accessToken } = tokens;\n    this.updateCurrentAuthState(valid && accessToken !== undefined);\n    if (this.authenticated$.value) {\n      this.setUser(this.getClientUser());\n    } else {\n      console.error('handling tokens failed');\n      console.error(tokens);\n    }\n    return this.authenticated$.value;\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns authentication state in a Promise\n   */\n  isAuthenticated(): Promise {\n    return this.cryptrClient.isAuthenticated();\n  }\n\n  /**\n   * Retrieve current stored access token\n   * @returns Current session access_token or undefined if no live session\n   */\n  getAccessToken(): string | undefined {\n    return this.cryptrClient.getCurrentAccessToken();\n  }\n\n  /**\n   * retrieve current stored id token\n   * @returns Current session id_token or undefined if no live session.\n   */\n  getIdToken(): string | undefined {\n    return this.cryptrClient.getCurrentIdToken();\n  }\n\n  /**\n   * @ignore\n   */\n  private setUser(newUser: any): void {\n    this.user$.next(newUser);\n  }\n\n  /**\n   * @ignore\n   */\n  getClientUser(): any {\n    return this.cryptrClient.getUser();\n  }\n\n  /**\n   * Opens user account page.\n   * @returns Promise of retrieving/opening page\n   */\n  userAccountAccess(): Promise {\n    return this.cryptrClient.userAccountAccess();\n  }\n\n  /**\n   * Refresh current tokens.\n   * @returns void\n   */\n  refreshTokens(): void {\n    this.cryptrClient.handleRefreshTokens();\n  }\n\n  /**\n   * Retrieve Cryptr current configuration\n   * @returns Current Cryptr configuration settings\n   */\n  config(): Config {\n    return this.cryptrClient.config;\n  }\n\n  /**\n   * Retrieve current user\n   * @returns User object\n   */\n  getUser(): any {\n    return this.user$.value;\n  }\n\n  /**\n   * Check if authentication check still in progress\n   * @returns Boolean observable of authentication progress state\n   */\n  authenticationInProgress(): Observable {\n    return this.isLoading$.asObservable();\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns Boolean observable of authentication state\n   */\n  observableAuthenticated(): Observable {\n    return from(this.cryptrClient.isAuthenticated());\n  }\n\n  /**\n   * Retrieve current user as observable\n   * @returns Current user as Observable\n   */\n  getObservableUser(): Observable {\n    return this.user$.asObservable();\n  }\n\n\n  /**\n   * Retrieve current authentication state.\n   * @returns boolean of authentiation state\n   */\n  currentAuthenticationState(): boolean {\n    return this.authenticated$.value;\n  }\n\n  /**\n   * @ignore\n   */\n  private updateCurrentAuthState(newAuthenticated: boolean): void {\n    this.authenticated$.next(newAuthenticated);\n    this.setUser(this.getClientUser());\n  }\n\n  /**\n   * Retrieve current authentication state as Observable\n   * @returns boolean observable of authentiation state\n   */\n  currentAuthenticationObservable(): Observable {\n    return this.authenticated$.asObservable();\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanUrlTree(sourceUrlTree: UrlTree, stateUrl?: string): UrlTree {\n    try {\n      const path = !!stateUrl ? stateUrl.split('?')[0] : '';\n      const queryParams = sourceUrlTree.queryParams;\n      const { authorization_id, code, state, ...newParams } = queryParams;\n      return this.router.createUrlTree([path], { queryParams: newParams, fragment: sourceUrlTree.fragment });\n    } catch (error) {\n      return sourceUrlTree;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private routeCleanedPath(): string {\n    const path = this.location.path();\n    const currentUrlTree = this.router.parseUrl(path);\n    const newPath = this.cleanUrlTree(currentUrlTree, path).toString();\n    return !!newPath ? newPath : '/';\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanRouteState(): void {\n    setTimeout(() => {\n      this.location.replaceState(this.routeCleanedPath(), '');\n    }, 2);\n  }\n\n  /**\n   * @ignore\n   */\n  private async authenticate(): Promise {\n    if (this.authenticated$.value) {\n      this.isLoading$.next(false);\n      return;\n    }\n    this.resetAuthentication(false);\n    if (this.canHandleAuthentication()) {\n      return this.handleRedirectCallback().then((tokens) => {\n        const handled = this.handleTokens(tokens);\n        this.updateCurrentAuthState(handled);\n        if (handled) {\n          this.cleanRouteState();\n          this.isLoading$.next(false);\n        } else {\n          this.isLoading$.next(false);\n        }\n        return handled;\n      }).catch((error) => {\n        return false;\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n      // TODO: handle invitation process\n      // } else if (this.cryptrClient.canHandleInvitation()) {\n      //   console.log('can handle invite')\n    } else {\n      await this.cryptrClient.handleRefreshTokens();\n      this.isAuthenticated().then((isAuthenticated) => {\n        this.updateCurrentAuthState(isAuthenticated);\n      }).catch((err) => {\n        this.updateCurrentAuthState(false);\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private defaultAuthenticationCallback(isAuthenticated: boolean, stateUrl?: string): boolean {\n    const { audience, default_locale } = this.config();\n    const redirectUri = audience.concat(stateUrl || '');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      if (this.configFactory.get().has_ssr) {\n        this.signInWithRedirect(DEFAULT_SCOPE, default_locale, redirectUri);\n      } else {\n        this.signInWithRedirect();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  fullAuthenticateProcess(\n    stateUrl?: string,\n    callback?: (isAuthenticated: boolean, stateUrl?: string) => boolean\n  ): Observable {\n    return combineLatest(\n      [this.isLoading$, this.authenticated$]\n    ).pipe(\n      filter(([isLoading, isAuthenticated]) => {\n        return !isLoading;\n      }),\n      map(([isLoading, isAuthenticated]) => {\n        if (callback) {\n          return callback(isAuthenticated, stateUrl);\n        } else {\n          return this.defaultAuthenticationCallback(isAuthenticated, stateUrl);\n        }\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authorization.html":{"url":"interfaces/Authorization.html","title":"interface - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                            Optional\n                                        telemetry\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telemetry\n                                    \n                                \n                                \n                                    \n                                        telemetry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptrClient.html":{"url":"interfaces/CryptrClient.html","title":"interface - CryptrClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CryptrClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canHandleAuthentication\n                                \n                                \n                                    canHandleInvitation\n                                \n                                \n                                    canRefresh\n                                \n                                \n                                    decoratedRequest\n                                \n                                \n                                    finalScope\n                                \n                                \n                                    getClaimsFromAccess\n                                \n                                \n                                    getCurrentAccessToken\n                                \n                                \n                                    getCurrentIdToken\n                                \n                                \n                                    getRefreshStore\n                                \n                                \n                                    getUser\n                                \n                                \n                                    handleInvitationState\n                                \n                                \n                                    handleNewTokens\n                                \n                                \n                                    handleRedirectCallback\n                                \n                                \n                                    handleRefreshTokens\n                                \n                                \n                                    handleTokensErrors\n                                \n                                \n                                    inviteWithoutRedirect\n                                \n                                \n                                    inviteWithRedirect\n                                \n                                \n                                    isAuthenticated\n                                \n                                \n                                    logOut\n                                \n                                \n                                    recurringRefreshToken\n                                \n                                \n                                    signInWithoutRedirect\n                                \n                                \n                                    signInWithRedirect\n                                \n                                \n                                    signUpWithoutRedirect\n                                \n                                \n                                    signUpWithRedirect\n                                \n                                \n                                    userAccountAccess\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleInvitation\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleInvitation(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canRefresh\n                        \n                        \n                    \n                \n            \n            \n                \ncanRefresh(refreshStore: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decoratedRequest\n                        \n                        \n                    \n                \n            \n            \n                \ndecoratedRequest(axiosRequestConfig: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    axiosRequestConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalScope\n                        \n                        \n                    \n                \n            \n            \n                \nfinalScope(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClaimsFromAccess\n                        \n                        \n                    \n                \n            \n            \n                \ngetClaimsFromAccess(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     object | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRefreshStore\n                        \n                        \n                    \n                \n            \n            \n                \ngetRefreshStore()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         RefreshStore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     object | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInvitationState\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInvitationState(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleNewTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleNewTokens(refreshStore: RefreshStore, tokens?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokens\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRefreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokensErrors\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokensErrors(errors: TokenError[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                TokenError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: any, location?: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recurringRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \nrecurringRefreshToken(refreshTokenWrapper: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenWrapper\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorConfig.html":{"url":"interfaces/HttpInterceptorConfig.html","title":"interface - HttpInterceptorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        apiRequestsToSecure\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiRequestsToSecure\n                                    \n                                \n                                \n                                    \n                                        apiRequestsToSecure:         ApiRouteDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiRouteDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorRouteConfig.html":{"url":"interfaces/HttpInterceptorRouteConfig.html","title":"interface - HttpInterceptorRouteConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorRouteConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        httpMethod\n                                \n                                \n                                            Optional\n                                        tokenOptions\n                                \n                                \n                                        uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpMethod\n                                    \n                                \n                                \n                                    \n                                        httpMethod:         HttpMethod | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenOptions\n                                    \n                                \n                                \n                                    \n                                        tokenOptions:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshStore.html":{"url":"interfaces/RefreshStore.html","title":"interface - RefreshStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_expiration_date\n                                \n                                \n                                        refresh_expiration_date\n                                \n                                \n                                        refresh_leeway\n                                \n                                \n                                        refresh_retry\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_expiration_date\n                                    \n                                \n                                \n                                    \n                                        access_token_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_expiration_date\n                                    \n                                \n                                \n                                    \n                                        refresh_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_leeway\n                                    \n                                \n                                \n                                    \n                                        refresh_leeway:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_retry\n                                    \n                                \n                                \n                                    \n                                        refresh_retry:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenError.html":{"url":"interfaces/TokenError.html","title":"interface - TokenError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        error_description\n                                \n                                \n                                        http_response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error_description\n                                    \n                                \n                                \n                                    \n                                        error_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http_response\n                                    \n                                \n                                \n                                    \n                                        http_response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accessToken\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/abstract-navigator.ts\n            \n            injectable\n            AbstractNavigator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/account-access-button/account-access-button.component.ts\n            \n            component\n            AccountAccessButtonComponent\n            \n                15 %\n                (4/26)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            injectable\n            AuthClientConfig\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorRouteConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            function\n            isHttpInterceptorRouteConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            variable\n            AuthConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/auth.interceptor.ts\n            \n            interceptor\n            AuthHttpInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            BADGE_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            DEFAULT_SCOPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            ERROR_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            LOG_OUT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            SIGN_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_CLOSED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_OPENED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            USER_ACCOUNT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/enums.ts\n            \n            variable\n            LocalizedStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Authorization\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            AuthResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            CryptrClient\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            RefreshStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            TokenError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            function\n            windowProvider\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            variable\n            WindowService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @cryptr/cryptr-spa-js : ^0.1.10\n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9 \n        \n            @angular/core : >=9 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../auth.config.ts)\n                        \n                        \n                            Sign   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                    \n                        \n                            Defines a common set of HTTP methods.\n\n                        \n                    \n                        \n                            \n                                 Get\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 Put\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 Patch\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 Head\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n            \n        \n\n    src/lib/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Sign\n                    \n                \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : invite\n                            \n                        \n                        \n                            \n                                 In\n                            \n                        \n                        \n                            \n                                Value : signin\n                            \n                        \n                        \n                            \n                                 Up\n                            \n                        \n                        \n                            \n                                Value : signup\n                            \n                        \n                        \n                            \n                                 Refresh\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isHttpInterceptorRouteConfig   (src/.../auth.config.ts)\n                        \n                        \n                            windowProvider   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isHttpInterceptorRouteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nisHttpInterceptorRouteConfig(def)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpInterceptorRouteConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/window.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            windowProvider\n                        \n                        \n                    \n                \n            \n            \n                \nwindowProvider()\n                \n            \n\n\n\n\n            \n                \n                    Default window provider. Provides the actual window object.\n\n\n                    \n                        Returns :     Window\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nStatements\nBranches\nFunctions\nLines\n\n\n\n\n\n\n\n\n\n\n\nCryptrAngular\nFor more See our related live Doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiRouteDefinition   (src/.../auth.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n    \n        \n            \n                \n                    \n                    ApiRouteDefinition\n                \n            \n            \n                \n                        HttpInterceptorRouteConfig | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfigService   (src/.../auth.config.ts)\n                        \n                        \n                            BADGE_CLASS   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_SCOPE   (src/.../constants.ts)\n                        \n                        \n                            ERROR_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            LocalizedStrings   (src/.../enums.ts)\n                        \n                        \n                            LOG_OUT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            SIGN_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_CLOSED   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_OPENED   (src/.../constants.ts)\n                        \n                        \n                            USER_ACCOUNT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            WindowService   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\n  'cryptr-angular.config'\n)\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BADGE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'uppercase rounded-full h-6 w-6 flex items-center justify-center bg-blue-500 text-xs text-white'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SCOPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'openid email profile'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-red-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_OUT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-yellow-500 bg-white hover:text-yellow-400 focus:outline-none focus:border-yellow-300 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SIGN_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-yellow-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_CLOSED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 transition ease-in-out duration-150 focus:outline-none'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_OPENED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 focus:outline-none focus:bg-gray-200 focus:shadow-none transition ease-in-out duration-150'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_ACCOUNT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer mt-2 w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-white bg-yellow-500 hover:bg-yellow-400 focus:outline-none focus:border-yellow-600 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/enums.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LocalizedStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  fr: {\n    signin: 'Connexion',\n    signup: 'Inscription',\n    logOut: 'Déconnexion',\n    manageAccount: 'Mon Compte'\n  },\n  en: {\n    signin: 'Sign In',\n    signup: 'Sign Up',\n    logOut: 'Log out',\n    manageAccount: 'Manage my account'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/window.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WindowService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('Browser window')\n                        \n                    \n\n                \n                    \n                        Injection token for providing an instance of window\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
