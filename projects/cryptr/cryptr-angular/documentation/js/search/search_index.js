var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractNavigator.html",[0,0.841,1,1.906]],["body/injectables/AbstractNavigator.html",[0,1.307,1,2.963,2,2.346,3,0.532,4,0.532,5,0.464,6,4.509,7,3.1,8,0.281,9,1.182,10,2.341,11,5.2,12,4.2,13,1.442,14,4.744,15,2.088,16,3.755,17,1.928,18,5.842,19,2.118,20,4.744,21,1.932,22,0.039,23,1.752,24,0.469,25,1.182,26,4.744,27,0.736,28,3.755,29,4.744,30,4.744,31,4.088,32,4.744,33,4.744,34,4.744,35,4.744,36,4.744,37,4.744,38,4.744,39,2.346,40,4.744,41,1.53,42,0.959,43,1.743,44,1.142,45,2.346,46,2.346,47,1.69,48,1.69,49,0.532,50,1.258,51,2.668,52,2.668,53,3.916,54,3.755,55,2.668,56,1.874,57,3.1,58,3.755,59,2.668,60,1.258,61,3.755,62,0.023,63,0.029,64,0.023]],["title/components/AccountAccessButtonComponent.html",[65,1.906,66,1.697]],["body/components/AccountAccessButtonComponent.html",[3,0.102,4,0.251,5,0.089,8,0.097,12,1.536,19,1.992,22,0.039,23,0.48,24,0.441,27,0.761,31,0.513,39,0.451,42,0.692,43,0.93,44,0.22,45,0.451,49,0.102,50,1.378,51,0.513,52,0.923,53,0.596,55,0.923,59,3.69,60,1.567,62,0.004,63,0.008,64,0.004,65,2.744,66,1.202,67,1.299,68,0.722,69,0.722,70,0.722,71,0.722,72,4.075,73,3.597,74,3.507,75,0.596,76,3.135,77,1.299,78,1.299,79,1.299,80,1.072,81,1.305,82,3.203,83,0.811,84,1.77,85,1.072,86,0.722,87,1.77,88,1.36,89,1.77,90,1.299,91,1.77,92,1.299,93,1.299,94,1.299,95,1.77,96,1.77,97,2.493,98,2.058,99,1.77,100,1.77,101,1.77,102,1.77,103,1.77,104,3.022,105,1.77,106,1.77,107,0.835,108,1.77,109,1.77,110,1.77,111,1.77,112,1.77,113,1.77,114,0.593,115,1.77,116,1.77,117,1.77,118,1.77,119,1.77,120,0.722,121,5.457,122,2.776,123,3.594,124,4.979,125,2.776,126,2.434,127,0.722,128,4.308,129,0.722,130,4.589,131,0.883,132,0.722,133,0.648,134,1.299,135,0.722,136,3.744,137,2.493,138,3.426,139,0.722,140,0.722,141,2.776,142,2.494,143,2.493,144,1.299,145,1.299,146,0.722,147,1.103,148,3.594,149,0.722,150,2.776,151,1.299,152,1.299,153,1.299,154,0.722,155,2.776,156,1.77,157,0.722,158,2.162,159,1.299,160,0.358,161,1.35,162,0.358,163,0.654,164,0.722,165,1.299,166,1.536,167,0.722,168,1.784,169,0.292,170,0.428,171,2.162,172,1.536,173,0.722,174,1.299,175,1.299,176,0.722,177,2.245,178,0.722,179,0.722,180,0.798,181,0.722,182,1.299,183,2.162,184,2.162,185,2.967,186,2.776,187,1.131,188,2.162,189,1.784,190,0.722,191,1.299,192,0.722,193,1.784,194,0.973,195,0.324,196,1.072,197,0.722,198,0.722,199,0.722,200,0.722,201,0.722,202,2.058,203,1.072,204,4.936,205,1.299,206,1.299,207,0.513,208,0.923,209,0.451,210,0.923,211,0.923,212,0.923,213,0.923,214,0.923,215,0.923,216,0.596,217,0.513,218,0.722,219,0.596,220,3.644,221,0.722,222,0.722,223,0.513,224,0.722,225,0.435,226,0.722,227,0.722,228,1.299,229,1.77,230,0.692,231,0.722,232,0.722,233,1.299,234,0.722,235,0.722,236,2.493,237,0.722,238,0.722,239,0.722,240,1.77,241,0.722,242,0.722,243,0.722,244,0.722,245,2.162,246,2.162,247,1.299,248,0.722,249,1.299,250,0.722,251,1.299,252,0.722,253,1.299,254,1.299,255,1.299,256,1.299,257,0.722,258,0.722,259,0.722,260,0.722,261,1.122,262,0.722,263,1.77,264,1.77,265,0.722,266,1.461,267,0.722,268,1.461,269,0.722,270,0.722,271,0.402,272,0.722,273,0.722,274,0.722,275,1.299,276,0.722,277,0.722,278,0.722,279,0.722,280,0.722,281,0.242,282,0.722,283,1.299,284,0.722,285,0.722,286,0.722,287,0.722,288,0.722,289,0.722,290,0.242,291,0.722,292,0.722,293,0.722,294,2.493,295,0.722,296,0.538,297,1.77,298,0.722,299,0.722,300,1.77,301,0.722,302,0.722,303,0.722,304,1.77,305,0.722,306,0.18,307,0.722,308,0.722,309,0.722,310,1.77,311,0.722,312,0.722,313,1.77,314,0.722,315,0.722,316,0.722,317,0.722,318,0.722,319,0.722,320,0.513,321,0.722,322,0.513,323,0.722,324,0.722,325,2.162,326,1.299,327,0.435,328,1.299,329,1.072,330,1.299,331,2.162,332,2.162,333,2.058,334,1.299,335,3.808,336,5.095,337,4.393,338,2.569,339,3.479,340,2.493,341,4.308,342,3.556,343,2.967,344,0.722,345,0.722,346,0.722,347,4.79,348,2.162,349,0.722,350,0.722,351,0.722,352,3.808,353,1.77,354,1.77,355,3.022,356,3.237,357,1.299,358,3.692,359,2.828,360,0.722,361,0.722,362,1.299,363,2.162,364,1.299,365,0.722,366,1.299,367,0.722,368,1.77,369,2.162,370,1.299,371,2.162,372,1.77,373,1.771,374,1.299,375,1.299,376,1.77,377,2.494,378,2.672,379,3.744,380,2.776,381,3.022,382,3.237,383,3.909,384,3.594,385,2.058,386,2.843,387,3.022,388,2.162,389,3.203,390,2.058,391,1.77,392,0.722,393,3.752,394,2.058,395,0.722,396,2.672,397,3.203,398,0.722,399,3.304,400,2.494,401,2.776,402,3.744,403,1.299,404,1.299,405,2.292,406,3.692,407,2.493,408,1.77,409,3.022,410,3.594,411,2.494,412,2.058,413,2.162,414,3.395,415,1.77,416,3.091,417,0.722,418,0.722,419,0.722,420,1.77,421,1.299,422,0.585,423,1.299,424,1.299,425,1.299,426,2.672,427,1.299,428,2.292,429,1.734,430,2.292,431,2.058,432,2.058,433,1.299,434,0.722,435,0.722,436,0.722,437,2.292,438,2.494,439,1.299,440,1.461,441,6.094,442,0.722,443,0.722,444,1.072,445,1.299,446,1.299,447,1.072,448,1.072,449,0.722,450,0.722,451,0.722,452,1.77,453,1.77,454,0.722,455,2.058,456,1.771,457,0.722,458,1.77,459,0.722,460,2.776,461,2.493,462,2.493,463,2.493,464,2.162,465,1.299,466,1.072,467,0.722,468,0.722,469,1.784,470,2.162,471,1.299,472,0.722,473,0.722,474,0.722,475,1.77,476,1.77,477,0.722,478,0.722,479,0.722,480,1.299,481,0.722,482,1.77,483,1.77,484,0.722,485,1.072,486,1.072,487,1.072,488,2.162,489,1.299,490,2.776,491,0.722,492,0.722,493,0.722,494,0.722,495,0.596,496,0.722,497,0.722,498,2.162,499,2.162,500,0.722,501,0.722,502,1.77,503,0.722,504,0.722,505,0.722,506,0.722,507,0.722,508,0.722,509,0.513,510,1.299,511,1.299,512,0.722,513,0.722,514,0.722,515,0.722]],["title/injectables/AuthClientConfig.html",[0,0.841,516,1.243]],["body/injectables/AuthClientConfig.html",[0,1.203,2,2.062,3,0.467,4,0.467,5,0.408,8,0.247,9,1.088,10,2.201,13,1.487,15,1.835,19,2.119,21,1.778,22,0.039,23,1.612,24,0.47,25,1.219,27,0.839,39,2.062,41,1.778,42,0.882,43,1.106,44,1.004,47,1.486,48,1.486,49,0.815,50,1.106,56,1.647,60,1.463,62,0.02,63,0.027,64,0.02,88,1.486,133,2.596,163,0.667,169,0.742,170,0.839,187,1.344,194,1.486,195,0.823,230,0.667,261,1.964,306,0.823,422,1.486,516,1.778,517,1.219,518,3.152,519,2.725,520,2.414,521,4.364,522,2.062,523,3.301,524,2.726,525,3.249,526,2.726,527,3.301,528,2.726,529,2.893,530,2.726,531,2.427,532,2.427,533,2.726,534,1.647,535,2.427,536,1.835,537,1.835,538,1.835,539,0.909,540,2.719,541,2.427,542,2.427,543,2.427,544,2.427,545,2.427,546,2.44,547,1.806,548,1.486,549,2.719,550,2.062,551,0.223,552,2.178,553,2.062,554,2.062,555,0.909,556,0.823,557,0.909,558,0.909,559,1.835,560,2.062,561,2.062,562,2.062,563,1.835,564,2.062,565,2.427,566,1.344,567,1.835]],["title/interfaces/AuthConfig.html",[520,1.243,551,0.139]],["body/interfaces/AuthConfig.html",[0,1.183,3,0.456,4,0.456,5,0.398,8,0.24,9,1.07,10,1.449,13,0.979,22,0.039,24,0.533,25,1.471,27,0.879,42,0.65,43,1.079,44,0.979,47,1.449,48,1.449,49,0.81,50,1.079,56,1.606,60,1.438,62,0.02,63,0.026,64,0.02,88,1.449,133,2.141,163,0.976,169,1.158,170,0.781,187,1.311,194,1.449,195,1.284,230,0.65,261,1.932,306,1.284,422,1.449,516,1.311,517,1.189,518,2.685,520,2.248,524,2.01,525,2.681,526,2.01,528,2.01,529,2.386,530,2.01,531,1.79,532,1.79,533,2.01,534,1.606,535,2.386,536,1.79,537,1.79,538,1.79,539,0.887,540,2.685,541,2.386,542,2.386,543,2.386,544,2.386,545,2.386,546,2.409,547,1.783,548,1.449,549,2.685,550,2.01,551,0.22,552,2.57,553,2.01,554,2.01,555,1.419,556,1.284,557,1.419,558,1.419,559,2.864,560,3.217,561,3.217,562,2.01,563,1.79,564,2.01,565,2.386,566,1.311,567,1.79,568,0.887]],["title/guards/AuthGuard.html",[271,1.697,569,2.168]],["body/guards/AuthGuard.html",[0,1.301,3,0.528,4,0.528,5,0.461,8,0.278,13,1.435,15,2.072,19,2.219,21,2.219,22,0.039,23,2.012,24,0.492,25,1.358,41,2.111,43,1.826,44,1.133,45,2.328,47,1.677,48,1.677,49,0.528,50,1.249,51,2.648,60,1.737,62,0.023,63,0.029,64,0.023,83,2.328,98,3.897,131,2.718,207,2.648,268,4.64,271,2.625,570,3.727,571,3.076,572,5.621,573,5.448,574,3.727,575,3.727,576,3.727,577,5.832,578,4.74,579,5.832,580,3.727,581,3.897,582,4.144,583,3.727,584,3.727,585,4.721,586,4.721,587,3.994,588,5.182,589,5.448,590,3.727,591,3.076,592,2.648,593,3.727,594,4.721]],["title/interceptors/AuthHttpInterceptor.html",[595,2.519,596,2.168]],["body/interceptors/AuthHttpInterceptor.html",[0,1.17,3,0.449,4,0.449,5,0.392,8,0.237,10,2.402,13,1.291,15,2.362,19,1.73,21,1.73,22,0.039,23,1.569,24,0.383,25,1.059,27,0.678,31,2.251,41,1.291,43,1.841,44,0.963,49,0.449,50,1.062,60,1.936,62,0.02,63,0.026,64,0.02,83,1.979,126,3.018,163,0.64,166,3.018,170,0.601,194,2.156,220,3.404,225,1.062,230,0.858,261,2.156,266,2.615,338,3.197,519,2.615,520,2.085,534,1.581,546,2.119,547,1.17,548,1.426,559,2.362,563,1.762,566,1.291,581,3.954,582,3.636,587,2.251,592,2.251,596,3.018,597,3.168,598,2.615,599,4.791,600,1.32,601,3.168,602,3.168,603,5.494,604,5.118,605,3.168,606,5.118,607,3.168,608,3.168,609,3.168,610,2.251,611,3.168,612,2.615,613,2.251,614,2.251,615,2.615,616,4.791,617,2.615,618,4.247,619,3.168,620,3.168,621,4.247,622,3.168,623,3.168,624,3.168,625,3.168,626,3.168,627,3.168,628,5.118,629,4.247,630,3.168,631,4.791,632,3.168,633,3.197,634,3.168,635,4.247,636,3.168,637,3.168,638,3.168,639,3.168,640,3.168,641,3.168,642,4.247,643,3.168,644,3.168,645,4.247,646,3.168,647,3.168,648,3.168,649,3.168,650,3.168,651,3.168]],["title/modules/AuthModule.html",[652,2.168,653,1.906]],["body/modules/AuthModule.html",[3,0.533,4,0.533,5,0.466,13,1.145,19,1.534,21,1.534,22,0.039,23,1.391,24,0.34,25,0.939,41,1.534,43,1.959,44,1.145,46,2.353,49,0.533,50,1.262,60,1.262,62,0.023,63,0.029,64,0.023,66,3.428,73,2.969,74,2.676,76,2.353,131,2.372,170,0.673,207,2.676,271,2.643,429,2.353,509,2.676,516,1.936,520,2.228,522,2.353,566,1.936,610,2.676,613,3.377,614,2.676,652,2.676,653,3.728,654,2.676,655,2.353,656,4.299,657,4.299,658,3.923,659,4.299,660,3.109,661,3.109,662,3.109,663,3.923,664,3.109,665,3.767,666,4.753,667,3.767,668,4.753,669,3.767,670,5.207,671,5.207,672,3.767,673,3.767,674,4.753,675,3.767,676,3.767,677,4.753,678,3.767,679,3.767,680,3.767,681,3.767]],["title/interfaces/AuthResponseError.html",[551,0.139,682,1.023]],["body/interfaces/AuthResponseError.html",[3,0.477,4,0.477,5,0.416,8,0.252,9,1.103,17,1.482,22,0.039,24,0.399,27,0.894,42,0.894,49,0.828,62,0.021,63,0.027,64,0.021,81,0.928,107,1.873,114,1.873,147,0.928,160,0.928,162,0.928,163,1.129,169,0.757,170,0.699,180,1.937,195,0.84,225,1.129,230,1.06,281,1.129,290,1.129,296,1.024,306,0.84,327,1.129,539,0.928,551,0.264,555,0.928,556,0.84,557,0.928,558,0.928,568,0.928,600,0.928,682,1.482,683,1.129,684,2.136,685,2.136,686,1.482,687,1.024,688,1.482,689,1.129,690,1.244,691,1.244,692,1.345,693,1.244,694,1.244,695,1.372,696,1.482,697,1.372,698,1.372,699,1.825,700,1.372,701,1.372,702,1.372,703,1.372,704,1.372,705,1.372,706,1.372,707,2.21,708,1.372,709,1.372,710,1.372,711,1.372,712,1.244,713,1.244,714,1.372,715,1.372,716,1.372,717,1.372,718,1.244,719,1.372,720,1.372,721,1.372,722,1.372,723,1.244,724,1.345,725,1.372,726,1.372,727,1.372,728,1.244,729,1.372]],["title/injectables/AuthService.html",[0,0.841,131,1.523]],["body/injectables/AuthService.html",[0,0.567,1,1.286,2,0.765,3,0.174,4,0.174,5,0.151,8,0.092,10,2.39,12,1.892,13,0.626,15,0.681,17,1.409,19,2.043,21,1.085,22,0.039,23,0.983,24,0.24,25,0.664,27,0.788,39,1.949,41,2.297,42,0.998,43,1.556,44,0.373,45,0.765,46,0.765,47,0.552,48,0.552,49,0.174,50,0.411,52,1.463,55,1.463,56,2.097,57,1.011,60,1.911,62,0.008,63,0.013,64,0.008,73,1.286,76,1.286,80,1.7,81,1.279,82,3.924,83,0.765,85,3.729,88,2.033,107,1.808,114,1.593,126,1.463,131,1.557,133,1.027,147,1.31,160,1.038,161,3.286,162,0.86,163,1.063,166,0.871,168,2.576,169,0.463,170,0.567,172,1.463,177,2.626,187,1.271,193,3.11,194,1.404,196,4.568,202,1.7,203,4.485,209,0.765,216,1.011,219,1.011,220,3.804,230,0.883,261,2.033,281,1.046,290,1.514,296,0.949,320,2.217,322,2.217,327,0.69,329,2.576,386,0.871,422,0.552,516,0.839,522,2.353,529,1.735,532,2.828,534,0.611,556,0.305,565,0.681,578,4.343,582,4.038,587,0.871,591,2.198,592,0.871,600,0.734,610,0.871,612,1.011,613,0.871,614,0.871,615,1.011,617,1.011,633,2.731,686,0.411,687,0.626,688,0.69,690,0.76,691,0.453,692,1.145,693,0.453,694,0.76,707,1.668,712,0.76,713,0.76,718,0.453,723,1.152,724,0.626,728,0.76,730,1.011,731,5.208,732,3.12,733,3.12,734,3.12,735,3.12,736,3.12,737,3.12,738,3.12,739,3.12,740,1.225,741,2.059,742,3.12,743,1.225,744,5.208,745,2.059,746,1.225,747,3.12,748,1.225,749,1.225,750,3.12,751,2.576,752,2.059,753,2.576,754,1.225,755,2.059,756,1.225,757,1.225,758,1.225,759,1.225,760,2.059,761,2.059,762,3.12,763,3.306,764,3.12,765,2.059,766,3.12,767,1.225,768,1.225,769,1.225,770,3.12,771,4.203,772,3.12,773,3.47,774,4.199,775,3.924,776,3.12,777,3.12,778,3.12,779,3.12,780,3.12,781,3.12,782,4.753,783,2.663,784,2.059,785,3.12,786,2.059,787,2.059,788,2.059,789,1.225,790,2.663,791,2.059,792,1.225,793,2.059,794,3.12,795,2.059,796,2.059,797,1.225,798,1.011,799,1.011,800,1.011,801,1.225,802,2.059,803,2.059,804,1.225,805,2.059,806,2.059,807,1.225,808,1.225,809,1.225,810,1.225,811,1.225,812,1.225,813,2.059,814,1.225,815,1.225,816,1.225,817,1.225,818,1.225,819,2.059,820,1.225,821,1.225,822,1.225,823,1.225,824,1.225,825,1.225,826,1.225,827,2.059,828,1.225,829,2.059,830,1.225,831,2.059,832,2.059,833,2.059,834,3.767,835,1.225,836,2.663,837,2.059,838,2.663,839,2.059,840,1.7,841,2.059,842,1.225,843,1.225,844,2.663,845,1.225,846,1.225,847,1.225,848,1.011,849,1.225,850,1.225,851,1.225,852,1.225,853,1.225,854,1.225,855,3.12,856,2.059,857,1.225,858,1.225,859,1.225,860,1.225,861,1.225,862,1.225,863,1.225,864,1.225,865,1.225,866,1.225,867,2.059,868,1.225,869,1.225,870,1.225,871,1.225,872,1.225,873,1.225,874,1.225,875,1.225,876,1.225,877,4.005,878,1.225,879,2.663,880,1.225,881,1.225,882,2.059,883,1.225,884,1.225,885,1.225,886,1.225,887,1.225,888,1.225,889,1.225,890,1.225,891,2.663,892,1.225,893,1.225,894,1.225,895,1.225,896,1.225,897,1.225,898,1.225,899,1.225,900,2.663,901,1.225,902,1.225,903,1.225,904,2.059,905,1.225,906,1.225,907,1.225,908,1.225,909,1.225,910,1.225,911,1.225,912,1.225,913,1.225,914,1.225,915,1.225,916,1.225,917,1.225,918,1.225,919,1.225,920,1.225,921,1.225,922,1.225,923,1.225]],["title/interfaces/Authorization.html",[551,0.139,689,1.023]],["body/interfaces/Authorization.html",[3,0.477,4,0.477,5,0.416,8,0.252,9,1.103,17,1.482,22,0.039,24,0.399,27,0.894,42,0.894,49,0.828,62,0.021,63,0.027,64,0.021,81,0.928,107,1.873,114,1.873,147,0.928,160,0.928,162,0.928,163,1.129,169,0.757,170,0.699,180,1.937,195,0.84,225,1.129,230,1.06,281,1.129,290,1.129,296,1.024,306,0.84,327,1.129,539,0.928,551,0.264,555,0.928,556,0.84,557,0.928,558,0.928,568,0.928,600,0.928,682,1.129,683,1.129,684,1.372,685,1.372,686,1.482,687,1.024,688,1.482,689,1.482,690,1.937,691,1.937,692,1.345,693,1.244,694,1.244,695,1.372,696,1.482,697,1.372,698,1.372,699,1.825,700,1.372,701,1.372,702,1.372,703,1.372,704,1.372,705,1.372,706,1.372,707,2.21,708,1.372,709,1.372,710,1.372,711,1.372,712,1.244,713,1.244,714,1.372,715,1.372,716,1.372,717,1.372,718,1.244,719,1.372,720,1.372,721,1.372,722,1.372,723,1.244,724,1.345,725,1.372,726,1.372,727,1.372,728,1.244,729,1.372]],["title/interfaces/Config.html",[170,0.432,551,0.139]],["body/interfaces/Config.html",[3,0.446,4,0.446,5,0.39,8,0.236,9,1.055,17,1.418,22,0.039,24,0.514,25,1.42,27,0.895,42,0.855,49,0.817,62,0.019,63,0.026,64,0.019,81,0.869,107,1.838,114,1.838,147,0.869,160,0.869,162,0.869,163,1.151,169,1.148,170,0.723,180,1.886,195,1.273,225,1.056,230,1.032,281,1.056,290,1.056,296,0.958,306,1.273,327,1.056,539,0.869,551,0.26,555,1.407,556,1.273,557,1.407,558,1.407,568,0.869,600,0.869,682,1.056,683,1.056,684,1.284,685,1.284,686,1.418,687,0.958,688,1.418,689,1.056,690,1.164,691,1.164,692,1.287,693,1.164,694,1.164,695,2.08,696,1.418,697,1.284,698,1.284,699,1.785,700,1.284,701,1.284,702,1.284,703,1.284,704,1.284,705,1.284,706,1.284,707,2.188,708,1.284,709,1.284,710,1.284,711,1.284,712,1.164,713,1.164,714,1.284,715,1.284,716,1.284,717,1.284,718,1.164,719,1.284,720,1.284,721,1.284,722,1.284,723,1.164,724,1.287,725,1.284,726,1.284,727,1.284,728,1.164,729,1.284]],["title/interfaces/CryptrClient.html",[551,0.139,600,0.841]],["body/interfaces/CryptrClient.html",[3,0.305,4,0.305,5,0.266,8,0.161,9,0.804,13,0.981,17,1.62,19,2.429,21,2.348,22,0.039,23,2.129,24,0.523,25,1.437,27,0.892,41,2.429,42,0.868,49,0.746,62,0.013,63,0.02,64,0.013,81,0.593,107,1.943,114,1.943,147,0.593,160,0.593,162,0.593,163,1.085,169,0.484,170,0.73,177,2.015,180,1.587,195,0.536,225,1.081,230,1.013,281,1.44,290,1.44,296,0.654,306,0.536,320,2.292,322,2.292,327,0.721,522,3.714,539,0.593,551,0.235,555,0.593,556,0.536,557,0.593,558,0.593,568,0.593,600,0.889,682,0.721,683,0.721,684,0.876,685,0.876,686,1.081,687,0.654,688,1.081,689,0.721,690,0.795,691,0.795,692,1.307,693,0.795,694,1.191,695,0.876,696,1.44,697,0.876,698,0.876,699,1.889,700,0.876,701,0.876,702,0.876,703,0.876,704,0.876,705,1.751,706,1.751,707,2.196,708,1.314,709,1.314,710,1.314,711,1.314,712,1.191,713,1.191,714,1.314,715,1.314,716,1.314,717,1.314,718,1.587,719,1.314,720,1.751,721,1.751,722,1.314,723,1.587,724,1.307,725,1.314,726,1.314,727,1.314,728,1.191,729,1.314,763,1.776,773,4.255,848,2.662,924,3.225,925,3.225,926,3.225,927,3.225,928,3.225,929,3.225,930,3.225,931,3.225,932,3.225,933,3.225,934,3.225,935,3.225,936,3.225,937,2.152,938,3.225,939,2.152,940,2.152,941,2.152,942,2.152,943,2.152,944,2.152,945,2.152,946,2.152,947,2.152,948,2.152,949,2.152,950,2.152,951,2.152,952,2.152,953,2.152,954,2.152,955,2.152,956,2.152,957,2.152,958,2.152,959,2.152,960,2.152,961,2.152,962,2.152,963,2.152,964,2.152,965,2.152]],["title/interfaces/HttpInterceptorConfig.html",[551,0.139,552,1.523]],["body/interfaces/HttpInterceptorConfig.html",[0,1.263,3,0.504,4,0.504,5,0.44,8,0.266,9,1.143,10,1.602,13,1.082,22,0.039,24,0.414,25,0.887,27,0.849,42,0.719,43,1.193,44,1.082,47,1.602,48,1.602,49,0.828,50,1.193,56,1.776,60,1.536,62,0.022,63,0.028,64,0.022,88,1.602,133,2.287,163,0.719,169,0.8,170,0.803,187,1.45,194,1.602,195,0.887,230,0.719,261,2.063,306,0.887,422,1.602,516,1.45,517,1.314,518,2.82,520,2.257,524,2.223,525,2.863,526,2.223,528,2.223,529,2.549,530,2.223,531,1.979,532,1.979,533,2.223,534,1.776,535,2.549,536,1.979,537,1.979,538,1.979,539,0.981,540,2.82,541,2.549,542,2.549,543,2.549,544,2.549,545,2.549,546,2.765,547,1.873,548,1.602,549,2.82,550,2.223,551,0.231,552,2.53,553,3.345,554,2.223,555,0.981,556,0.887,557,0.981,558,0.981,559,1.979,560,2.223,561,2.223,562,2.223,563,1.979,564,2.223,565,2.549,566,1.45,567,1.979,568,0.981]],["title/interfaces/HttpInterceptorRouteConfig.html",[547,1.127,551,0.139]],["body/interfaces/HttpInterceptorRouteConfig.html",[0,1.24,3,0.49,4,0.49,5,0.428,8,0.258,9,1.122,10,1.557,13,1.052,22,0.039,24,0.478,25,1.369,27,0.862,42,0.699,43,1.159,44,1.052,47,1.557,48,1.557,49,0.823,50,1.159,56,1.726,60,1.508,62,0.021,63,0.028,64,0.021,88,1.557,133,2.246,163,0.699,169,0.778,170,0.797,187,1.409,194,2.384,195,0.862,230,0.699,261,2.026,306,0.862,422,1.557,516,1.409,517,1.277,518,2.782,520,2.237,524,2.16,525,2.811,526,2.16,528,2.16,529,2.502,530,2.16,531,1.923,532,1.923,533,2.16,534,1.726,535,2.502,536,1.923,537,1.923,538,1.923,539,0.953,540,3.232,541,2.502,542,2.502,543,2.502,544,2.502,545,2.502,546,2.496,547,1.957,548,1.557,549,2.782,550,2.16,551,0.228,552,2.246,553,2.16,554,3.309,555,0.953,556,0.862,557,0.953,558,0.953,559,1.923,560,2.16,561,2.16,562,2.16,563,1.923,564,2.16,565,2.502,566,1.409,567,1.923,568,0.953]],["title/interfaces/RefreshStore.html",[551,0.139,699,1.023]],["body/interfaces/RefreshStore.html",[3,0.464,4,0.464,5,0.405,8,0.245,9,1.082,17,1.455,22,0.039,24,0.487,27,0.892,42,0.877,49,0.823,62,0.02,63,0.027,64,0.02,81,0.902,107,1.858,114,1.858,147,0.902,160,0.902,162,0.902,163,1.12,169,0.736,170,0.69,180,2.201,195,0.816,225,1.097,230,1.048,281,1.097,290,1.097,296,0.995,306,0.816,327,1.097,539,0.902,551,0.262,555,0.902,556,0.816,557,0.902,558,0.902,568,0.902,600,0.902,682,1.097,683,1.097,684,1.334,685,1.334,686,1.455,687,0.995,688,1.455,689,1.097,690,1.209,691,1.209,692,1.32,693,1.209,694,1.209,695,1.334,696,1.455,697,1.334,698,1.334,699,1.858,700,2.112,701,2.112,702,2.112,703,2.112,704,2.112,705,1.334,706,1.334,707,2.201,708,1.334,709,1.334,710,1.334,711,1.334,712,1.209,713,1.209,714,1.334,715,1.334,716,1.334,717,1.334,718,1.209,719,1.334,720,1.334,721,1.334,722,1.334,723,1.209,724,1.32,725,1.334,726,1.334,727,1.334,728,1.209,729,1.334]],["title/interfaces/TokenError.html",[551,0.139,696,1.023]],["body/interfaces/TokenError.html",[3,0.474,4,0.474,5,0.414,8,0.25,9,1.098,17,1.476,22,0.039,24,0.444,27,0.894,42,0.89,49,0.827,62,0.021,63,0.027,64,0.021,81,0.922,107,1.87,114,1.87,147,0.922,160,0.922,162,0.922,163,1.127,169,0.752,170,0.697,180,1.932,195,0.834,225,1.121,230,1.057,281,1.121,290,1.121,296,1.017,306,0.834,327,1.753,539,0.922,551,0.263,555,0.922,556,0.834,557,0.922,558,0.922,568,0.922,600,0.922,682,1.121,683,1.121,684,1.363,685,1.363,686,1.476,687,1.017,688,1.476,689,1.121,690,1.236,691,1.236,692,1.339,693,1.236,694,1.236,695,1.363,696,1.649,697,2.13,698,2.13,699,1.821,700,1.363,701,1.363,702,1.363,703,1.363,704,1.363,705,1.363,706,1.363,707,2.208,708,1.363,709,1.363,710,1.363,711,1.363,712,1.236,713,1.236,714,1.363,715,1.363,716,1.363,717,1.363,718,1.236,719,1.363,720,1.363,721,1.363,722,1.363,723,1.236,724,1.339,725,1.363,726,1.363,727,1.363,728,1.236,729,1.363]],["title/interfaces/Tokens.html",[551,0.139,692,0.928]],["body/interfaces/Tokens.html",[3,0.476,4,0.476,5,0.415,8,0.251,9,1.101,17,1.48,22,0.039,24,0.398,25,1.101,27,0.893,42,0.892,49,0.827,62,0.021,63,0.027,64,0.021,81,0.926,107,1.872,114,1.872,147,0.926,160,0.926,162,0.926,163,1.167,169,0.755,170,0.698,180,1.935,195,0.837,225,1.126,230,1.058,281,1.126,290,1.126,296,1.021,306,0.837,327,1.126,539,0.926,551,0.264,555,0.926,556,0.837,557,0.926,558,0.926,568,0.926,600,0.926,682,1.126,683,1.126,684,1.368,685,1.368,686,1.48,687,1.021,688,1.48,689,1.126,690,1.241,691,1.241,692,1.499,693,1.935,694,1.935,695,1.368,696,1.48,697,1.368,698,1.368,699,1.824,700,1.368,701,1.368,702,1.368,703,1.368,704,1.368,705,1.368,706,1.368,707,2.209,708,1.368,709,1.368,710,1.368,711,1.368,712,1.241,713,1.241,714,1.368,715,1.368,716,1.368,717,1.368,718,1.241,719,1.368,720,1.368,721,1.368,722,1.368,723,1.241,724,1.342,725,1.368,726,1.368,727,1.368,728,1.241,729,1.368]],["title/interfaces/User.html",[81,0.841,551,0.139]],["body/interfaces/User.html",[3,0.482,4,0.482,5,0.42,8,0.254,9,1.11,17,1.492,22,0.038,24,0.307,27,0.894,42,0.899,49,0.829,62,0.021,63,0.027,64,0.021,81,1.227,107,1.878,114,1.878,147,0.937,160,0.937,162,0.937,163,1.132,169,0.765,170,0.703,180,1.944,195,0.848,225,1.14,230,1.064,281,1.14,290,1.14,296,1.6,306,0.848,327,1.14,539,0.937,551,0.264,555,0.937,556,0.848,557,0.937,558,0.937,568,0.937,600,0.937,682,1.14,683,1.14,684,1.385,685,1.385,686,1.492,687,1.034,688,1.492,689,1.14,690,1.256,691,1.256,692,1.353,693,1.256,694,1.256,695,1.385,696,1.492,697,1.385,698,1.385,699,1.831,700,1.385,701,1.385,702,1.385,703,1.385,704,1.385,705,1.385,706,1.385,707,2.213,708,1.385,709,1.385,710,1.385,711,1.385,712,1.256,713,1.256,714,1.385,715,1.385,716,1.385,717,1.385,718,1.256,719,1.385,720,1.385,721,1.385,722,1.385,723,1.256,724,1.353,725,1.385,726,1.385,727,1.385,728,1.256,729,1.385]],["title/coverage.html",[966,3.418]],["body/coverage.html",[0,1.392,1,2.204,5,0.436,6,2.913,7,2.913,22,0.039,24,0.318,59,4.423,62,0.022,63,0.028,64,0.022,65,2.204,66,1.962,72,2.913,73,2.848,74,2.507,75,2.913,81,0.972,131,1.761,170,0.5,187,1.437,208,2.507,209,2.204,210,2.507,211,2.507,212,2.507,213,2.507,214,2.507,215,2.507,217,2.507,271,1.962,373,3.793,422,2.052,516,1.437,517,2.091,520,1.437,547,1.303,548,1.588,551,0.273,552,1.761,566,1.437,569,2.507,571,2.913,595,2.913,596,2.507,598,2.913,600,0.972,682,1.182,683,1.956,689,1.182,692,1.073,696,1.182,699,1.182,730,2.913,966,2.913,967,3.528,968,3.528,969,2.913,970,3.528,971,3.528,972,3.528,973,3.528,974,3.528,975,3.528,976,4.559,977,4.559,978,5.99,979,5.99,980,3.528,981,5.338,982,3.528,983,4.818,984,2.913,985,3.528,986,3.528,987,3.528,988,3.239,989,2.913,990,4.559,991,2.913,992,3.528,993,3.528]],["title/dependencies.html",[655,2.288,994,2.56]],["body/dependencies.html",[22,0.037,44,1.439,46,2.956,62,0.029,63,0.034,64,0.029,655,3.408,798,3.907,799,3.907,800,3.907,995,4.733,996,4.733,997,4.733,998,4.733,999,5.456]],["title/miscellaneous/enumerations.html",[1000,1.043,1001,3.024]],["body/miscellaneous/enumerations.html",[8,0.331,13,1.346,22,0.038,62,0.027,63,0.032,64,0.027,147,1.446,160,1.22,162,1.22,517,1.635,518,2.461,536,2.461,537,2.461,538,2.461,540,2.917,541,2.917,542,2.917,543,2.917,544,2.917,545,2.917,633,3.847,683,1.483,686,1.758,687,1.346,688,1.758,1000,1.803,1001,3.653,1002,2.765,1003,4.426]],["title/miscellaneous/functions.html",[1000,1.043,1004,2.603]],["body/miscellaneous/functions.html",[8,0.344,21,1.877,22,0.037,23,1.702,25,1.149,41,2.188,62,0.028,63,0.033,64,0.028,161,2.879,223,4.04,517,1.702,547,1.702,548,2.418,549,2.563,724,1.401,988,3.274,989,4.694,1000,1.877,1002,2.879,1004,3.274,1005,3.804,1006,4.609,1007,4.609,1008,4.609,1009,4.609]],["title/index.html",[8,0.191,1010,2.56,1011,2.56]],["body/index.html",[22,0.034,62,0.03,63,0.034,64,0.03,531,2.668,753,3.961,969,3.961,1004,3.409,1012,4.798,1013,4.798,1014,4.798,1015,4.798,1016,4.798,1017,4.798]],["title/modules.html",[654,2.942]],["body/modules.html",[22,0.034,62,0.03,63,0.034,64,0.03,189,3.992,495,3.992,653,3.021,654,3.436,1018,4.836,1019,4.836]],["title/overview.html",[1020,3.418]],["body/overview.html",[2,2.815,22,0.037,62,0.028,63,0.033,64,0.028,65,2.815,66,3.418,338,3.519,429,2.815,447,3.72,456,3.202,509,3.202,568,1.242,569,3.202,652,3.767,653,3.754,655,2.815,656,3.72,657,3.72,658,3.72,659,3.72,660,3.72,661,3.72,662,3.72,663,4.377,664,3.72,1020,3.72]],["title/miscellaneous/typealiases.html",[1000,1.043,1021,3.664]],["body/miscellaneous/typealiases.html",[8,0.358,22,0.036,24,0.432,27,0.678,62,0.029,63,0.034,64,0.029,517,1.769,546,2.741,547,1.769,1000,1.951,1002,2.991,1022,4.789]],["title/miscellaneous/variables.html",[1000,1.043,1023,3.024]],["body/miscellaneous/variables.html",[8,0.202,22,0.038,24,0.504,27,0.778,62,0.017,63,0.023,64,0.017,76,1.689,88,1.217,130,4.838,142,4.439,147,1.049,160,0.745,161,3.573,162,1.049,172,1.921,177,2.379,185,3.639,187,1.551,208,2.706,209,2.379,210,2.706,211,2.706,212,2.706,213,2.706,214,2.706,215,2.706,217,2.706,223,2.706,296,0.822,333,3.144,335,4.165,338,2.379,339,4.165,342,4.165,343,4.439,352,4.532,358,3.951,359,3.144,373,2.706,377,4.32,378,3.951,383,4.532,385,4.32,386,3.821,389,4.439,390,4.532,393,4.608,394,3.144,396,4.439,397,4.67,399,3.144,400,3.144,405,3.951,406,4.32,411,4.32,412,3.144,414,3.639,416,4.32,426,4.32,428,4.32,429,3.359,430,4.32,431,4.165,432,3.639,437,2.232,438,3.639,440,2.232,444,4.608,448,3.144,455,2.232,456,2.706,466,3.144,469,3.951,485,3.144,486,3.144,487,3.951,517,0.999,535,1.504,566,1.551,567,1.504,633,3.573,687,1.158,724,0.822,751,2.232,774,2.232,775,2.232,840,2.232,983,2.232,984,2.232,988,1.921,991,3.144,1000,1.101,1002,1.689,1005,2.232,1023,2.232,1024,5.491,1025,2.704,1026,3.809,1027,2.704,1028,3.809,1029,5.234,1030,2.704,1031,3.809,1032,2.704,1033,4.409,1034,3.809,1035,4.409,1036,2.704,1037,2.704,1038,2.704,1039,2.704,1040,2.704,1041,2.704,1042,3.809,1043,2.704,1044,2.704,1045,2.704,1046,2.704,1047,2.704,1048,2.704,1049,2.704,1050,2.704]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":59,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["0.05",{"_index":367,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.06",{"_index":484,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.1",{"_index":364,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.1.10",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":425,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.25rem",{"_index":476,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.375rem",{"_index":392,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.5em",{"_index":494,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.5rem",{"_index":387,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.75rem",{"_index":433,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0.875rem",{"_index":481,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0/1",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["0000",{"_index":371,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["0px",{"_index":454,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1",{"_index":338,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.25rem",{"_index":381,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1.5rem",{"_index":384,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1.75rem",{"_index":467,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1/1",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":373,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["100vw",{"_index":457,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["10px",{"_index":360,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["11",{"_index":447,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"overview.html":{}}}],["114",{"_index":345,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["12",{"_index":464,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["128",{"_index":346,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["130",{"_index":443,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["150",{"_index":430,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["150ms",{"_index":427,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["158",{"_index":446,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["15px",{"_index":361,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["16/16",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["163",{"_index":450,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["175",{"_index":451,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1px",{"_index":483,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["1rem",{"_index":408,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["2",{"_index":386,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":332,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["200",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20rem",{"_index":459,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["24",{"_index":350,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["244",{"_index":375,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["246",{"_index":376,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["25",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["26/26",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":366,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3",{"_index":456,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39",{"_index":351,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3px",{"_index":362,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["3rem",{"_index":465,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["4",{"_index":354,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["40",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":448,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["4px",{"_index":357,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["5",{"_index":378,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":343,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":383,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["600",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["65",{"_index":478,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["6px",{"_index":365,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["700",{"_index":470,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["800",{"_index":435,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["81",{"_index":479,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["9",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["900",{"_index":348,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["915",{"_index":252,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["935",{"_index":250,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["9999px",{"_index":436,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["_blank",{"_index":286,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["absolute",{"_index":453,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["abstract",{"_index":804,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstractnavigator",{"_index":1,"title":{"injectables/AbstractNavigator.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access",{"_index":73,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access_token",{"_index":752,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_expiration_date",{"_index":701,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["accessbutton",{"_index":77,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accesstoken",{"_index":694,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["account",{"_index":76,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accountaccessbuttoncomponent",{"_index":66,"title":{"components/AccountAccessButtonComponent.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["accountaccessdata",{"_index":284,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountbtnclass",{"_index":95,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountbtnstyle",{"_index":96,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountlabel",{"_index":97,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["accountpopup",{"_index":222,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["action",{"_index":762,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroute",{"_index":806,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroutesnapshot",{"_index":577,"title":{},"body":{"guards/AuthGuard.html":{}}}],["active",{"_index":148,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["actual",{"_index":1009,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual_component",{"_index":515,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["aliases",{"_index":1022,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":398,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["angular.config",{"_index":567,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["angular/common",{"_index":46,"title":{},"body":{"injectables/AbstractNavigator.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":608,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["angular/core",{"_index":44,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"dependencies.html":{}}}],["angular/router",{"_index":45,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["apirequeststosecure",{"_index":553,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["apiroutedefinition",{"_index":546,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/typealiases.html":{}}}],["apply",{"_index":151,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["args",{"_index":772,"title":{},"body":{"injectables/AuthService.html":{}}}],["arrount",{"_index":152,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["asterisk",{"_index":638,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["async",{"_index":896,"title":{},"body":{"injectables/AuthService.html":{}}}],["atoken",{"_index":616,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["audience",{"_index":556,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["audience.concat(stateurl",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":98,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["auth.client",{"_index":614,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.config",{"_index":610,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":672,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":207,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["authclientconfig",{"_index":516,"title":{"injectables/AuthClientConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfig",{"_index":520,"title":{"interfaces/AuthConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfigservice",{"_index":566,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentiation",{"_index":747,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticate",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":810,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":731,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationinprogress",{"_index":732,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":271,"title":{"guards/AuthGuard.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authhttpinterceptor",{"_index":596,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["authmodule",{"_index":653,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":689,"title":{"interfaces/Authorization.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authorization_id",{"_index":881,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponseerror",{"_index":682,"title":{"interfaces/AuthResponseError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authservice",{"_index":131,"title":{"injectables/AuthService.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":34,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["await",{"_index":829,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosrequestconfig",{"_index":942,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["back",{"_index":37,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["background",{"_index":340,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badge",{"_index":137,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badge_class",{"_index":208,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["badgeclass",{"_index":99,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["badgestyle",{"_index":100,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["base",{"_index":405,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":500,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bearer",{"_index":625,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["behave",{"_index":165,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["behaviorsubject",{"_index":801,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":811,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(null",{"_index":812,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(true",{"_index":814,"title":{},"body":{"injectables/AuthService.html":{}}}],["between",{"_index":482,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bezier(0.4",{"_index":424,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["bg",{"_index":335,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["block",{"_index":502,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["blue",{"_index":440,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["bold",{"_index":469,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":163,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["bootstrap",{"_index":657,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["border",{"_index":352,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":388,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["box",{"_index":368,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["branches",{"_index":1012,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1019,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":189,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules.html":{}}}],["btn",{"_index":490,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button",{"_index":121,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component",{"_index":673,"title":{},"body":{"modules/AuthModule.html":{}}}],["button.component.html",{"_index":93,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.scss",{"_index":91,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts",{"_index":75,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["button.component.ts:103",{"_index":198,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:107",{"_index":200,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:111",{"_index":139,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:117",{"_index":127,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:121",{"_index":178,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:125",{"_index":149,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:132",{"_index":197,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:136",{"_index":199,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:140",{"_index":135,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:146",{"_index":120,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:150",{"_index":176,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:154",{"_index":146,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:34",{"_index":132,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:40",{"_index":164,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:47",{"_index":157,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:51",{"_index":154,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:55",{"_index":201,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:61",{"_index":167,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:67",{"_index":192,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:71",{"_index":173,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:76",{"_index":140,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:80",{"_index":179,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:86",{"_index":129,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:91",{"_index":181,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button.component.ts:96",{"_index":190,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["button/account",{"_index":74,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["button[auth",{"_index":89,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["buttonlabel",{"_index":101,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(0.5rem",{"_index":403,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(1",{"_index":404,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["calc(1.5rem",{"_index":489,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["call",{"_index":764,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback",{"_index":763,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["callback(isauthenticated",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":268,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["canactivate(next",{"_index":576,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild",{"_index":572,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild(childroute",{"_index":583,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canattachtoken",{"_index":630,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canhandleauthentication",{"_index":848,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["canhandleauthentication(searchparams",{"_index":726,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canhandleinvitation",{"_index":924,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canhandleinvitation(searchparams",{"_index":727,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canload",{"_index":573,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canload(route",{"_index":586,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cannotdisplayuser",{"_index":293,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["canrefresh",{"_index":925,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canrefresh(refreshstore",{"_index":719,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["capitalize",{"_index":475,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["catch",{"_index":55,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["catch((err",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch((error",{"_index":831,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":397,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":329,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["checkauthentication",{"_index":825,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkconfig",{"_index":260,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["childclass",{"_index":102,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["children",{"_index":506,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["childroute",{"_index":585,"title":{},"body":{"guards/AuthGuard.html":{}}}],["childstyle",{"_index":103,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["choose",{"_index":158,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["chosen",{"_index":168,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["chosing",{"_index":125,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["class",{"_index":50,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["cleanroutestate",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanurltree(sourceurltree",{"_index":876,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id",{"_index":555,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["closeaccountpopup",{"_index":227,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["cluster_authmodule",{"_index":660,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_declarations",{"_index":662,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":661,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":691,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["color",{"_index":341,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["combinelatest",{"_index":802,"title":{},"body":{"injectables/AuthService.html":{}}}],["common",{"_index":537,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["commonmodule",{"_index":674,"title":{},"body":{"modules/AuthModule.html":{}}}],["component",{"_index":65,"title":{"components/AccountAccessButtonComponent.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"overview.html":{}}}],["component_template",{"_index":513,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["components",{"_index":67,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["compte",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":170,"title":{"interfaces/Config.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["config.default_locale",{"_index":780,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.default_redirect_uri",{"_index":781,"title":{},"body":{"injectables/AuthService.html":{}}}],["configfactory",{"_index":815,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":529,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["configured",{"_index":270,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["connexion",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console",{"_index":330,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["console.error('handling",{"_index":857,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(err.message",{"_index":289,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["console.error(error",{"_index":832,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(tokens",{"_index":859,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('can",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('tokens",{"_index":852,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(tokens",{"_index":853,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":261,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["constructor(@optional",{"_index":562,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor(auth",{"_index":574,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(config",{"_index":519,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["constructor(location",{"_index":16,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{}}}],["consumers",{"_index":525,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["content",{"_index":439,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["coverage",{"_index":966,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cryptr",{"_index":88,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["cryptr/cryptr",{"_index":798,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cryptr_base_url",{"_index":558,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cryptrangular",{"_index":1014,"title":{},"body":{"index.html":{}}}],["cryptrclient",{"_index":600,"title":{"interfaces/CryptrClient.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["cryptrclientfactory",{"_index":675,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientfactory.createclient",{"_index":680,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientservice",{"_index":613,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["cryptrspa",{"_index":797,"title":{},"body":{"injectables/AuthService.html":{}}}],["cryptrwidgetchild",{"_index":153,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["cubic",{"_index":423,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["current",{"_index":196,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["currentauthenticationobservable",{"_index":733,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationstate",{"_index":734,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentlocale",{"_index":239,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["currenttogglebtnclass",{"_index":324,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["currenturltree",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{}}}],["cursor",{"_index":485,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":782,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":283,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["declarations",{"_index":656,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["decoratedrequest",{"_index":926,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["decoratedrequest(axiosrequestconfig",{"_index":729,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["def",{"_index":549,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":161,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_locale",{"_index":169,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_redirect_uri",{"_index":195,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_scope",{"_index":209,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultauthenticationcallback(isauthenticated",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["defaultsigntext",{"_index":104,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["defaultsigntype",{"_index":105,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["define",{"_index":122,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["defines",{"_index":536,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":544,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":655,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":681,"title":{},"body":{"modules/AuthModule.html":{}}}],["description",{"_index":39,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}}}],["desired",{"_index":150,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["destroy",{"_index":760,"title":{},"body":{"injectables/AuthService.html":{}}}],["direction",{"_index":395,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["directive",{"_index":512,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["directives",{"_index":514,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["display",{"_index":143,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["div",{"_index":493,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["doc",{"_index":1017,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":967,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":70,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["domain",{"_index":145,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["duration",{"_index":426,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["dynamic",{"_index":78,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["déconnexion",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e",{"_index":233,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ease",{"_index":428,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["easily",{"_index":79,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["element",{"_index":511,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ellipsis",{"_index":473,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["email",{"_index":296,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["emailname",{"_index":301,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["emailname.split('.').join",{"_index":303,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["empty",{"_index":507,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["en",{"_index":172,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":765,"title":{},"body":{"injectables/AuthService.html":{}}}],["ends",{"_index":637,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["enum",{"_index":539,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["enumerations",{"_index":1001,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":288,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["error",{"_index":327,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["error(this.errormessage",{"_index":273,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["error_btn_class",{"_index":210,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_description",{"_index":698,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["errorbtnclass",{"_index":226,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["errormessage",{"_index":224,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["errors",{"_index":954,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["example",{"_index":85,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["exports",{"_index":659,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["extend",{"_index":441,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["extrabold",{"_index":434,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["failed",{"_index":858,"title":{},"body":{"injectables/AuthService.html":{}}}],["fallback",{"_index":171,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["falls",{"_index":36,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["false",{"_index":126,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["field",{"_index":684,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["fill",{"_index":418,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["filter",{"_index":807,"title":{},"body":{"injectables/AuthService.html":{}}}],["filter(([isloading",{"_index":920,"title":{},"body":{"injectables/AuthService.html":{}}}],["finally",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["finalreq",{"_index":618,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["finalscope",{"_index":927,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["finalscope(scope",{"_index":708,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["findmatchingroute",{"_index":649,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first",{"_index":611,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first((route",{"_index":651,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["flex",{"_index":393,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["focus:bg",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:border",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:outline",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:shadow",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":406,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["footer",{"_index":505,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["forroot",{"_index":667,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroot(config",{"_index":668,"title":{},"body":{"modules/AuthModule.html":{}}}],["fr",{"_index":840,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":884,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.config.httpinterceptor.apirequeststosecure).pipe",{"_index":650,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["from(this.cryptrclient.isauthenticated",{"_index":871,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.logout(this.prelogoutcallback(callback",{"_index":847,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signinwithredirect(scope",{"_index":843,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signupwithredirect(scope",{"_index":845,"title":{},"body":{"injectables/AuthService.html":{}}}],["full",{"_index":185,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["fullauthenticateprocess",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{}}}],["fullname",{"_index":300,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["function",{"_index":422,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["functions",{"_index":1004,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["gap",{"_index":452,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["getaccesstoken",{"_index":735,"title":{},"body":{"injectables/AuthService.html":{}}}],["getclaimsfromaccess",{"_index":928,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["getclaimsfromaccess(accesstoken",{"_index":725,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getclientuser",{"_index":864,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentaccesstoken",{"_index":705,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getcurrentidtoken",{"_index":706,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getidtoken",{"_index":736,"title":{},"body":{"injectables/AuthService.html":{}}}],["getobservableuser",{"_index":737,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshstore",{"_index":720,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gets",{"_index":524,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["getting",{"_index":1010,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":723,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gray",{"_index":342,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["grid",{"_index":372,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["guard",{"_index":569,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":570,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":437,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["h3",{"_index":504,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["handle",{"_index":80,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["handled",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["handleinvitationstate",{"_index":929,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handleinvitationstate(scope",{"_index":715,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlenewtokens",{"_index":930,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handlenewtokens(refreshstore",{"_index":717,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handleredirectcallback",{"_index":718,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlerefreshtokens",{"_index":721,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handletokens(tokens",{"_index":851,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokenserrors",{"_index":931,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handletokenserrors(errors",{"_index":716,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["has_ssr",{"_index":560,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["head",{"_index":545,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["header",{"_index":501,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["headers",{"_index":623,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["height",{"_index":410,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["height(px",{"_index":182,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["hidden",{"_index":461,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["hover:bg",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:shadow",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:text",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["html",{"_index":510,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["http",{"_index":538,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["http://localhsot:4201",{"_index":841,"title":{},"body":{"injectables/AuthService.html":{}}}],["http_response",{"_index":697,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["httpevent",{"_index":607,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httphandler",{"_index":604,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":559,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpinterceptorconfig",{"_index":552,"title":{"interfaces/HttpInterceptorConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["httpinterceptorrouteconfig",{"_index":547,"title":{"interfaces/HttpInterceptorRouteConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["httpinterceptorrouteconfig).uri",{"_index":550,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpmethod",{"_index":540,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["httprequest",{"_index":603,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["id",{"_index":690,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["id_token",{"_index":755,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":503,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ignore",{"_index":220,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["iif",{"_index":609,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["img",{"_index":491,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["implements",{"_index":83,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["import",{"_index":43,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["imports",{"_index":676,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["initials",{"_index":136,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inject",{"_index":534,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(authconfigservice",{"_index":563,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(cryptrclientservice",{"_index":615,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["injection",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":535,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('browser",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":18,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["injector.get(router",{"_index":54,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["inline",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input",{"_index":204,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inputs",{"_index":94,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["inscription",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inside",{"_index":123,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["instance",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instanceof",{"_index":238,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["intercept",{"_index":599,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["intercept(req",{"_index":602,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interceptor",{"_index":595,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":597,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interface",{"_index":551,"title":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":568,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invitation",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["invite",{"_index":686,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["invitewithoutredirect",{"_index":932,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithoutredirect(scope",{"_index":711,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["invitewithredirect",{"_index":933,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithredirect(scope",{"_index":714,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["isauthenticated",{"_index":290,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["ishttpinterceptorrouteconfig",{"_index":548,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(def",{"_index":1006,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(route",{"_index":644,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["isloading",{"_index":813,"title":{},"body":{"injectables/AuthService.html":{}}}],["isopened",{"_index":221,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["iswidget",{"_index":106,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["items",{"_index":396,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":309,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["js",{"_index":800,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["justify",{"_index":438,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["leading",{"_index":411,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["left",{"_index":380,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["legend",{"_index":509,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"overview.html":{}}}],["level",{"_index":499,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["lg",{"_index":359,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":409,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["lines",{"_index":1013,"title":{},"body":{"index.html":{}}}],["live",{"_index":753,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["locale",{"_index":107,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["localizedstring(key",{"_index":242,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["localizedstrings",{"_index":217,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localizedstrings[this.currentlocale()][key",{"_index":243,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["location",{"_index":17,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["location=yes,height=${this.popupheight},width=${this.popupwidth},scrollbars=yes,status=yes",{"_index":280,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["log",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_out_btn_class",{"_index":211,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logo",{"_index":174,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logosrc",{"_index":108,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logout",{"_index":177,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/variables.html":{}}}],["logout(callback",{"_index":728,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["logoutbtnclass",{"_index":109,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logoutbtnstyle",{"_index":110,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logoutlabel",{"_index":111,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["logouttext",{"_index":310,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["manage",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccount",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccounttext",{"_index":313,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["map",{"_index":808,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(([isloading",{"_index":921,"title":{},"body":{"injectables/AuthService.html":{}}}],["margin",{"_index":402,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["match",{"_index":266,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["matching",{"_index":63,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":458,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["mb",{"_index":415,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["md",{"_index":390,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["medium",{"_index":412,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":685,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["metadata",{"_index":86,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":1000,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ml",{"_index":471,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["module",{"_index":652,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":654,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":670,"title":{},"body":{"modules/AuthModule.html":{}}}],["mon",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":1015,"title":{},"body":{"index.html":{}}}],["mt",{"_index":455,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":40,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl",{"_index":14,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl(url",{"_index":26,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigates",{"_index":29,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigationend",{"_index":206,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["navigator",{"_index":805,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigator.ts",{"_index":7,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["navigator.ts:22",{"_index":28,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator.ts:9",{"_index":20,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["new",{"_index":187,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newparams",{"_index":882,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpath",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":581,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["next.handle(finalreq",{"_index":626,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["ngmodule",{"_index":671,"title":{},"body":{"modules/AuthModule.html":{}}}],["ngonchanges(_changes",{"_index":257,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ngondestroy",{"_index":822,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngunsubscribe",{"_index":809,"title":{},"body":{"injectables/AuthService.html":{}}}],["none",{"_index":142,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["not(:empty",{"_index":508,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["notes",{"_index":533,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["nowrap",{"_index":474,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["null",{"_index":225,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["number",{"_index":180,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["object",{"_index":724,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":582,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["observableauthenticated",{"_index":738,"title":{},"body":{"injectables/AuthService.html":{}}}],["offset",{"_index":370,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["onchanges",{"_index":84,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ondestroy",{"_index":796,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":33,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["ont",{"_index":468,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["opacity",{"_index":337,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["openid",{"_index":774,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["opens",{"_index":793,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/Tokens.html":{},"miscellaneous/functions.html":{}}}],["other_key",{"_index":561,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["otherwise",{"_index":35,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["out",{"_index":429,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules/AuthModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overflow",{"_index":460,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["overview",{"_index":1020,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":462,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["package",{"_index":994,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":379,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["page",{"_index":794,"title":{},"body":{"injectables/AuthService.html":{}}}],["pane",{"_index":496,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":543,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":202,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["path).tostring",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["peer",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["performs",{"_index":770,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":919,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":328,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["pointer",{"_index":486,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["popup",{"_index":183,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["popupheight",{"_index":112,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["popupparams",{"_index":279,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["popupwidth",{"_index":113,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["position",{"_index":334,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["post",{"_index":541,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["prelogoutcallback(callback",{"_index":846,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["process",{"_index":203,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["profile",{"_index":775,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["profile&quot",{"_index":785,"title":{},"body":{"injectables/AuthService.html":{}}}],["progress",{"_index":742,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":707,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["prompt",{"_index":159,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["properties",{"_index":9,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["property",{"_index":417,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["provide",{"_index":677,"title":{},"body":{"modules/AuthModule.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["provider",{"_index":1007,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":658,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["provides",{"_index":1008,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providing",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":542,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["px",{"_index":377,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["py",{"_index":385,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["queryparams",{"_index":879,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;en&quot",{"_index":787,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;fr&quot",{"_index":786,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;http://localhsot:4201&quot",{"_index":788,"title":{},"body":{"injectables/AuthService.html":{}}}],["radius",{"_index":391,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["read",{"_index":530,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["read:invoices",{"_index":839,"title":{},"body":{"injectables/AuthService.html":{}}}],["read:invoices&quot",{"_index":784,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["recurringrefreshtoken",{"_index":934,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["recurringrefreshtoken(refreshtokenwrapper",{"_index":722,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["red",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect",{"_index":193,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["redirection",{"_index":771,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirecturi",{"_index":114,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["redirecturipath",{"_index":264,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["reerror",{"_index":821,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":688,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["refresh_expiration_date",{"_index":702,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_leeway",{"_index":703,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_retry",{"_index":704,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_token",{"_index":700,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refreshstore",{"_index":699,"title":{"interfaces/RefreshStore.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":739,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenwrapper",{"_index":960,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["region",{"_index":557,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["related",{"_index":1016,"title":{},"body":{"index.html":{}}}],["relative",{"_index":333,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["req",{"_index":606,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.clone",{"_index":622,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.headers.set('authorization",{"_index":624,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request",{"_index":631,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.method",{"_index":646,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.url.startswith(value.substr(0",{"_index":643,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["requested",{"_index":777,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpath",{"_index":635,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["reset",{"_index":664,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["resetauthentication(isauthenticated",{"_index":835,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":62,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":64,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":744,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieving/opening",{"_index":795,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["reverse",{"_index":401,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(0",{"_index":363,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(107",{"_index":344,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(156",{"_index":449,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(17",{"_index":349,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(243",{"_index":374,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(245",{"_index":445,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(55",{"_index":477,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rgba(59",{"_index":442,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["rigerror",{"_index":818,"title":{},"body":{"injectables/AuthService.html":{}}}],["right",{"_index":382,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["ring",{"_index":369,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["root",{"_index":48,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["rounded",{"_index":389,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":587,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["route.httpmethod",{"_index":645,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["routecleanedpath",{"_index":887,"title":{},"body":{"injectables/AuthService.html":{}}}],["router",{"_index":12,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["routerconfig",{"_index":262,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["routerconfig.foreach",{"_index":267,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["routerstatesnapshot",{"_index":579,"title":{},"body":{"guards/AuthGuard.html":{}}}],["row",{"_index":394,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":592,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["rxjs/operators",{"_index":612,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":773,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["scopes",{"_index":776,"title":{},"body":{"injectables/AuthService.html":{}}}],["screen",{"_index":186,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["searchparams",{"_index":938,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["see",{"_index":531,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"index.html":{}}}],["segments",{"_index":588,"title":{},"body":{"guards/AuthGuard.html":{}}}],["selector",{"_index":87,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["separator",{"_index":779,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":133,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["session",{"_index":82,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["set",{"_index":518,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["set(config",{"_index":526,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["setdefaults",{"_index":244,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sets",{"_index":528,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["settimeout",{"_index":57,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["settings",{"_index":745,"title":{},"body":{"injectables/AuthService.html":{}}}],["setuser(newuser",{"_index":862,"title":{},"body":{"injectables/AuthService.html":{}}}],["shadow",{"_index":358,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["show",{"_index":141,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showaccessbuttononly",{"_index":319,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showsigninbutton",{"_index":316,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showsignupbutton",{"_index":317,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["showwidgetbtn",{"_index":318,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign",{"_index":147,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sign.in",{"_index":155,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign.up",{"_index":156,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sign_btn_class",{"_index":212,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signbtnclass",{"_index":115,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["signbtnstyle",{"_index":116,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["signin",{"_index":162,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signinwithoutredirect",{"_index":935,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signinwithoutredirect(scope",{"_index":709,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signinwithredirect",{"_index":320,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signinwithredirect(\"email",{"_index":838,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(&quot;email",{"_index":783,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(scope",{"_index":712,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signup",{"_index":687,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signupwithoutredirect",{"_index":936,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signupwithoutredirect(scope",{"_index":710,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signupwithredirect",{"_index":322,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signupwithredirect(\"email",{"_index":844,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(&quot;email",{"_index":790,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(scope",{"_index":713,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["simplechanges",{"_index":205,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["size",{"_index":407,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sm",{"_index":480,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sm:px",{"_index":497,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["sourceurltree",{"_index":886,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.fragment",{"_index":885,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.queryparams",{"_index":880,"title":{},"body":{"injectables/AuthService.html":{}}}],["spa",{"_index":799,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["space",{"_index":399,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["span",{"_index":492,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["specific",{"_index":761,"title":{},"body":{"injectables/AuthService.html":{}}}],["specified",{"_index":30,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["src/.../auth.config.ts",{"_index":1002,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../window.ts",{"_index":1005,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/abstract",{"_index":6,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["src/lib/account",{"_index":72,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{}}}],["src/lib/auth.config.ts",{"_index":517,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.config.ts:49",{"_index":521,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:61",{"_index":527,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:68",{"_index":523,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.guard.ts",{"_index":571,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/lib/auth.guard.ts:18",{"_index":575,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:21",{"_index":590,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:25",{"_index":580,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:32",{"_index":584,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.interceptor.ts",{"_index":598,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["src/lib/auth.interceptor.ts:23",{"_index":601,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:29",{"_index":605,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.module.ts",{"_index":665,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.module.ts:16",{"_index":669,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.service.ts",{"_index":730,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/lib/auth.service.ts:114",{"_index":769,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:143",{"_index":789,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:162",{"_index":759,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:205",{"_index":758,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:213",{"_index":749,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:221",{"_index":754,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:243",{"_index":792,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:251",{"_index":768,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:259",{"_index":743,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:267",{"_index":757,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:275",{"_index":740,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:283",{"_index":767,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:291",{"_index":756,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:300",{"_index":748,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:316",{"_index":746,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/utils/constants.ts",{"_index":983,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/enums.ts",{"_index":984,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/types.ts",{"_index":683,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/utils/types.ts:48",{"_index":945,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:49",{"_index":946,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:50",{"_index":957,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:51",{"_index":943,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:52",{"_index":961,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:53",{"_index":963,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:54",{"_index":955,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:55",{"_index":962,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:56",{"_index":964,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:57",{"_index":956,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:58",{"_index":949,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:59",{"_index":953,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:60",{"_index":950,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:61",{"_index":951,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:62",{"_index":940,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:63",{"_index":947,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:64",{"_index":952,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:65",{"_index":959,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:66",{"_index":948,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:67",{"_index":944,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:68",{"_index":937,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:69",{"_index":939,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:70",{"_index":965,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:71",{"_index":958,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:72",{"_index":941,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/window.ts",{"_index":988,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1011,"title":{"index.html":{}},"body":{}}],["startswith",{"_index":640,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["state",{"_index":578,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["statements",{"_index":969,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stateurl",{"_index":877,"title":{},"body":{"injectables/AuthService.html":{}}}],["stateurl.split('?')[0",{"_index":878,"title":{},"body":{"injectables/AuthService.html":{}}}],["static",{"_index":666,"title":{},"body":{"modules/AuthModule.html":{}}}],["still",{"_index":741,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":750,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":27,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stripqueryfrom(uri",{"_index":627,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["stroke",{"_index":419,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["style",{"_index":128,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["styles",{"_index":69,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["styleurls",{"_index":90,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["sub",{"_index":498,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["subject",{"_index":803,"title":{},"body":{"injectables/AuthService.html":{}}}],["sugnup",{"_index":791,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":1018,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":495,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"modules.html":{}}}],["t",{"_index":353,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["tab",{"_index":188,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["table",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["telemetry",{"_index":695,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["template",{"_index":68,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["templateurl",{"_index":92,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["tenant",{"_index":144,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["tenant_domain",{"_index":306,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["tenantkey",{"_index":305,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["testprimitive",{"_index":632,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route",{"_index":648,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route.uri",{"_index":647,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["text",{"_index":130,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["this.accountbtnclass",{"_index":254,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountlabel",{"_index":314,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountpopup",{"_index":229,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.accountpopup.close",{"_index":231,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.config().default_locale",{"_index":241,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.config()[tenantkey].split",{"_index":308,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.currentauthenticationstate",{"_index":291,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.fullauthenticateprocess(state.url",{"_index":594,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.getclientuser",{"_index":292,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.logout",{"_index":276,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.observableauthenticated",{"_index":593,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.signinwithredirect(default_scope",{"_index":321,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.signupwithredirect(default_scope",{"_index":323,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.auth.useraccountaccess().then(accountaccessdata",{"_index":282,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.authenticate",{"_index":830,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated",{"_index":918,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.asobservable",{"_index":875,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.next(newauthenticated",{"_index":874,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.value",{"_index":855,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.badgeclass",{"_index":255,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.buttonlabel",{"_index":307,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.canattachtoken(route",{"_index":621,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.canhandleauthentication",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cannotdisplayuser",{"_index":297,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.checkauthentication",{"_index":816,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkconfig",{"_index":258,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.cleanroutestate",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanurltree(currenturltree",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.closeaccountpopup",{"_index":234,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.config",{"_index":565,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.config.httpinterceptor.apirequeststosecure.foreach(route",{"_index":620,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.config.httpinterceptor?.apirequeststosecure",{"_index":619,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.configfactory.get().has_ssr",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient",{"_index":842,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleauthentication",{"_index":849,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleinvitation",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.config",{"_index":868,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentaccesstoken",{"_index":617,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentidtoken",{"_index":861,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getuser",{"_index":865,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handleredirectcallback",{"_index":850,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handlerefreshtokens",{"_index":867,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.isauthenticated",{"_index":860,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.useraccountaccess",{"_index":866,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultauthenticationcallback(isauthenticated",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultsigntext",{"_index":247,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.defaultsigntype",{"_index":246,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.email().split('@')[0",{"_index":302,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.errormessage",{"_index":269,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.fullname().match(/\\b(\\w)/g).join",{"_index":299,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.handleredirectcallback().then((tokens",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handletokens(tokens",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated",{"_index":294,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.isauthenticated().then((isauthenticated",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then(async",{"_index":826,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.asobservable",{"_index":870,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.next(false",{"_index":834,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isopened",{"_index":236,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.iswidget",{"_index":245,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.locale",{"_index":240,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring('logout",{"_index":312,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring('manageaccount",{"_index":315,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.localizedstring(this.defaultsigntype",{"_index":248,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.location.path",{"_index":888,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(this.routecleanedpath",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(url",{"_index":61,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.logout(null",{"_index":819,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logoutbtnclass",{"_index":256,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.logoutlabel",{"_index":311,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.ngunsubscribe$.complete",{"_index":824,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.next",{"_index":823,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.popupheight",{"_index":249,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.popupparams",{"_index":287,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.popupwidth",{"_index":251,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.redirecturi",{"_index":263,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.resetauthentication(false",{"_index":833,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(isauthenticated",{"_index":828,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router",{"_index":53,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{}}}],["this.router.createurltree([path",{"_index":883,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.events.subscribe((val",{"_index":235,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.router.navigatebyurl(url",{"_index":58,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.parseurl(path",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.set(config",{"_index":564,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.setdefaults",{"_index":259,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.setuser(null",{"_index":837,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setuser(this.getclientuser",{"_index":856,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signbtnclass",{"_index":253,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.signinwithredirect",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect(default_scope",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripqueryfrom(request.url",{"_index":636,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.togglebtnclass",{"_index":326,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.toggleopen",{"_index":275,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.unauthenticatedpath",{"_index":278,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.updatecurrentauthstate(false",{"_index":836,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(handled",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(isauthenticated",{"_index":827,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(valid",{"_index":854,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user",{"_index":295,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["this.user$.asobservable",{"_index":872,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.next(newuser",{"_index":863,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.value",{"_index":869,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user().email",{"_index":298,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["throw",{"_index":272,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["timing",{"_index":421,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["todo",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle",{"_index":138,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggle_cass_closed",{"_index":213,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggle_cass_opened",{"_index":214,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["togglebtnclass",{"_index":117,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["togglebtnstyle",{"_index":118,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggleclass",{"_index":325,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["toggleopen",{"_index":274,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["token",{"_index":751,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":696,"title":{"interfaces/TokenError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["tokenoptions",{"_index":554,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["tokens",{"_index":692,"title":{"interfaces/Tokens.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["top",{"_index":355,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["transform",{"_index":420,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["transition",{"_index":416,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["transparent",{"_index":487,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["tree",{"_index":71,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["true",{"_index":166,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["truncate",{"_index":472,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["try",{"_index":52,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["tslib",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["tw",{"_index":336,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1021,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":228,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["unauthenticatedpath",{"_index":119,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["undefined",{"_index":230,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["up",{"_index":160,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updatecurrentauthstate(newauthenticated",{"_index":873,"title":{},"body":{"injectables/AuthService.html":{}}}],["uppercase",{"_index":431,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["uri",{"_index":194,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["uri.indexof",{"_index":628,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["uri.substr(0",{"_index":629,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["url(this.redirecturi).pathname",{"_index":265,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["urlsegment",{"_index":589,"title":{},"body":{"guards/AuthGuard.html":{}}}],["urltree",{"_index":591,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["usage",{"_index":532,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["use",{"_index":134,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["used",{"_index":32,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["usefactory",{"_index":679,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":81,"title":{"interfaces/User.html":{}},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["user_account_btn_class",{"_index":215,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useraccountaccess",{"_index":281,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":678,"title":{},"body":{"modules/AuthModule.html":{}}}],["using",{"_index":639,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["utils/constants",{"_index":216,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["utils/enums",{"_index":218,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["utils/types",{"_index":219,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"injectables/AuthService.html":{}}}],["val",{"_index":237,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["valid",{"_index":693,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["value",{"_index":633,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.indexof",{"_index":641,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.length",{"_index":642,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.trim",{"_index":634,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["var",{"_index":347,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["variable",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1023,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":42,"title":{},"body":{"injectables/AbstractNavigator.html":{},"components/AccountAccessButtonComponent.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["w",{"_index":414,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["want",{"_index":175,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["warning",{"_index":184,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["weight",{"_index":413,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["white",{"_index":339,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["whitespace",{"_index":778,"title":{},"body":{"injectables/AuthService.html":{}}}],["widget",{"_index":124,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["widgetbuttontext",{"_index":304,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["width",{"_index":356,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["width(px",{"_index":191,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window",{"_index":223,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["window.addeventlistener('beforeunload",{"_index":232,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_expired",{"_index":820,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_invalid_grant",{"_index":817,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.history.replacestate",{"_index":38,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["window.location",{"_index":766,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.location.href",{"_index":277,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["window.open(url",{"_index":285,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["windowprovider",{"_index":989,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["windowservice",{"_index":991,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["wrap",{"_index":463,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["x",{"_index":400,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["xl",{"_index":466,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["xs",{"_index":432,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":488,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["yellow",{"_index":444,"title":{},"body":{"components/AccountAccessButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":522,"title":{},"body":{"injectables/AuthClientConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["z",{"_index":331,"title":{},"body":{"components/AccountAccessButtonComponent.html":{}}}],["zoom",{"_index":663,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractNavigator.html":{"url":"injectables/AbstractNavigator.html","title":"injectable - AbstractNavigator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AbstractNavigator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/abstract-navigator.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateByUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateByUrl\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateByUrl(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/abstract-navigator.ts:22\n                \n            \n\n\n            \n                \n                    Navigates to the specified url. The router will be used if one is available, otherwise it falls back\nto window.history.replaceState.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The url to navigate to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AccountAccessButtonComponent.html":{"url":"components/AccountAccessButtonComponent.html","title":"component - AccountAccessButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AccountAccessButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/lib/account-access-button/account-access-button.component.ts\n\n\n    \n        Description\n    \n    \n        Account AccessButton Component\nDynamic component to easily handle User session\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n    \n        Example\n    \n    \n                \n                    \n\n                \n    \n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                cryptr-account-access-button[auth]\n            \n\n            \n                styleUrls\n                ./account-access-button.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./account-access-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                accountBtnClass\n                            \n                            \n                                accountBtnStyle\n                            \n                            \n                                accountLabel\n                            \n                            \n                                auth\n                            \n                            \n                                badgeClass\n                            \n                            \n                                badgeStyle\n                            \n                            \n                                buttonLabel\n                            \n                            \n                                childClass\n                            \n                            \n                                childStyle\n                            \n                            \n                                defaultSignText\n                            \n                            \n                                defaultSignType\n                            \n                            \n                                isWidget\n                            \n                            \n                                locale\n                            \n                            \n                                logoSrc\n                            \n                            \n                                logOutBtnClass\n                            \n                            \n                                logOutBtnStyle\n                            \n                            \n                                logOutLabel\n                            \n                            \n                                popupHeight\n                            \n                            \n                                popupWidth\n                            \n                            \n                                redirectUri\n                            \n                            \n                                signBtnClass\n                            \n                            \n                                signBtnStyle\n                            \n                            \n                                toggleBtnClass\n                            \n                            \n                                toggleBtnStyle\n                            \n                            \n                                unauthenticatedPath\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        accountBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:146\n                            \n                        \n                \n                    \n                        Class for user account access button.\nIt will define either button inside widget or\naccount button when chosing widget false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        accountBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:117\n                            \n                        \n                \n                    \n                        Style for user account access button.\nIt will define either button inside widget or\naccount button when chosing widget false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        accountLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:86\n                            \n                        \n                \n                    \n                        Text for user account access button.\nIt will define either button inside widget or\naccount button when chosing widget false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        auth\n                    \n                \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:34\n                            \n                        \n                \n                    \n                        Cryptr Auth service to use for this component\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        badgeClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:140\n                            \n                        \n                \n                    \n                        Class for initials badge in widget toggle button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        badgeStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:111\n                            \n                        \n                \n                    \n                        Style for initials badge in widget toggle button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        buttonLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:76\n                            \n                        \n                \n                    \n                        Text to show in widget button.\nIf none it will display tenant domain string\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        childClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:154\n                            \n                        \n                \n                    \n                        Class for sign button when no active session\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        childStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:125\n                            \n                        \n                \n                    \n                        Desired style to apply arrount cryptrWidgetChild\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultSignText\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:51\n                            \n                        \n                \n                    \n                        Text to show inside sign button when no active session\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        defaultSignType\n                    \n                \n                \n                    \n                        Type :         Sign.In | Sign.Up\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:47\n                            \n                        \n                \n                    \n                        Choose if Component should prompt sign in or sign up when\nno active session\nDefault: Sign.In -> \"signin\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isWidget\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:40\n                            \n                        \n                \n                    \n                        Choose if component should behave like a widget.\nDefault: true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        locale\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:61\n                            \n                        \n                \n                    \n                        Chosen locale for this component.\nIf none, default_locale from config. Fallback: en\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        logoSrc\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:71\n                            \n                        \n                \n                    \n                        Source of logo you want in widget button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:150\n                            \n                        \n                \n                    \n                        Class for logout button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:121\n                            \n                        \n                \n                    \n                        Style for logout button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        logOutLabel\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:80\n                            \n                        \n                \n                    \n                        Text to show inside logout button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        popupHeight\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:91\n                            \n                        \n                \n                    \n                        Desired height(px) for user account popup.\nWarning: If user is in full screen it will be a new tab of browser\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        popupWidth\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:96\n                            \n                        \n                \n                    \n                        Desired width(px) for user account popup\nWarning: If user is in full screen it will be a new tab of browser\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        redirectUri\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:67\n                            \n                        \n                \n                    \n                        Chosen redirect URI for this component.\nIf none, default_redirect_uri from config. Fallback: current URI\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:132\n                            \n                        \n                \n                    \n                        Class for sign button when no active session\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        signBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:103\n                            \n                        \n                \n                    \n                        Style for sign button when no active session\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        toggleBtnClass\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:136\n                            \n                        \n                \n                    \n                        Class for widget toggle button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        toggleBtnStyle\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:107\n                            \n                        \n                \n                    \n                        Style for widget toggle button\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        unauthenticatedPath\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/account-access-button/account-access-button.component.ts:55\n                            \n                        \n                \n                    \n                        Path to redirect after logout process\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport {\n  BADGE_CLASS,\n  DEFAULT_SCOPE,\n  ERROR_BTN_CLASS,\n  LOG_OUT_BTN_CLASS,\n  SIGN_BTN_CLASS,\n  TOGGLE_CASS_CLOSED,\n  TOGGLE_CASS_OPENED,\n  USER_ACCOUNT_BTN_CLASS\n} from '../utils/constants';\nimport { LocalizedStrings } from '../utils/enums';\nimport { Sign, User } from '../utils/types';\n\n/**\n * Account AccessButton Component\n * Dynamic component to easily handle User session\n *\n * @example\n * \n * \n */\n@Component({\n  selector: 'cryptr-account-access-button[auth]',\n  templateUrl: './account-access-button.component.html',\n  styleUrls: ['./account-access-button.component.scss']\n})\nexport class AccountAccessButtonComponent implements OnChanges {\n  /**\n   * Cryptr Auth service to use for this component\n   */\n  @Input() auth: AuthService;\n  /**\n   * Choose if component should behave like a widget.\n   *\n   * **Default:** true\n   */\n  @Input() isWidget: boolean;\n  /**\n   * Choose if Component should prompt sign in or sign up when\n   * no active session\n   *\n   * **Default:** Sign.In -> `\"signin\"`\n   */\n  @Input() defaultSignType: Sign.In | Sign.Up;\n  /**\n   * Text to show inside sign button when no active session\n   */\n  @Input() defaultSignText: string;\n  /**\n   * Path to redirect after logout process\n   */\n  @Input() unauthenticatedPath: string;\n  /**\n   * Chosen locale for this component.\n   *\n   * If none, `default_locale` from config. **Fallback:** `en`\n   */\n  @Input() locale: string;\n  /**\n   * Chosen redirect URI for this component.\n   *\n   * If none, `default_redirect_uri` from config. **Fallback:** current URI\n   */\n  @Input() redirectUri: string;\n  /**\n   * Source of logo you want in widget button\n   */\n  @Input() logoSrc: string;\n  /**\n   * Text to show in widget button.\n   * If none it will display tenant domain string\n   */\n  @Input() buttonLabel: string;\n  /**\n   * Text to show inside logout button\n   */\n  @Input() logOutLabel: string;\n  /**\n   * Text for user account access button.\n   * It will define either button inside widget or\n   * account button when chosing widget `false`\n   */\n  @Input() accountLabel: string;\n  /**\n   * Desired height(px) for user account popup.\n   * **Warning:** If user is in full screen it will be a new tab of browser\n   */\n  @Input() popupHeight: number;\n  /**\n   * Desired width(px) for user account popup\n   * **Warning:** If user is in full screen it will be a new tab of browser\n   */\n  @Input() popupWidth: number;\n\n  // STYLE config\n\n  /**\n   * Style for sign button when no active session\n   */\n  @Input() signBtnStyle: any;\n  /**\n   * Style for widget toggle button\n   */\n  @Input() toggleBtnStyle: any;\n  /**\n   * Style for initials badge in widget toggle button\n   */\n  @Input() badgeStyle: any;\n  /**\n   * Style for user account access button.\n   * It will define either button inside widget or\n   * account button when chosing widget `false`\n   */\n  @Input() accountBtnStyle: any;\n  /**\n   * Style for logout button\n   */\n  @Input() logOutBtnStyle: any;\n  /**\n   * Desired style to apply arrount `cryptrWidgetChild`\n   */\n  @Input() childStyle: any;\n\n  // CLASS config\n\n  /**\n   * Class for sign button when no active session\n   */\n  @Input() signBtnClass: string;\n  /**\n   * Class for widget toggle button\n   */\n  @Input() toggleBtnClass: string;\n  /**\n   * Class for initials badge in widget toggle button\n   */\n  @Input() badgeClass: string;\n  /**\n   * Class for user account access button.\n   * It will define either button inside widget or\n   * account button when chosing widget `false`\n   */\n  @Input() accountBtnClass: string;\n  /**\n   * Class for logout button\n   */\n  @Input() logOutBtnClass: string;\n  /**\n   * Class for sign button when no active session\n   */\n  @Input() childClass: string;\n\n  /**\n   * @ignore\n   */\n  isOpened = false;\n  /**\n   * @ignore\n   */\n  accountPopup: Window;\n  /**\n   * @ignore\n   */\n  errorMessage: string = null;\n  /**\n   * @ignore\n   */\n  errorBtnClass = ERROR_BTN_CLASS;\n\n  /**\n   * @ignore\n   */\n  closeAccountPopup(): void {\n    if (typeof this.accountPopup !== 'undefined' && this.accountPopup !== null) {\n      this.accountPopup.close();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(private router: Router) {\n    window.addEventListener('beforeunload', (e) => {\n      this.closeAccountPopup();\n    });\n\n    this.router.events.subscribe((val) => {\n      if (this.isOpened && (val instanceof NavigationEnd)) {\n        this.isOpened = false;\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  currentLocale(): string {\n    try {\n      return this.locale || this.auth.config().default_locale || 'en';\n    } catch (e) {\n      return 'en';\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  localizedString(key: string): string {\n    return LocalizedStrings[this.currentLocale()][key];\n  }\n\n  /**\n   * @ignore\n   */\n  setDefaults(): void {\n    if (this.isWidget === undefined) {\n      this.isWidget = true;\n    }\n    if (this.defaultSignType === undefined) {\n      this.defaultSignType = Sign.In;\n    }\n    if (this.defaultSignText === undefined) {\n      this.defaultSignText = this.localizedString(this.defaultSignType);\n    }\n    this.popupHeight = this.popupHeight || 935;\n    this.popupWidth = this.popupWidth || 915;\n\n    this.signBtnClass = this.signBtnClass || SIGN_BTN_CLASS;\n    this.accountBtnClass = this.accountBtnClass || USER_ACCOUNT_BTN_CLASS;\n    this.badgeClass = this.badgeClass || BADGE_CLASS;\n    this.logOutBtnClass = this.logOutBtnClass || LOG_OUT_BTN_CLASS;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(_changes: SimpleChanges): void {\n    this.checkConfig();\n    this.setDefaults();\n  }\n\n  /**\n   * @ignore\n   */\n  checkConfig(): void {\n    // const { config: routerConfig } = this.router;\n    // if (this.redirectUri) {\n    //   const redirectUriPath = new URL(this.redirectUri).pathname;\n    //   let match = false;\n    //   routerConfig.forEach(({ path, canActivate }) => {\n    //     if (canActivate !== undefined && `/${path}` === redirectUriPath) {\n    //       match = true;\n    //     }\n    //   });\n    //   if (!match) {\n    //     this.errorMessage = `The path '${redirectUriPath}' MUST BE Configured in your router with 'canActivate: [AuthGuard]'`;\n    //     throw new Error(this.errorMessage);\n    //   }\n    // }\n  }\n\n  /**\n   * @ignore\n   */\n  toggleOpen(): void {\n    this.isOpened = !this.isOpened;\n  }\n\n  /**\n   * @ignore\n   */\n  logOut(): void {\n    this.toggleOpen();\n    this.auth.logOut(() => {\n      window.location.href = this.unauthenticatedPath || '/';\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  popupParams(): string {\n    return `location=yes,height=${this.popupHeight},width=${this.popupWidth},scrollbars=yes,status=yes`;\n  }\n\n  /**\n   * @ignore\n   */\n  userAccountAccess(): void {\n    this.toggleOpen();\n    this.auth.userAccountAccess().then(accountAccessData => {\n      try {\n        const { data: { data: { url } } } = accountAccessData;\n        this.accountPopup = window.open(url, '_blank', this.popupParams());\n      } catch (err) {\n        console.error(err.message);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  isAuthenticated(): boolean {\n    return this.auth.currentAuthenticationState();\n  }\n\n  /**\n   * @ignore\n   */\n  user(): User | undefined {\n    return this.auth.getClientUser();\n  }\n\n  /**\n   * @ignore\n   */\n  cannotDisplayUser(): boolean {\n    return !this.isAuthenticated() || typeof this.user() === 'undefined';\n  }\n\n  /**\n   * @ignore\n   */\n  email(): string | undefined {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    return this.user().email;\n  }\n\n  /**\n   * @ignore\n   */\n  initials(): any {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    return this.fullName().match(/\\b(\\w)/g).join('');\n  }\n\n  /**\n   * @ignore\n   */\n  fullName(): any {\n    if (this.cannotDisplayUser()) {\n      return;\n    }\n    const emailName = this.email().split('@')[0];\n    return emailName.split('.').join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  widgetButtonText(): string {\n    const tenantKey = 'tenant_domain';\n    return this.buttonLabel || this.auth.config()[tenantKey].split('-').join(' ');\n  }\n\n  /**\n   * @ignore\n   */\n  logOutText(): string {\n    return this.logOutLabel || this.localizedString('logOut');\n  }\n\n  /**\n   * @ignore\n   */\n  manageAccountText(): string {\n    return this.accountLabel || this.localizedString('manageAccount');\n  }\n\n  /**\n   * @ignore\n   */\n  showSigninButton(): boolean {\n    return !this.isAuthenticated() && this.defaultSignType === Sign.In;\n  }\n\n  /**\n   * @ignore\n   */\n  showSignupButton(): boolean {\n    return !this.isAuthenticated() && this.defaultSignType === Sign.Up;\n  }\n\n  /**\n   * @ignore\n   */\n  showWidgetBtn(): boolean {\n    return this.isWidget && this.isAuthenticated();\n  }\n\n  /**\n   * @ignore\n   */\n  showAccessButtonOnly(): boolean {\n    return this.isAuthenticated() && !this.isWidget;\n  }\n\n  /**\n   * @ignore\n   */\n  signInWithRedirect(): void {\n    this.auth.signInWithRedirect(DEFAULT_SCOPE, this.locale, this.redirectUri);\n  }\n\n  /**\n   * @ignore\n   */\n  signUpWithRedirect(): void {\n    this.auth.signUpWithRedirect(DEFAULT_SCOPE, this.locale, this.redirectUri);\n  }\n\n  /**\n   * @ignore\n   */\n  currentToggleBtnClass(): string {\n    let toggleClass = TOGGLE_CASS_CLOSED;\n    if (this.toggleBtnClass !== undefined) {\n      toggleClass = this.toggleBtnClass;\n    } else if (this.isOpened) {\n      toggleClass = TOGGLE_CASS_OPENED;\n    }\n    return toggleClass;\n  }\n}\n\n    \n\n    \n        \n  \n  \n    Error please check your console\n  \n  \n  \n    {{ defaultSignText }}\n  \n\n  \n    {{ defaultSignText }}\n  \n\n  \n  \n    \n      \n      \n        {{ widgetButtonText() }}\n      \n      \n        {{ initials() }}\n      \n      \n        \n      \n    \n    \n      \n        \n          \n            \n            \n              \n                \n                  {{ initials() }}\n                \n              \n              \n                \n                  \n                    {{ fullName() }}\n                  \n                  \n                    {{ email() }}\n                  \n                \n                \n                  \n                    {{ manageAccountText() }}\n                  \n                \n              \n            \n            \n              \n            \n            \n              \n                \n                  \n                    {{ logOutText() }}\n                  \n                \n              \n            \n          \n        \n      \n    \n  \n\n  \n    \n      {{ accountLabel }}\n    \n  \n\n\n    \n\n    \n                \n                    ./account-access-button.component.scss\n                \n                .z-20 {\n  z-index: 20;\n}\n\n.relative {\n  position: relative;\n}\n\n.bg {\n  --tw-bg-opacity: 1;\n}\n\n.bg-white {\n  background-color: white;\n}\n\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgba(107, 114, 128, var(--tw-text-opacity));\n}\n\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgba(17, 24, 39, var(--tw-text-opacity));\n}\n\n.border-t-4 {\n  border-top-width: 4px;\n}\n\n.border-white {\n  border-color: white;\n}\n\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\n    0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.grid {\n  display: grid;\n}\n\n.border-gray-100 {\n  --tw-border-opacity: 1;\n  border-color: rgba(243, 244, 246, var(--tw-border-opacity));\n}\n\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\n\n.px-6 {\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-row {\n  flex-direction: row;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.space-x-2 {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(0.5rem * var(--tw-space-x-reverse));\n  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));\n}\n\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n.leading-6 {\n  line-height: 1.5rem;\n}\n\n.font-medium {\n  font-weight: 500;\n}\n\n.w-6 {\n  width: 1.5rem;\n}\n\n.mb-0 {\n  margin-bottom: 0;\n}\n\n.transition {\n  transition-property: background-color, border-color, color, fill, stroke,\n    opacity, box-shadow, transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.ease-in-out {\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.duration-150 {\n  transition-duration: 150ms;\n}\n\n.uppercase {\n  text-transform: uppercase;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-extrabold {\n  font-weight: 800;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.h-6 {\n  height: 1.5rem;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.bg-blue-500 {\n  @extend .bg;\n  background-color: rgba(59, 130, 246, var(--tw-bg-opacity));\n}\n\n.bg-gray-100 {\n  @extend .bg;\n  background-color: rgba(243, 244, 246, var(--tw-bg-opacity));\n}\n\n.text-white {\n  color: white;\n}\n\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgba(245, 158, 11, var(--tw-text-opacity));\n}\n\n.text-gray-400 {\n  --tw-text-opacity: 1;\n  color: rgba(156, 163, 175, var(--tw-text-opacity));\n}\n\n.gap-6 {\n  gap: 1.5rem;\n}\n\n.h-5 {\n  height: 1.25rem;\n}\n\n.w-5 {\n  width: 1.25rem;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.right-0 {\n  right: 0px;\n}\n\n.mt-3 {\n  margin-top: 0.75rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.w-screen {\n  width: 100vw;\n}\n\n.max-w-xs {\n  max-width: 20rem;\n}\n\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.p-6 {\n  padding: 1.5rem;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.h-12 {\n  height: 3rem;\n}\n\n.w-12 {\n  width: 3rem;\n}\n\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n\n.ont-bold {\n  font-weight: 700;\n}\n\n.ml-6 {\n  margin-left: 1.5rem;\n}\n\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.capitalize {\n  text-transform: capitalize;\n}\n\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\n\n.leading-5 {\n  line-height: 1.25rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.mt-1 {\n  margin-top: 0.25rem;\n}\n\n.text-gray-700 {\n  --tw-text-opacity: 1;\n  color: rgba(55, 65, 81, var(--tw-text-opacity));\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),\n    var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-transparent {\n  border-color: transparent;\n}\n\n.bg-yellow-500 {\n  @extend .bg;\n  background-color: rgba(245, 158, 11, var(--tw-bg-opacity));\n}\n\n.space-y-6 {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(1.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(1.5rem * var(--tw-space-y-reverse));\n}\n\n#cryptr-account-access-btn {\n  @extend .z-20;\n  @extend .relative;\n\n  .btn-style-1 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  .btn-style-2 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  .btn-style-3 {\n    @extend .bg-white;\n    @extend .shadow-lg;\n    @extend .px-6;\n    @extend .py-2;\n    @extend .rounded-md;\n    @extend .text-gray-500;\n    @extend .flex;\n    @extend .flex-row;\n    @extend .items-center;\n    @extend .space-x-2;\n    @extend .text-base;\n    @extend .leading-6;\n    @extend .font-medium;\n    @extend .transition;\n    @extend .ease-in-out;\n    @extend .duration-150;\n  }\n\n  #cryptr-toggle-btn {\n    img {\n      @extend .w-6;\n      @extend .mb-0;\n    }\n\n    span {\n      @extend .text-gray-900;\n      @extend .uppercase;\n      @extend .text-xs;\n\n      margin-right: 0.5rem;\n    }\n\n    // div {\n    //   @extend .uppercase;\n    //   @extend .rounded-full;\n    //   @extend .h-6;\n    //   @extend .w-6;\n    //   @extend .flex;\n    //   @extend .items-center;\n    //   @extend .justify-center;\n    //   @extend .bg-blue-500;\n    //   @extend .text-xs;\n    //   @extend .text-white;\n\n    //   margin-left: 0.5em;\n    // }\n\n    svg {\n      @extend .text-gray-400;\n      @extend .h-5;\n      @extend .w-5;\n      @extend .transition;\n      @extend .ease-in-out;\n      @extend .duration-150;\n    }\n  }\n\n  .widget-pane {\n    @extend .absolute;\n    @extend .right-0;\n    @extend .mt-3;\n    @extend .px-2;\n    @extend .w-screen;\n    @extend .max-w-xs;\n    // @extend .sm:px-0;\n  }\n\n  .sub-level-1 {\n    @extend .rounded-lg;\n    @extend .shadow-lg;\n  }\n\n  .sub-level-2 {\n    @extend .rounded-lg;\n    @extend .overflow-hidden;\n  }\n\n  .sub-level-3 {\n    @extend .rounded-lg;\n    @extend .overflow-hidden;\n  }\n\n  .sub-level-3 {\n    @extend .relative;\n    @extend .bg-white;\n  }\n\n  .basic-header {\n    @extend .p-6;\n    @extend .flex;\n    @extend .flex-wrap;\n    @extend .w-full;\n  }\n\n  .initials-badge {\n    @extend .flex;\n    @extend .items-center;\n\n    .initials {\n      // @extend .uppercase;\n      // @extend .rounded-full;\n      @extend .h-12;\n      @extend .w-12;\n      // @extend .flex;\n      // @extend .items-center;\n      // @extend .justify-center;\n      // @extend .bg-blue-500;\n      @extend .text-xl;\n      @extend .font-bold;\n      // @extend .text-white;\n    }\n  }\n\n  .user-block {\n    @extend .ml-6;\n\n    .user-identity {\n      h3 {\n        @extend .capitalize;\n        @extend .text-gray-900;\n        @extend .text-base;\n        @extend .leading-5;\n        @extend .font-bold;\n        @extend .mb-0;\n      }\n\n      p {\n        @extend .mt-1;\n        @extend .text-gray-700;\n        @extend .font-medium;\n        @extend .text-sm;\n        @extend .leading-5;\n      }\n    }\n\n    .user-account-block {\n      @extend .flex;\n      @extend .flex-wrap;\n      @extend .w-full;\n      @extend .justify-between;\n    }\n  }\n\n  .logout-footer {\n    @extend .border-t-4;\n    @extend .border-white;\n    @extend .p-6;\n    @extend .bg-gray-100;\n  }\n\n  .children {\n    &:empty {\n      display: none;\n    }\n\n    &:not(:empty) {\n      @extend .z-20;\n      @extend .border-t-4;\n      @extend .border-gray-100;\n      @extend .relative;\n      @extend .grid;\n      @extend .gap-6;\n      @extend .bg-white;\n      @extend .p-6;\n      @extend .transition;\n      @extend .ease-in-out;\n      @extend .duration-150;\n      @extend .text-gray-900;\n    }\n  }\n\n  .btn-block {\n    @extend .rounded-md;\n    @extend .shadow;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Error please check your console          {{ defaultSignText }}        {{ defaultSignText }}                              {{ widgetButtonText() }}                    {{ initials() }}                                                                                                                                  {{ initials() }}                                                                                                  {{ fullName() }}                                                        {{ email() }}                                                                                        {{ manageAccountText() }}                                                                                                                                                                                  {{ logOutText() }}                                                                                                      {{ accountLabel }}      '\n    var COMPONENTS = [{'name': 'AccountAccessButtonComponent', 'selector': 'cryptr-account-access-button[auth]'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AccountAccessButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthClientConfig.html":{"url":"injectables/AuthClientConfig.html","title":"injectable - AuthClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:68\n                \n            \n\n\n            \n                \n                    Gets the config that has been set by other consumers of the service\n\n\n                    \n                        Returns :         AuthConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(config: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:61\n                \n            \n\n\n            \n                \n                    Sets configuration to be read by other consumers of the service (see usage notes)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The configuration to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        has_ssr\n                                \n                                \n                                        httpInterceptor\n                                \n                                \n                                            Optional\n                                        other_key\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        has_ssr\n                                    \n                                \n                                \n                                    \n                                        has_ssr:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpInterceptor\n                                    \n                                \n                                \n                                    \n                                        httpInterceptor:         HttpInterceptorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpInterceptorConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        other_key\n                                    \n                                \n                                \n                                    \n                                        other_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable {\n    return this.auth.observableAuthenticated();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthHttpInterceptor.html":{"url":"interceptors/AuthHttpInterceptor.html","title":"interceptor - AuthHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AuthConfig, cryptrClient: any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.interceptor.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { first } from 'rxjs/operators';\nimport { CryptrClientService } from './auth.client';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(CryptrClientService) private cryptrClient: any\n  ) { }\n\n  intercept(\n    req: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const aToken = this.cryptrClient.getCurrentAccessToken();\n    let finalReq = req;\n\n    if (this.config.httpInterceptor?.apiRequestsToSecure !== undefined && aToken !== undefined) {\n      this.config.httpInterceptor.apiRequestsToSecure.forEach(route => {\n        if (this.canAttachToken(route, req)) {\n\n          finalReq = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${aToken}`),\n          });\n        }\n      });\n    }\n    return next.handle(finalReq);\n  }\n\n  /**\n   * @ignore\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * @ignore\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * @ignore\n   */\n  private findMatchingRoute(\n    request: HttpRequest\n  ): Observable {\n    return from(this.config.httpInterceptor.apiRequestsToSecure).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.module.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService, AuthClientConfig } from './auth.config';\nimport { AuthGuard } from './auth.guard';\nimport { AccountAccessButtonComponent } from './account-access-button/account-access-button.component';\nimport { CommonModule } from '@angular/common';\nimport { CryptrClientFactory, CryptrClientService } from './auth.client';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AccountAccessButtonComponent],\n  exports: [AccountAccessButtonComponent],\n  bootstrap: [AccountAccessButtonComponent]\n})\nexport class AuthModule {\n  static forRoot(config?: AuthConfig): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        {\n          provide: AuthConfigService,\n          useValue: config,\n        },\n        {\n          provide: CryptrClientService,\n          useFactory: CryptrClientFactory.createClient,\n          deps: [AuthClientConfig],\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponseError.html":{"url":"interfaces/AuthResponseError.html","title":"interface - AuthResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                AuthService - Cryptr Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticationInProgress\n                            \n                            \n                                config\n                            \n                            \n                                currentAuthenticationObservable\n                            \n                            \n                                currentAuthenticationState\n                            \n                            \n                                getAccessToken\n                            \n                            \n                                getIdToken\n                            \n                            \n                                getObservableUser\n                            \n                            \n                                getUser\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                logOut\n                            \n                            \n                                observableAuthenticated\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signInWithRedirect\n                            \n                            \n                                signUpWithRedirect\n                            \n                            \n                                userAccountAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authenticationInProgress\n                        \n                        \n                    \n                \n            \n            \n                \nauthenticationInProgress()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:275\n                \n            \n\n\n            \n                \n                    Check if authentication check still in progress\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication progress state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:259\n                \n            \n\n\n            \n                \n                    Retrieve Cryptr current configuration\n\n\n                    \n                    \n                    \n                        Returns :         Config\n\n                    \n                    \n                        Current Cryptr configuration settings\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationObservable\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationObservable()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:316\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state as Observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        boolean observable of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationState\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationState()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:300\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:213\n                \n            \n\n\n            \n                \n                    Retrieve current stored access token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session access_token or undefined if no live session\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:221\n                \n            \n\n\n            \n                \n                    retrieve current stored id token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session id_token or undefined if no live session.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObservableUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetObservableUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:291\n                \n            \n\n\n            \n                \n                    Retrieve current user as observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Current user as Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:267\n                \n            \n\n\n            \n                \n                    Retrieve current user\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        User object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:205\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        authentication state in a Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: () => void, location: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:162\n                \n            \n\n\n            \n                \n                    Destroy current session with specific action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nAction to call at the end of logout process\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        window.location\n                                    \n\n                                    \n                                        \nDefault: window.location. Where to redirect after logout process\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        process logout of session with callback call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            observableAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nobservableAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:283\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:251\n                \n            \n\n\n            \n                \n                    Refresh current tokens.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:114\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signin process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign in process (whitespace separator)\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign in process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign in process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignInWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignInWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this signin redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:143\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signup process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign up process (whitespace separator).\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign up process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign up process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignUpWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignUpWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this sugnup redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:243\n                \n            \n\n\n            \n                \n                    Opens user account page.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise of retrieving/opening page\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\nimport { BehaviorSubject, combineLatest, from, Observable, Subject } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\nimport { Config, CryptrClient, Tokens } from './utils/types';\nimport { ActivatedRoute, Router, UrlTree } from '@angular/router';\nimport { CryptrClientService } from './auth.client';\nimport { filter, map } from 'rxjs/operators';\nimport { DEFAULT_SCOPE } from './utils/constants';\nimport { AuthClientConfig } from './auth.config';\n\n/**\n * AuthService - Cryptr Authentication Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnDestroy {\n  /**\n   * @ignore\n   */\n  private ngUnsubscribe$ = new Subject();\n  /**\n   * @ignore\n   */\n  private authenticated$ = new BehaviorSubject(false);\n  /**\n   * @ignore\n   */\n  private user$ = new BehaviorSubject(null);\n  /**\n   * @ignore\n   */\n  private isLoading$ = new BehaviorSubject(true);\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Inject(CryptrClientService) private cryptrClient: CryptrClient,\n    private location: Location,\n    private navigator: AbstractNavigator,\n    private router: Router,\n    private route: ActivatedRoute,\n    private configFactory: AuthClientConfig,\n  ) {\n    this.checkAuthentication();\n    window.addEventListener(CryptrSpa.events.REFRESH_INVALID_GRANT, (RigError) => {\n      this.logOut(null);\n    });\n    window.addEventListener(CryptrSpa.events.REFRESH_EXPIRED, (ReError) => {\n      this.logOut(null);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  private checkAuthentication(): void {\n    this.isAuthenticated().then(async (isAuthenticated: boolean) => {\n      this.updateCurrentAuthState(isAuthenticated);\n      this.resetAuthentication(isAuthenticated);\n      await this.authenticate();\n    }).catch((error) => {\n      console.error(error);\n      this.resetAuthentication(false);\n      this.isLoading$.next(false);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private resetAuthentication(isAuthenticated: boolean): void {\n    if (isAuthenticated) {\n      return;\n    }\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n  }\n\n  /**\n   * Performs redirection to Cryptr for signin process with chosen args\n   * @example\n   * Default usage\n   * signInWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signInWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign in process (whitespace separator)\n   * @param locale - Default: `config.default_locale` value. locale for this sign in process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign in process.\n   * @returns Observable of this signin redirection\n   */\n  signInWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    if (this.cryptrClient) {\n      return from(this.cryptrClient.signInWithRedirect(scope, redirectUri, locale));\n    }\n  }\n\n  /**\n   * Performs redirection to Cryptr for signup process with chosen args\n   * @example\n   * Default usage\n   * signUpWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signUpWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign up process (whitespace separator).\n   * @param locale - Default: `config.default_locale` value. locale for this sign up process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign up process.\n   * @returns Observable of this sugnup redirection\n   */\n  signUpWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    return from(this.cryptrClient.signUpWithRedirect(scope, redirectUri, locale));\n  }\n\n  /**\n   * @ignore\n   */\n  private preLogOutCallBack(callback: () => void): () => void {\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n    return callback;\n  }\n\n  /**\n   * Destroy current session with specific action\n   * @param callback - Action to call at the end of logout process\n   * @param location - **Default:** `window.location`. Where to redirect after logout process\n   * @returns process logout of session with callback call\n   */\n  logOut(callback: () => void, location: any = window.location): Observable {\n    return from(this.cryptrClient.logOut(this.preLogOutCallBack(callback), location));\n  }\n\n  /**\n   * @ignore\n   */\n  canHandleAuthentication(): boolean {\n    return this.cryptrClient.canHandleAuthentication();\n  }\n\n  /**\n   * @ignore\n   */\n  handleRedirectCallback(): Promise {\n    try {\n      return this.cryptrClient.handleRedirectCallback();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  handleTokens(tokens: Tokens): boolean {\n    // console.log('tokens');\n    // console.log(tokens);\n    const { valid, accessToken } = tokens;\n    this.updateCurrentAuthState(valid && accessToken !== undefined);\n    if (this.authenticated$.value) {\n      this.setUser(this.getClientUser());\n    } else {\n      console.error('handling tokens failed');\n      console.error(tokens);\n    }\n    return this.authenticated$.value;\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns authentication state in a Promise\n   */\n  isAuthenticated(): Promise {\n    return this.cryptrClient.isAuthenticated();\n  }\n\n  /**\n   * Retrieve current stored access token\n   * @returns Current session access_token or undefined if no live session\n   */\n  getAccessToken(): string | undefined {\n    return this.cryptrClient.getCurrentAccessToken();\n  }\n\n  /**\n   * retrieve current stored id token\n   * @returns Current session id_token or undefined if no live session.\n   */\n  getIdToken(): string | undefined {\n    return this.cryptrClient.getCurrentIdToken();\n  }\n\n  /**\n   * @ignore\n   */\n  private setUser(newUser: any): void {\n    this.user$.next(newUser);\n  }\n\n  /**\n   * @ignore\n   */\n  getClientUser(): any {\n    return this.cryptrClient.getUser();\n  }\n\n  /**\n   * Opens user account page.\n   * @returns Promise of retrieving/opening page\n   */\n  userAccountAccess(): Promise {\n    return this.cryptrClient.userAccountAccess();\n  }\n\n  /**\n   * Refresh current tokens.\n   * @returns void\n   */\n  refreshTokens(): void {\n    this.cryptrClient.handleRefreshTokens();\n  }\n\n  /**\n   * Retrieve Cryptr current configuration\n   * @returns Current Cryptr configuration settings\n   */\n  config(): Config {\n    return this.cryptrClient.config;\n  }\n\n  /**\n   * Retrieve current user\n   * @returns User object\n   */\n  getUser(): any {\n    return this.user$.value;\n  }\n\n  /**\n   * Check if authentication check still in progress\n   * @returns Boolean observable of authentication progress state\n   */\n  authenticationInProgress(): Observable {\n    return this.isLoading$.asObservable();\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns Boolean observable of authentication state\n   */\n  observableAuthenticated(): Observable {\n    return from(this.cryptrClient.isAuthenticated());\n  }\n\n  /**\n   * Retrieve current user as observable\n   * @returns Current user as Observable\n   */\n  getObservableUser(): Observable {\n    return this.user$.asObservable();\n  }\n\n\n  /**\n   * Retrieve current authentication state.\n   * @returns boolean of authentiation state\n   */\n  currentAuthenticationState(): boolean {\n    return this.authenticated$.value;\n  }\n\n  /**\n   * @ignore\n   */\n  private updateCurrentAuthState(newAuthenticated: boolean): void {\n    this.authenticated$.next(newAuthenticated);\n    this.setUser(this.getClientUser());\n  }\n\n  /**\n   * Retrieve current authentication state as Observable\n   * @returns boolean observable of authentiation state\n   */\n  currentAuthenticationObservable(): Observable {\n    return this.authenticated$.asObservable();\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanUrlTree(sourceUrlTree: UrlTree, stateUrl?: string): UrlTree {\n    try {\n      const path = !!stateUrl ? stateUrl.split('?')[0] : '';\n      const queryParams = sourceUrlTree.queryParams;\n      const { authorization_id, code, state, ...newParams } = queryParams;\n      return this.router.createUrlTree([path], { queryParams: newParams, fragment: sourceUrlTree.fragment });\n    } catch (error) {\n      return sourceUrlTree;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private routeCleanedPath(): string {\n    const path = this.location.path();\n    const currentUrlTree = this.router.parseUrl(path);\n    const newPath = this.cleanUrlTree(currentUrlTree, path).toString();\n    return !!newPath ? newPath : '/';\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanRouteState(): void {\n    setTimeout(() => {\n      this.location.replaceState(this.routeCleanedPath(), '');\n    }, 2);\n  }\n\n  /**\n   * @ignore\n   */\n  private async authenticate(): Promise {\n    if (this.authenticated$.value) {\n      this.isLoading$.next(false);\n      return;\n    }\n    this.resetAuthentication(false);\n    if (this.canHandleAuthentication()) {\n      return this.handleRedirectCallback().then((tokens) => {\n        const handled = this.handleTokens(tokens);\n        this.updateCurrentAuthState(handled);\n        if (handled) {\n          this.cleanRouteState();\n          this.isLoading$.next(false);\n        } else {\n          this.isLoading$.next(false);\n        }\n        return handled;\n      }).catch((error) => {\n        return false;\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n      // TODO: handle invitation process\n      // } else if (this.cryptrClient.canHandleInvitation()) {\n      //   console.log('can handle invite')\n    } else {\n      await this.cryptrClient.handleRefreshTokens();\n      this.isAuthenticated().then((isAuthenticated) => {\n        this.updateCurrentAuthState(isAuthenticated);\n      }).catch((err) => {\n        this.updateCurrentAuthState(false);\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private defaultAuthenticationCallback(isAuthenticated: boolean, stateUrl?: string): boolean {\n    const { audience, default_locale } = this.config();\n    const redirectUri = audience.concat(stateUrl || '');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      if (this.configFactory.get().has_ssr) {\n        this.signInWithRedirect(DEFAULT_SCOPE, default_locale, redirectUri);\n      } else {\n        this.signInWithRedirect();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  fullAuthenticateProcess(\n    stateUrl?: string,\n    callback?: (isAuthenticated: boolean, stateUrl?: string) => boolean\n  ): Observable {\n    return combineLatest(\n      [this.isLoading$, this.authenticated$]\n    ).pipe(\n      filter(([isLoading, isAuthenticated]) => {\n        return !isLoading;\n      }),\n      map(([isLoading, isAuthenticated]) => {\n        if (callback) {\n          return callback(isAuthenticated, stateUrl);\n        } else {\n          return this.defaultAuthenticationCallback(isAuthenticated, stateUrl);\n        }\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authorization.html":{"url":"interfaces/Authorization.html","title":"interface - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                            Optional\n                                        telemetry\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telemetry\n                                    \n                                \n                                \n                                    \n                                        telemetry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptrClient.html":{"url":"interfaces/CryptrClient.html","title":"interface - CryptrClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CryptrClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canHandleAuthentication\n                                \n                                \n                                    canHandleInvitation\n                                \n                                \n                                    canRefresh\n                                \n                                \n                                    decoratedRequest\n                                \n                                \n                                    finalScope\n                                \n                                \n                                    getClaimsFromAccess\n                                \n                                \n                                    getCurrentAccessToken\n                                \n                                \n                                    getCurrentIdToken\n                                \n                                \n                                    getRefreshStore\n                                \n                                \n                                    getUser\n                                \n                                \n                                    handleInvitationState\n                                \n                                \n                                    handleNewTokens\n                                \n                                \n                                    handleRedirectCallback\n                                \n                                \n                                    handleRefreshTokens\n                                \n                                \n                                    handleTokensErrors\n                                \n                                \n                                    inviteWithoutRedirect\n                                \n                                \n                                    inviteWithRedirect\n                                \n                                \n                                    isAuthenticated\n                                \n                                \n                                    logOut\n                                \n                                \n                                    recurringRefreshToken\n                                \n                                \n                                    signInWithoutRedirect\n                                \n                                \n                                    signInWithRedirect\n                                \n                                \n                                    signUpWithoutRedirect\n                                \n                                \n                                    signUpWithRedirect\n                                \n                                \n                                    userAccountAccess\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleInvitation\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleInvitation(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canRefresh\n                        \n                        \n                    \n                \n            \n            \n                \ncanRefresh(refreshStore: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decoratedRequest\n                        \n                        \n                    \n                \n            \n            \n                \ndecoratedRequest(axiosRequestConfig: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    axiosRequestConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalScope\n                        \n                        \n                    \n                \n            \n            \n                \nfinalScope(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClaimsFromAccess\n                        \n                        \n                    \n                \n            \n            \n                \ngetClaimsFromAccess(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     object | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRefreshStore\n                        \n                        \n                    \n                \n            \n            \n                \ngetRefreshStore()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         RefreshStore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     object | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInvitationState\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInvitationState(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleNewTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleNewTokens(refreshStore: RefreshStore, tokens?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokens\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRefreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokensErrors\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokensErrors(errors: TokenError[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                TokenError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: any, location?: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recurringRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \nrecurringRefreshToken(refreshTokenWrapper: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenWrapper\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorConfig.html":{"url":"interfaces/HttpInterceptorConfig.html","title":"interface - HttpInterceptorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        apiRequestsToSecure\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiRequestsToSecure\n                                    \n                                \n                                \n                                    \n                                        apiRequestsToSecure:         ApiRouteDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiRouteDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorRouteConfig.html":{"url":"interfaces/HttpInterceptorRouteConfig.html","title":"interface - HttpInterceptorRouteConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorRouteConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        httpMethod\n                                \n                                \n                                            Optional\n                                        tokenOptions\n                                \n                                \n                                        uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpMethod\n                                    \n                                \n                                \n                                    \n                                        httpMethod:         HttpMethod | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenOptions\n                                    \n                                \n                                \n                                    \n                                        tokenOptions:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshStore.html":{"url":"interfaces/RefreshStore.html","title":"interface - RefreshStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_expiration_date\n                                \n                                \n                                        refresh_expiration_date\n                                \n                                \n                                        refresh_leeway\n                                \n                                \n                                        refresh_retry\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_expiration_date\n                                    \n                                \n                                \n                                    \n                                        access_token_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_expiration_date\n                                    \n                                \n                                \n                                    \n                                        refresh_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_leeway\n                                    \n                                \n                                \n                                    \n                                        refresh_leeway:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_retry\n                                    \n                                \n                                \n                                    \n                                        refresh_retry:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenError.html":{"url":"interfaces/TokenError.html","title":"interface - TokenError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        error_description\n                                \n                                \n                                        http_response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error_description\n                                    \n                                \n                                \n                                    \n                                        error_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http_response\n                                    \n                                \n                                \n                                    \n                                        http_response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accessToken\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/abstract-navigator.ts\n            \n            injectable\n            AbstractNavigator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/account-access-button/account-access-button.component.ts\n            \n            component\n            AccountAccessButtonComponent\n            \n                100 %\n                (26/26)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            injectable\n            AuthClientConfig\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorRouteConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            function\n            isHttpInterceptorRouteConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            variable\n            AuthConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/auth.interceptor.ts\n            \n            interceptor\n            AuthHttpInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            BADGE_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            DEFAULT_SCOPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            ERROR_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            LOG_OUT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            SIGN_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_CLOSED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_OPENED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            USER_ACCOUNT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/enums.ts\n            \n            variable\n            LocalizedStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Authorization\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            AuthResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            CryptrClient\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            RefreshStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            TokenError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            function\n            windowProvider\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            variable\n            WindowService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @cryptr/cryptr-spa-js : ^0.1.10\n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9 \n        \n            @angular/core : >=9 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../auth.config.ts)\n                        \n                        \n                            Sign   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                    \n                        \n                            Defines a common set of HTTP methods.\n\n                        \n                    \n                        \n                            \n                                 Get\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 Put\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 Patch\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 Head\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n            \n        \n\n    src/lib/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Sign\n                    \n                \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : invite\n                            \n                        \n                        \n                            \n                                 In\n                            \n                        \n                        \n                            \n                                Value : signin\n                            \n                        \n                        \n                            \n                                 Up\n                            \n                        \n                        \n                            \n                                Value : signup\n                            \n                        \n                        \n                            \n                                 Refresh\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isHttpInterceptorRouteConfig   (src/.../auth.config.ts)\n                        \n                        \n                            windowProvider   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isHttpInterceptorRouteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nisHttpInterceptorRouteConfig(def)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpInterceptorRouteConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/window.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            windowProvider\n                        \n                        \n                    \n                \n            \n            \n                \nwindowProvider()\n                \n            \n\n\n\n\n            \n                \n                    Default window provider. Provides the actual window object.\n\n\n                    \n                        Returns :     Window\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nStatements\nBranches\nFunctions\nLines\n\n\n\n\n\n\n\n\n\n\n\nCryptrAngular\nFor more See our related live Doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiRouteDefinition   (src/.../auth.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n    \n        \n            \n                \n                    \n                    ApiRouteDefinition\n                \n            \n            \n                \n                        HttpInterceptorRouteConfig | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfigService   (src/.../auth.config.ts)\n                        \n                        \n                            BADGE_CLASS   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_SCOPE   (src/.../constants.ts)\n                        \n                        \n                            ERROR_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            LocalizedStrings   (src/.../enums.ts)\n                        \n                        \n                            LOG_OUT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            SIGN_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_CLOSED   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_OPENED   (src/.../constants.ts)\n                        \n                        \n                            USER_ACCOUNT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            WindowService   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\n  'cryptr-angular.config'\n)\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BADGE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'uppercase rounded-full h-6 w-6 flex items-center justify-center bg-blue-500 text-xs text-white'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SCOPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'openid email profile'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-red-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_OUT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-yellow-500 bg-white hover:text-yellow-400 focus:outline-none focus:border-yellow-300 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SIGN_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-yellow-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_CLOSED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 transition ease-in-out duration-150 focus:outline-none'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_OPENED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 focus:outline-none focus:bg-gray-200 focus:shadow-none transition ease-in-out duration-150'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_ACCOUNT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer mt-2 w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-white bg-yellow-500 hover:bg-yellow-400 focus:outline-none focus:border-yellow-600 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/enums.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LocalizedStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  fr: {\n    signin: 'Connexion',\n    signup: 'Inscription',\n    logOut: 'Déconnexion',\n    manageAccount: 'Mon Compte'\n  },\n  en: {\n    signin: 'Sign In',\n    signup: 'Sign Up',\n    logOut: 'Log out',\n    manageAccount: 'Manage my account'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/window.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WindowService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('Browser window')\n                        \n                    \n\n                \n                    \n                        Injection token for providing an instance of window\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
