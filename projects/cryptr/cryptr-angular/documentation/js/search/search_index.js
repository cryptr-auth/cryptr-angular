var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractNavigator.html",[0,0.804,1,1.871]],["body/injectables/AbstractNavigator.html",[0,1.176,1,2.736,2,2.095,3,0.507,4,0.507,5,0.442,6,4.29,7,2.782,8,0.266,9,1.058,10,2.178,11,4.915,12,4.715,13,1.303,14,4.414,15,1.86,16,3.38,17,1.812,18,5.648,19,2.178,20,4.414,21,1.765,22,0.04,23,1.765,24,0.468,25,1.058,26,4.414,27,0.737,28,3.38,29,4.414,30,4.414,31,4.564,32,4.414,33,4.414,34,4.414,35,4.414,36,4.414,37,4.414,38,4.414,39,2.389,40,4.414,41,1.351,42,0.949,43,1.776,44,1.104,45,2.389,46,2.095,47,1.498,48,1.498,49,0.507,50,1.221,51,2.782,52,2.782,53,4.414,54,3.38,55,2.782,56,1.665,57,2.782,58,3.38,59,2.782,60,1.221,61,3.38,62,0.022,63,0.029,64,0.022]],["title/injectables/AuthClientConfig.html",[0,0.804,65,1.207]],["body/injectables/AuthClientConfig.html",[0,1.055,2,1.781,3,0.431,4,0.431,5,0.376,8,0.226,9,0.949,10,2.007,13,1.337,15,1.582,19,2.162,21,1.583,22,0.04,23,1.583,24,0.465,25,1.086,27,0.859,39,2.031,41,1.583,42,0.851,43,1.039,44,0.939,47,1.274,48,1.274,49,0.828,50,1.039,56,1.416,60,1.431,62,0.019,63,0.026,64,0.019,65,1.583,66,1.039,67,0.859,68,2.984,69,2.366,70,2.29,71,3.959,72,1.781,73,2.874,74,2.454,75,3.025,76,2.686,77,2.454,78,2.874,79,2.454,80,2.686,81,2.454,82,2.179,83,2.179,84,2.454,85,1.416,86,2.179,87,1.582,88,1.582,89,1.582,90,1.95,91,0.766,92,2.493,93,2.179,94,2.179,95,2.179,96,2.179,97,2.179,98,2.231,99,1.636,100,1.416,101,1.274,102,2.493,103,1.781,104,0.618,105,0.152,106,1.95,107,1.781,108,1.416,109,1.781,110,0.766,111,0.766,112,0.689,113,0.766,114,0.766,115,0.689,116,0.766,117,1.582,118,1.781,119,0.618,120,1.781,121,1.781,122,1.582,123,1.781,124,2.179,125,1.149,126,1.274,127,1.416,128,1.582]],["title/interfaces/AuthConfig.html",[70,1.207,105,0.101]],["body/interfaces/AuthConfig.html",[0,1.032,3,0.418,4,0.418,5,0.364,8,0.22,9,0.929,10,1.235,13,0.823,22,0.04,24,0.543,25,1.366,27,0.911,42,0.599,43,1.007,44,0.91,47,1.235,48,1.235,49,0.822,50,1.007,56,1.372,60,1.4,62,0.018,63,0.025,64,0.018,65,1.114,66,1.007,67,0.786,68,2.452,70,2.095,74,1.727,75,2.402,76,2.133,77,1.727,79,1.727,80,2.133,81,1.727,82,1.533,83,1.533,84,1.727,85,1.372,86,2.133,87,1.533,88,1.533,89,1.533,90,1.909,91,0.742,92,2.452,93,2.133,94,2.133,95,2.133,96,2.133,97,2.133,98,2.195,99,1.61,100,1.372,101,1.235,102,2.452,103,1.727,104,0.599,105,0.15,106,2.372,107,1.727,108,1.372,109,1.727,110,1.283,111,1.283,112,1.155,113,1.283,114,1.283,115,1.155,116,1.283,117,2.65,118,2.985,119,0.958,120,2.985,121,1.727,122,1.533,123,1.727,124,2.133,125,1.114,126,1.235,127,1.372,128,1.533,129,0.742]],["title/guards/AuthGuard.html",[130,2.133,131,1.871]],["body/guards/AuthGuard.html",[0,1.168,3,0.502,4,0.502,5,0.438,8,0.264,13,1.295,15,1.842,19,2.3,21,2.076,22,0.04,23,2.076,24,0.495,25,1.245,41,1.956,43,1.876,44,1.094,45,2.366,47,1.483,48,1.483,49,0.502,50,1.21,51,2.755,60,1.768,62,0.022,63,0.028,64,0.022,131,2.719,132,3.347,133,2.755,134,5.389,135,5.389,136,5.191,137,3.347,138,2.858,139,3.347,140,4.386,141,3.347,142,5.634,143,4.552,144,5.634,145,3.347,146,3.61,147,3.983,148,3.347,149,3.347,150,4.386,151,4.386,152,3.809,153,4.892,154,5.191,155,3.347,156,2.755,157,2.366,158,2.755,159,2.366,160,3.347,161,4.386]],["title/interceptors/AuthHttpInterceptor.html",[162,2.485,163,2.133]],["body/interceptors/AuthHttpInterceptor.html",[0,1.019,3,0.41,4,0.41,5,0.357,8,0.215,10,2.227,13,1.129,15,2.104,19,1.694,21,1.529,22,0.041,23,1.529,24,0.364,25,0.917,27,0.661,31,2.25,41,1.093,43,1.882,44,0.893,49,0.41,50,0.988,60,2.003,62,0.018,63,0.025,64,0.018,67,0.574,69,2.25,70,1.909,85,1.346,90,2.172,98,1.883,99,0.988,101,1.211,104,0.822,108,2.172,117,2.104,119,0.588,122,1.504,125,1.093,146,3.63,147,3.375,152,1.932,157,1.932,159,1.932,163,2.702,164,2.733,165,2.25,166,4.409,167,1.175,168,2.733,169,2.733,170,5.207,171,4.775,172,2.733,173,4.775,174,2.733,175,2.733,176,2.733,177,1.932,178,2.733,179,2.25,180,1.932,181,1.932,182,2.25,183,4.409,184,2.25,185,3.823,186,2.733,187,2.733,188,3.823,189,2.733,190,2.733,191,2.733,192,2.733,193,2.733,194,3.63,195,2.733,196,4.775,197,3.375,198,3.823,199,2.733,200,4.409,201,2.733,202,2.96,203,2.733,204,3.147,205,3.823,206,2.733,207,3.147,208,2.733,209,2.733,210,2.733,211,2.733,212,2.733,213,2.733,214,3.823,215,2.733,216,2.733,217,3.823,218,2.733,219,2.733,220,2.733,221,2.733,222,2.733,223,2.733,224,0.988]],["title/modules/AuthModule.html",[225,2.133,226,1.871]],["body/modules/AuthModule.html",[3,0.509,4,0.509,5,0.444,13,1.002,19,1.504,21,1.357,22,0.04,23,1.357,24,0.323,25,0.814,41,1.357,43,2.043,44,1.109,46,2.103,49,0.509,50,1.226,60,1.226,62,0.022,63,0.029,64,0.022,65,1.769,67,0.664,70,2.087,72,2.103,125,1.769,131,2.743,138,2.436,158,2.793,177,2.398,180,3.128,181,2.398,225,2.398,226,3.593,227,2.398,228,2.103,229,2.793,230,4.054,231,4.054,232,3.643,233,4.054,234,2.793,235,2.793,236,2.793,237,4.262,238,3.643,239,2.793,240,2.398,241,3.393,242,4.425,243,3.393,244,4.425,245,3.393,246,4.924,247,4.924,248,3.393,249,2.398,250,3.128,251,2.793,252,3.393,253,4.425,254,3.393,255,3.393,256,4.425,257,3.393,258,3.393,259,3.393,260,3.393]],["title/interfaces/AuthResponseError.html",[105,0.101,261,0.986]],["body/interfaces/AuthResponseError.html",[3,0.442,4,0.442,5,0.386,8,0.232,9,0.966,17,1.316,22,0.04,24,0.384,27,0.931,42,0.866,49,0.845,62,0.019,63,0.026,64,0.019,67,0.688,91,0.785,104,1.061,105,0.187,110,0.785,111,0.785,112,0.707,113,0.785,114,0.785,115,0.707,116,0.785,119,1.147,129,0.785,167,0.785,224,1.065,261,1.316,262,0.963,263,1.972,264,1.972,265,0.87,266,1.316,267,0.87,268,0.87,269,0.87,270,1.316,271,0.963,272,1.065,273,1.065,274,1.189,275,1.065,276,1.065,277,1.179,278,1.316,279,1.179,280,1.065,281,1.179,282,1.687,283,1.179,284,1.179,285,1.972,286,1.179,287,1.179,288,1.179,289,1.179,290,1.179,291,1.065,292,2.096,293,1.179,294,1.179,295,1.926,296,1.926,297,1.179,298,1.179,299,1.065,300,1.065,301,1.179,302,1.179,303,1.179,304,1.179,305,1.065,306,1.179,307,1.179,308,1.179,309,1.179,310,1.065,311,1.189,312,1.179,313,1.179,314,1.179,315,1.065,316,1.065,317,1.179,318,0.87,319,0.963]],["title/injectables/AuthService.html",[0,0.804,138,1.661]],["body/injectables/AuthService.html",[0,0.432,1,1.005,2,0.576,3,0.139,4,0.139,5,0.121,8,0.073,10,2.181,12,1.775,13,0.479,15,0.511,17,1.2,19,2.028,21,0.862,22,0.041,23,0.862,24,0.205,25,0.517,27,0.784,39,1.826,41,2.128,42,0.965,43,1.501,44,0.303,45,0.657,46,0.576,47,0.412,48,0.412,49,0.139,50,0.336,52,1.334,55,1.334,56,1.81,57,0.765,60,1.952,62,0.006,63,0.01,64,0.006,65,0.648,67,0.52,72,1.996,76,0.892,80,1.422,83,2.564,85,0.458,90,1.977,100,0.458,104,0.829,108,1.273,112,0.223,115,0.389,119,1.046,124,0.511,126,1.145,127,1.977,138,1.422,143,4.003,147,3.8,152,0.657,156,1.775,157,0.657,159,0.657,167,0.575,177,0.657,179,0.765,180,0.657,181,0.657,182,0.765,184,0.765,194,4.095,202,2.39,204,1.334,207,0.765,249,1.146,250,1.146,265,1.263,266,0.303,267,0.763,268,0.951,269,0.479,270,0.53,272,0.586,273,0.336,274,0.951,275,0.336,276,0.586,280,0.586,291,1.45,292,1.45,295,1.545,296,1.816,299,0.586,300,0.586,305,0.336,310,0.934,311,0.479,315,0.934,316,0.586,318,1.226,319,0.844,320,0.765,321,4.8,322,2.583,323,2.583,324,2.583,325,2.583,326,2.583,327,2.583,328,2.597,329,2.583,330,2.583,331,2.127,332,2.127,333,0.929,334,2.583,335,1.621,336,2.583,337,0.929,338,4.8,339,5.191,340,1.621,341,0.929,342,2.583,343,0.929,344,0.929,345,2.583,346,2.127,347,4.276,348,1.621,349,2.127,350,0.929,351,1.621,352,0.929,353,0.929,354,0.929,355,0.929,356,1.621,357,1.621,358,2.583,359,3.437,360,2.853,361,2.583,362,1.621,363,5.07,364,2.583,365,3.221,366,0.929,367,0.929,368,0.929,369,2.583,370,3.674,371,2.583,372,2.583,373,3.025,374,3.834,375,3.52,376,2.583,377,2.583,378,2.583,379,2.583,380,2.583,381,2.583,382,4.013,383,4.276,384,2.156,385,1.621,386,2.583,387,1.621,388,1.621,389,1.621,390,0.929,391,2.156,392,1.621,393,0.929,394,1.621,395,2.583,396,1.621,397,1.621,398,0.929,399,0.765,400,0.765,401,0.765,402,0.929,403,1.621,404,1.621,405,0.929,406,1.621,407,0.929,408,1.621,409,0.929,410,0.929,411,0.657,412,0.929,413,0.929,414,0.929,415,0.929,416,0.929,417,1.621,418,0.929,419,0.929,420,0.929,421,0.929,422,0.929,423,1.621,424,0.929,425,0.929,426,0.929,427,0.929,428,0.929,429,0.929,430,0.929,431,1.621,432,0.929,433,1.621,434,0.929,435,1.621,436,1.621,437,1.621,438,3.221,439,0.929,440,2.156,441,1.621,442,2.156,443,1.621,444,1.334,445,1.334,446,1.621,447,0.929,448,0.929,449,2.156,450,0.929,451,0.929,452,0.929,453,0.765,454,0.929,455,0.929,456,0.929,457,0.929,458,0.929,459,0.929,460,2.583,461,1.621,462,0.929,463,0.929,464,0.929,465,0.929,466,0.929,467,0.929,468,0.929,469,0.929,470,0.929,471,0.929,472,1.621,473,0.929,474,0.929,475,0.929,476,0.929,477,0.929,478,0.929,479,0.929,480,0.929,481,0.929,482,3.465,483,1.621,484,0.929,485,2.156,486,0.929,487,0.929,488,1.621,489,0.929,490,0.929,491,0.929,492,0.929,493,0.929,494,0.929,495,0.929,496,0.929,497,2.156,498,0.929,499,0.929,500,0.929,501,0.929,502,0.765,503,0.929,504,0.929,505,0.929,506,0.929,507,2.156,508,0.929,509,0.929,510,0.929,511,1.621,512,0.929,513,1.621,514,0.929,515,0.929,516,0.929,517,0.929,518,0.929,519,0.929,520,0.929,521,0.929,522,0.929,523,0.929,524,0.929,525,0.929,526,0.929,527,0.929,528,0.929,529,0.929,530,0.929,531,0.929]],["title/interfaces/Authorization.html",[105,0.101,271,0.986]],["body/interfaces/Authorization.html",[3,0.442,4,0.442,5,0.386,8,0.232,9,0.966,17,1.316,22,0.04,24,0.384,27,0.931,42,0.866,49,0.845,62,0.019,63,0.026,64,0.019,67,0.688,91,0.785,104,1.061,105,0.187,110,0.785,111,0.785,112,0.707,113,0.785,114,0.785,115,0.707,116,0.785,119,1.147,129,0.785,167,0.785,224,1.065,261,0.963,262,0.963,263,1.179,264,1.179,265,0.87,266,1.316,267,0.87,268,0.87,269,0.87,270,1.316,271,1.316,272,1.782,273,1.782,274,1.189,275,1.065,276,1.065,277,1.179,278,1.316,279,1.179,280,1.065,281,1.179,282,1.687,283,1.179,284,1.179,285,1.972,286,1.179,287,1.179,288,1.179,289,1.179,290,1.179,291,1.065,292,2.096,293,1.179,294,1.179,295,1.926,296,1.926,297,1.179,298,1.179,299,1.065,300,1.065,301,1.179,302,1.179,303,1.179,304,1.179,305,1.065,306,1.179,307,1.179,308,1.179,309,1.179,310,1.065,311,1.189,312,1.179,313,1.179,314,1.179,315,1.065,316,1.065,317,1.179,318,0.87,319,0.963]],["title/interfaces/Config.html",[67,0.453,105,0.101]],["body/interfaces/Config.html",[3,0.407,4,0.407,5,0.355,8,0.214,9,0.913,17,1.244,22,0.04,24,0.519,25,1.306,27,0.932,42,0.819,49,0.83,62,0.018,63,0.025,64,0.018,67,0.714,91,0.724,104,1.024,105,0.183,110,1.269,111,1.269,112,1.142,113,1.269,114,1.269,115,1.142,116,1.269,119,1.171,129,0.724,167,0.724,224,0.981,261,0.887,262,0.887,263,1.086,264,1.086,265,0.802,266,1.244,267,0.802,268,0.802,269,0.802,270,1.244,271,0.887,272,0.981,273,0.981,274,1.124,275,0.981,276,0.981,277,1.904,278,1.244,279,1.086,280,0.981,281,1.086,282,1.638,283,1.086,284,1.086,285,1.904,286,1.086,287,1.086,288,1.086,289,1.086,290,1.086,291,0.981,292,2.067,293,1.086,294,1.086,295,1.878,296,1.878,297,1.086,298,1.086,299,0.981,300,0.981,301,1.086,302,1.086,303,1.086,304,1.086,305,0.981,306,1.086,307,1.086,308,1.086,309,1.086,310,0.981,311,1.124,312,1.086,313,1.086,314,1.086,315,0.981,316,0.981,317,1.086,318,0.802,319,0.887]],["title/interfaces/CryptrClient.html",[105,0.101,167,0.804]],["body/interfaces/CryptrClient.html",[3,0.26,4,0.26,5,0.226,8,0.136,9,0.653,13,0.803,17,1.437,19,2.546,21,2.197,22,0.04,23,2.197,24,0.528,25,1.318,27,0.927,41,2.297,42,0.82,49,0.735,62,0.011,63,0.018,64,0.011,67,0.715,72,3.547,91,0.461,104,0.99,105,0.16,110,0.461,111,0.461,112,0.415,113,0.461,114,0.461,115,0.415,116,0.461,119,1.079,129,0.461,167,0.725,224,0.983,261,0.566,262,0.566,263,0.692,264,0.692,265,0.511,266,0.889,267,0.511,268,0.511,269,0.511,270,0.889,271,0.566,272,0.625,273,0.625,274,1.125,275,0.625,276,0.983,277,0.692,278,1.245,279,0.692,280,0.625,281,0.692,282,1.745,283,0.692,284,0.692,285,1.524,286,0.692,287,0.692,288,0.692,289,1.524,290,1.524,291,1.377,292,2.068,293,1.088,294,1.088,295,2.001,296,2.001,297,1.088,298,1.088,299,0.983,300,0.983,301,1.088,302,1.088,303,1.088,304,1.088,305,1.377,306,1.088,307,1.524,308,1.524,309,1.088,310,1.377,311,1.125,312,1.088,313,1.088,314,1.088,315,1.377,316,0.983,317,1.088,318,0.511,319,0.566,328,1.923,331,2.24,332,2.24,360,1.425,373,3.924,453,2.24,532,2.721,533,2.721,534,2.721,535,2.721,536,2.721,537,2.721,538,2.721,539,2.721,540,2.721,541,2.721,542,2.721,543,2.721,544,2.721,545,1.731,546,2.721,547,1.731,548,1.731,549,1.731,550,1.731,551,1.731,552,1.731,553,1.731,554,1.731,555,1.731,556,1.731,557,1.731,558,1.731,559,1.731,560,1.731,561,1.731,562,1.731,563,1.731,564,1.731,565,1.731,566,1.731,567,1.731,568,1.731,569,1.731,570,1.731,571,1.731,572,1.731,573,1.731]],["title/interfaces/HttpInterceptorConfig.html",[105,0.101,106,1.487]],["body/interfaces/HttpInterceptorConfig.html",[0,1.124,3,0.474,4,0.474,5,0.413,8,0.249,9,1.012,10,1.399,13,0.932,22,0.04,24,0.402,25,0.757,27,0.873,42,0.679,43,1.141,44,1.032,47,1.399,48,1.399,49,0.847,50,1.141,56,1.556,60,1.525,62,0.02,63,0.027,64,0.02,65,1.263,66,1.141,67,0.816,68,2.616,70,2.114,74,1.957,75,2.616,76,2.323,77,1.957,79,1.957,80,2.323,81,1.957,82,1.738,83,1.738,84,1.957,85,1.556,86,2.323,87,1.738,88,1.738,89,1.738,90,2.079,91,0.841,92,2.616,93,2.323,94,2.323,95,2.323,96,2.323,97,2.323,98,2.605,99,1.717,100,1.556,101,1.399,102,2.616,103,1.957,104,0.679,105,0.16,106,2.341,107,3.145,108,1.556,109,1.957,110,0.841,111,0.841,112,0.757,113,0.841,114,0.841,115,0.757,116,0.841,117,1.738,118,1.957,119,0.679,120,1.957,121,1.957,122,1.738,123,1.957,124,2.323,125,1.263,126,1.399,127,1.556,128,1.738,129,0.841]],["title/interfaces/HttpInterceptorRouteConfig.html",[99,1.091,105,0.101]],["body/interfaces/HttpInterceptorRouteConfig.html",[0,1.097,3,0.457,4,0.457,5,0.398,8,0.24,9,0.988,10,1.35,13,0.899,22,0.04,24,0.476,25,1.252,27,0.89,42,0.655,43,1.101,44,0.995,47,1.35,48,1.35,49,0.84,50,1.101,56,1.501,60,1.489,62,0.02,63,0.027,64,0.02,65,1.218,66,1.101,67,0.808,68,2.569,70,2.088,74,1.888,75,2.553,76,2.267,77,1.888,79,1.888,80,2.267,81,1.888,82,1.677,83,1.677,84,1.888,85,1.501,86,2.267,87,1.677,88,1.677,89,1.677,90,2.029,91,0.812,92,3.081,93,2.267,94,2.267,95,2.267,96,2.267,97,2.267,98,2.299,99,1.807,100,1.501,101,1.35,102,2.569,103,1.888,104,0.655,105,0.157,106,2.029,107,1.888,108,2.463,109,3.099,110,0.812,111,0.812,112,0.73,113,0.812,114,0.812,115,0.73,116,0.812,117,1.677,118,1.888,119,0.655,120,1.888,121,1.888,122,1.677,123,1.888,124,2.267,125,1.218,126,1.35,127,1.501,128,1.677,129,0.812]],["title/interfaces/RefreshStore.html",[105,0.101,282,0.986]],["body/interfaces/RefreshStore.html",[3,0.427,4,0.427,5,0.372,8,0.224,9,0.943,17,1.285,22,0.04,24,0.486,27,0.928,42,0.846,49,0.839,62,0.018,63,0.025,64,0.018,67,0.676,91,0.758,104,1.045,105,0.185,110,0.758,111,0.758,112,0.682,113,0.758,114,0.758,115,0.682,116,0.758,119,1.134,129,0.758,167,0.758,224,1.028,261,0.93,262,0.93,263,1.138,264,1.138,265,0.84,266,1.285,267,0.84,268,0.84,269,0.84,270,1.285,271,0.93,272,1.028,273,1.028,274,1.161,275,1.028,276,1.028,277,1.138,278,1.285,279,1.138,280,1.028,281,1.138,282,1.723,283,1.943,284,1.943,285,2.305,286,1.943,287,1.943,288,1.943,289,1.138,290,1.138,291,1.028,292,2.084,293,1.138,294,1.138,295,1.906,296,1.906,297,1.138,298,1.138,299,1.028,300,1.028,301,1.138,302,1.138,303,1.138,304,1.138,305,1.028,306,1.138,307,1.138,308,1.138,309,1.138,310,1.028,311,1.161,312,1.138,313,1.138,314,1.138,315,1.028,316,1.028,317,1.138,318,0.84,319,0.93]],["title/interfaces/TokenError.html",[105,0.101,278,0.986]],["body/interfaces/TokenError.html",[3,0.438,4,0.438,5,0.382,8,0.23,9,0.96,17,1.308,22,0.04,24,0.435,27,0.93,42,0.861,49,0.844,62,0.019,63,0.026,64,0.019,67,0.685,91,0.779,104,1.057,105,0.186,110,0.779,111,0.779,112,0.701,113,0.779,114,0.779,115,0.701,116,0.779,119,1.144,129,0.779,167,0.779,224,1.056,261,0.955,262,0.955,263,1.169,264,1.169,265,0.863,266,1.308,267,0.863,268,0.863,269,0.863,270,1.308,271,0.955,272,1.056,273,1.056,274,1.182,275,1.056,276,1.056,277,1.169,278,1.493,279,1.965,280,1.776,281,1.965,282,1.682,283,1.169,284,1.169,285,1.965,286,1.169,287,1.169,288,1.169,289,1.169,290,1.169,291,1.056,292,2.093,293,1.169,294,1.169,295,1.921,296,1.921,297,1.169,298,1.169,299,1.056,300,1.056,301,1.169,302,1.169,303,1.169,304,1.169,305,1.056,306,1.169,307,1.169,308,1.169,309,1.169,310,1.056,311,1.182,312,1.169,313,1.169,314,1.169,315,1.056,316,1.056,317,1.169,318,0.863,319,0.955]],["title/interfaces/Tokens.html",[105,0.101,274,0.891]],["body/interfaces/Tokens.html",[3,0.441,4,0.441,5,0.384,8,0.231,9,0.964,17,1.313,22,0.04,24,0.383,25,0.964,27,0.929,42,0.864,49,0.845,62,0.019,63,0.026,64,0.019,67,0.687,91,0.783,104,1.059,105,0.187,110,0.783,111,0.783,112,0.704,113,0.783,114,0.783,115,0.704,116,0.783,119,1.194,129,0.783,167,0.783,224,1.061,261,0.96,262,0.96,263,1.175,264,1.175,265,0.867,266,1.313,267,0.867,268,0.867,269,0.867,270,1.313,271,0.96,272,1.061,273,1.061,274,1.353,275,1.78,276,1.78,277,1.175,278,1.313,279,1.175,280,1.061,281,1.175,282,1.685,283,1.175,284,1.175,285,1.969,286,1.175,287,1.175,288,1.175,289,1.175,290,1.175,291,1.061,292,2.095,293,1.175,294,1.175,295,1.924,296,1.924,297,1.175,298,1.175,299,1.061,300,1.061,301,1.175,302,1.175,303,1.175,304,1.175,305,1.061,306,1.175,307,1.175,308,1.175,309,1.175,310,1.061,311,1.187,312,1.175,313,1.175,314,1.175,315,1.061,316,1.061,317,1.175,318,0.867,319,0.96]],["title/interfaces/User.html",[105,0.101,318,0.891]],["body/interfaces/User.html",[3,0.448,4,0.448,5,0.39,8,0.235,9,0.974,17,1.327,22,0.04,24,0.284,27,0.93,42,0.873,49,0.847,62,0.019,63,0.026,64,0.019,67,0.693,91,0.795,104,1.066,105,0.187,110,0.795,111,0.795,112,0.715,113,0.795,114,0.795,115,0.715,116,0.795,119,1.151,129,0.795,167,0.795,224,1.078,261,0.975,262,0.975,263,1.193,264,1.193,265,0.881,266,1.327,267,0.881,268,0.881,269,0.881,270,1.327,271,0.975,272,1.078,273,1.078,274,1.199,275,1.078,276,1.078,277,1.193,278,1.327,279,1.193,280,1.078,281,1.193,282,1.694,283,1.193,284,1.193,285,1.982,286,1.193,287,1.193,288,1.193,289,1.193,290,1.193,291,1.078,292,2.1,293,1.193,294,1.193,295,1.933,296,1.933,297,1.193,298,1.193,299,1.078,300,1.078,301,1.193,302,1.193,303,1.193,304,1.193,305,1.078,306,1.193,307,1.193,308,1.193,309,1.193,310,1.078,311,1.199,312,1.193,313,1.193,314,1.193,315,1.078,316,1.078,317,1.193,318,1.199,319,1.62]],["title/coverage.html",[574,3.37]],["body/coverage.html",[0,1.259,1,1.936,5,0.409,6,2.571,7,2.571,22,0.04,24,0.298,59,5.027,62,0.02,63,0.027,64,0.02,65,1.249,66,1.96,67,0.469,70,1.249,99,1.129,100,2.064,101,1.384,105,0.195,106,1.539,125,1.249,126,1.384,130,2.208,131,1.936,133,2.571,138,1.719,162,2.571,163,2.208,165,2.571,167,0.832,237,2.208,250,2.961,251,2.571,261,1.02,262,1.84,271,1.02,274,0.922,278,1.02,282,1.02,318,0.922,320,2.571,411,2.208,574,2.571,575,3.123,576,3.123,577,2.571,578,3.123,579,3.123,580,3.123,581,3.123,582,2.571,583,3.123,584,3.123,585,3.123,586,3.123,587,4.189,588,4.189,589,5.811,590,5.811,591,3.123,592,5.051,593,3.891,594,3.123,595,4.635,596,2.571,597,2.571,598,2.571,599,2.571,600,2.571,601,2.571,602,2.571,603,2.571,604,2.571,605,3.123,606,3.123,607,3.123,608,2.961,609,2.571,610,4.189,611,2.571,612,3.123,613,3.123]],["title/dependencies.html",[228,2.246,614,2.533]],["body/dependencies.html",[22,0.039,44,1.501,46,2.847,62,0.03,63,0.034,64,0.03,228,3.306,399,3.781,400,3.781,401,3.781,615,4.592,616,4.592,617,4.592,618,4.592,619,5.333]],["title/miscellaneous/enumerations.html",[620,1.013,621,2.983]],["body/miscellaneous/enumerations.html",[8,0.33,13,1.238,22,0.039,62,0.027,63,0.033,64,0.027,66,1.515,68,2.307,87,2.307,88,2.307,89,2.307,92,2.781,93,2.781,94,2.781,95,2.781,96,2.781,97,2.781,202,3.748,262,1.37,265,1.492,266,1.651,267,1.238,268,1.238,269,1.238,270,1.651,620,1.676,621,3.451,622,2.598,623,4.191]],["title/miscellaneous/functions.html",[620,1.013,624,2.561]],["body/miscellaneous/functions.html",[8,0.349,21,1.77,22,0.038,23,1.77,25,1.062,41,2.087,62,0.029,63,0.034,64,0.029,66,1.6,99,1.6,101,2.314,102,2.437,311,1.307,359,3.13,608,3.13,609,4.57,620,1.77,622,2.745,624,3.13,625,3.645,626,4.428,627,4.57,628,4.428,629,4.428,630,4.428]],["title/index.html",[8,0.2,631,2.533,632,2.533]],["body/index.html",[22,0.035,62,0.03,63,0.035,64,0.03,82,2.576,349,3.852,577,3.852,624,3.308,633,4.679,634,4.679,635,4.679,636,4.679,637,4.679,638,4.679]],["title/modules.html",[227,2.893]],["body/modules.html",[22,0.035,62,0.031,63,0.035,64,0.031,226,2.933,227,3.344,639,4.731,640,4.731,641,4.731,642,4.731]],["title/overview.html",[643,3.37]],["body/overview.html",[2,2.663,22,0.038,62,0.028,63,0.033,64,0.028,129,1.144,130,3.036,197,3.874,225,3.624,226,3.65,228,2.663,229,3.536,230,3.536,231,3.536,232,3.536,233,3.536,234,3.536,235,3.536,236,3.536,237,4.267,238,4.221,239,3.536,240,3.036,582,3.536,643,3.536,644,3.536,645,4.296]],["title/miscellaneous/typealiases.html",[620,1.013,646,3.623]],["body/miscellaneous/typealiases.html",[8,0.368,22,0.037,24,0.445,27,0.7,62,0.03,63,0.035,64,0.03,66,1.687,98,2.652,99,1.687,620,1.866,622,2.893,647,4.667]],["title/miscellaneous/variables.html",[620,1.013,648,2.983]],["body/miscellaneous/variables.html",[8,0.178,22,0.039,24,0.504,27,0.777,62,0.015,63,0.022,64,0.015,66,0.816,86,1.243,125,1.333,126,1.477,127,1.112,128,1.243,197,2.356,202,3.383,240,3.569,249,1.596,265,0.984,267,0.984,268,0.667,269,0.984,311,0.667,319,0.738,328,2.356,346,1.859,359,3.858,374,1.859,375,1.859,411,2.356,444,1.859,445,1.859,502,4.156,593,2.743,595,1.859,596,2.743,597,2.743,598,2.743,599,2.743,600,2.743,601,2.743,602,2.743,603,1.859,604,2.743,608,1.596,611,2.743,620,0.903,622,1.4,625,1.859,627,2.743,644,2.743,648,1.859,649,5.182,650,2.258,651,4.664,652,5.049,653,3.961,654,2.258,655,5.182,656,3.961,657,5.291,658,5.049,659,5.381,660,3.961,661,4.664,662,2.258,663,5.049,664,5.629,665,3.961,666,4.664,667,3.332,668,3.332,669,4.881,670,4.373,671,4.881,672,5.182,673,4.373,674,4.373,675,4.881,676,4.881,677,4.373,678,5.182,679,2.258,680,4.373,681,3.332,682,3.332,683,4.881,684,5.049,685,4.881,686,4.881,687,4.881,688,4.881,689,3.332,690,3.332,691,5.291,692,2.258,693,3.332,694,3.332,695,2.258,696,3.961,697,3.332,698,3.332,699,4.664,700,3.332,701,3.332,702,3.332,703,3.332,704,3.961,705,2.258,706,2.258,707,2.258,708,2.258,709,2.258,710,2.258,711,2.258,712,3.332,713,2.258,714,2.258,715,2.258,716,2.258,717,2.258,718,2.258,719,2.258,720,2.258]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":59,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["0.1.10",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["0/57",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":197,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":593,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":645,"title":{},"body":{"overview.html":{}}}],["150",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16/16",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":644,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["500",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["600",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstractnavigator",{"_index":1,"title":{"injectables/AbstractNavigator.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access_token",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_expiration_date",{"_index":284,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["accesstoken",{"_index":276,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["account",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accountaccessbuttoncomponent",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["action",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroute",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroutesnapshot",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["actual",{"_index":630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aliases",{"_index":647,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular.config",{"_index":128,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["angular/common",{"_index":46,"title":{},"body":{"injectables/AbstractNavigator.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":175,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["angular/core",{"_index":44,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"dependencies.html":{}}}],["angular/router",{"_index":45,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["apirequeststosecure",{"_index":107,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["apiroutedefinition",{"_index":98,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/typealiases.html":{}}}],["args",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["asterisk",{"_index":209,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["async",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["atoken",{"_index":183,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["audience",{"_index":112,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["audience.concat(stateurl",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth.client",{"_index":181,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.config",{"_index":177,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.guard",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["authclientconfig",{"_index":65,"title":{"injectables/AuthClientConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfig",{"_index":70,"title":{"interfaces/AuthConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfigservice",{"_index":125,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentiation",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticate",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationinprogress",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":131,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authhttpinterceptor",{"_index":163,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["authmodule",{"_index":226,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":271,"title":{"interfaces/Authorization.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authorization_id",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponseerror",{"_index":261,"title":{"interfaces/AuthResponseError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":34,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["await",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosrequestconfig",{"_index":550,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["back",{"_index":37,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["badge_class",{"_index":596,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":192,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["behaviorsubject",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(null",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(true",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["bg",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blue",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bold",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["bootstrap",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["border",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branches",{"_index":633,"title":{},"body":{"index.html":{}}}],["browse",{"_index":642,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":639,"title":{},"body":{"modules.html":{}}}],["button.component",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["button.component.ts",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["button/account",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["call",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["callback(isauthenticated",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(next",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild(childroute",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canattachtoken",{"_index":199,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canhandleauthentication",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["canhandleauthentication(searchparams",{"_index":313,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canhandleinvitation",{"_index":532,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canhandleinvitation(searchparams",{"_index":314,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canload",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canload(route",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canrefresh",{"_index":533,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canrefresh(refreshstore",{"_index":306,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["catch",{"_index":55,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["catch((err",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch((error",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkauthentication",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["childroute",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["chosen",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":50,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["cleanroutestate",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanurltree(sourceurltree",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id",{"_index":111,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cluster_authmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_declarations",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":273,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["combinelatest",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["common",{"_index":88,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["commonmodule",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["component",{"_index":582,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["compte",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":67,"title":{"interfaces/Config.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["config.default_locale",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.default_redirect_uri",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["configfactory",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["configuration",{"_index":80,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["connexion",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error('handling",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(error",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(tokens",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('can",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('tokens",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(tokens",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":90,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["constructor(@optional",{"_index":121,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor(auth",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(config",{"_index":69,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["constructor(location",{"_index":16,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{}}}],["consumers",{"_index":75,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["coverage",{"_index":574,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cryptr",{"_index":127,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["cryptr/cryptr",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cryptr_base_url",{"_index":116,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cryptrangular",{"_index":635,"title":{},"body":{"index.html":{}}}],["cryptrclient",{"_index":167,"title":{"interfaces/CryptrClient.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["cryptrclientfactory",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientfactory.createclient",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientservice",{"_index":180,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["cryptrspa",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationobservable",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationstate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["currenturltree",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["cursor",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["decoratedrequest",{"_index":534,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["decoratedrequest(axiosrequestconfig",{"_index":317,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["def",{"_index":102,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_locale",{"_index":115,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_redirect_uri",{"_index":113,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_scope",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultauthenticationcallback(isauthenticated",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["defines",{"_index":87,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":96,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":228,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["description",{"_index":39,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}}}],["destroy",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":638,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["duration",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["déconnexion",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ease",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":319,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["en",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["ends",{"_index":208,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["enum",{"_index":91,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["enumerations",{"_index":621,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":280,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["error_btn_class",{"_index":597,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_description",{"_index":281,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["errors",{"_index":562,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["example",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["exports",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["failed",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["falls",{"_index":36,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["false",{"_index":204,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["field",{"_index":263,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["filter",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["filter(([isloading",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["finally",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["finalreq",{"_index":185,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["finalscope",{"_index":535,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["finalscope(scope",{"_index":293,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["findmatchingroute",{"_index":221,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first",{"_index":178,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first((route",{"_index":223,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["flex",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:bg",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:border",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:outline",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:shadow",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroot(config",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["fr",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.config.httpinterceptor.apirequeststosecure).pipe",{"_index":222,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["from(this.cryptrclient.isauthenticated",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.logout(this.prelogoutcallback(callback",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signinwithredirect(scope",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signupwithredirect(scope",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["full",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fullauthenticateprocess",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":100,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["functions",{"_index":624,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["getaccesstoken",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["getclaimsfromaccess",{"_index":536,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["getclaimsfromaccess(accesstoken",{"_index":312,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getclientuser",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentaccesstoken",{"_index":289,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getcurrentidtoken",{"_index":290,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getidtoken",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["getobservableuser",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshstore",{"_index":307,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gets",{"_index":74,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["getting",{"_index":631,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":310,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gray",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":130,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["handled",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["handleinvitationstate",{"_index":537,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handleinvitationstate(scope",{"_index":302,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlenewtokens",{"_index":538,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handlenewtokens(refreshstore",{"_index":304,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handleredirectcallback",{"_index":305,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlerefreshtokens",{"_index":308,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handletokens(tokens",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokenserrors",{"_index":539,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handletokenserrors(errors",{"_index":303,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["has_ssr",{"_index":118,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["head",{"_index":97,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["headers",{"_index":190,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["hover:bg",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:shadow",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:text",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":89,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["http://localhsot:4201",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["http_response",{"_index":279,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["httpevent",{"_index":174,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httphandler",{"_index":171,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":117,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpinterceptorconfig",{"_index":106,"title":{"interfaces/HttpInterceptorConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["httpinterceptorrouteconfig",{"_index":99,"title":{"interfaces/HttpInterceptorRouteConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["httpinterceptorrouteconfig).uri",{"_index":103,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpmethod",{"_index":92,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["httprequest",{"_index":170,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["id",{"_index":272,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["id_token",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":194,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["iif",{"_index":176,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["implements",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["import",{"_index":43,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["imports",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["inject",{"_index":85,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(authconfigservice",{"_index":122,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(cryptrclientservice",{"_index":182,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["injection",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":86,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('browser",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injector",{"_index":18,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["injector.get(router",{"_index":54,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["inline",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inscription",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instance",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":166,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["intercept(req",{"_index":169,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interceptor",{"_index":162,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":164,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interface",{"_index":105,"title":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":129,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invitation",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["invite",{"_index":266,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["invitewithoutredirect",{"_index":540,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithoutredirect(scope",{"_index":298,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["invitewithredirect",{"_index":541,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithredirect(scope",{"_index":301,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["isauthenticated",{"_index":291,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["ishttpinterceptorrouteconfig",{"_index":101,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(def",{"_index":626,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(route",{"_index":216,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["isloading",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["items",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["justify",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leading",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["lg",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lines",{"_index":634,"title":{},"body":{"index.html":{}}}],["live",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["locale",{"_index":296,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["localizedstrings",{"_index":604,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":17,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["log",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_out_btn_class",{"_index":598,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/variables.html":{}}}],["logout(callback",{"_index":316,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["manage",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccount",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(([isloading",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["match",{"_index":210,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["matching",{"_index":63,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":264,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":620,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":225,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":227,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["mon",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":636,"title":{},"body":{"index.html":{}}}],["mt",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":40,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl",{"_index":14,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl(url",{"_index":26,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigates",{"_index":29,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigator.ts",{"_index":7,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["navigator.ts:22",{"_index":28,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator.ts:9",{"_index":20,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["new",{"_index":126,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newparams",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpath",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["next.handle(finalreq",{"_index":193,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["ngmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["ngondestroy",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngunsubscribe",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["none",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notes",{"_index":84,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["null",{"_index":224,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["number",{"_index":285,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["object",{"_index":311,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["observableauthenticated",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["ondestroy",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":33,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["openid",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["opens",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/Tokens.html":{},"miscellaneous/functions.html":{}}}],["other_key",{"_index":120,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["otherwise",{"_index":35,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["out",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":643,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":614,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":95,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["path).tostring",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["peer",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["performs",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["pointer",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":93,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["prelogoutcallback(callback",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["process",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["profile&quot",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["progress",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":292,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["properties",{"_index":9,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["provide",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["provider",{"_index":628,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["provides",{"_index":629,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providing",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":94,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["px",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["py",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparams",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;en&quot",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;fr&quot",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;http://localhsot:4201&quot",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":81,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["read:invoices",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["read:invoices&quot",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["recurringrefreshtoken",{"_index":542,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["recurringrefreshtoken(refreshtokenwrapper",{"_index":309,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["red",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirection",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirecturi",{"_index":295,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["reerror",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":270,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["refresh_expiration_date",{"_index":286,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_leeway",{"_index":287,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_retry",{"_index":288,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_token",{"_index":283,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refreshstore",{"_index":282,"title":{"interfaces/RefreshStore.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenwrapper",{"_index":568,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["region",{"_index":114,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["related",{"_index":637,"title":{},"body":{"index.html":{}}}],["relative",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":173,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.clone",{"_index":189,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.headers.set('authorization",{"_index":191,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request",{"_index":200,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.method",{"_index":218,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.url.startswith(value.substr(0",{"_index":215,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["requested",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpath",{"_index":205,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["reset",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["resetauthentication(isauthenticated",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":62,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":64,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieving/opening",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/functions.html":{}}}],["rigerror",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["root",{"_index":48,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["rounded",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["route.httpmethod",{"_index":217,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["routecleanedpath",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["router",{"_index":12,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["routerstatesnapshot",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["row",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["scopes",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["searchparams",{"_index":546,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["see",{"_index":82,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"index.html":{}}}],["segments",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["session",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":68,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["set(config",{"_index":77,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["sets",{"_index":79,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["settimeout",{"_index":57,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["settings",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["setuser(newuser",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["shadow",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":265,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sign_btn_class",{"_index":599,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["signin",{"_index":267,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signinwithoutredirect",{"_index":543,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signinwithoutredirect(scope",{"_index":294,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signinwithredirect",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signinwithredirect(\"email",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(&quot;email",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(scope",{"_index":299,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signup",{"_index":269,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signupwithoutredirect",{"_index":544,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signupwithoutredirect(scope",{"_index":297,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signupwithredirect",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signupwithredirect(\"email",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(&quot;email",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(scope",{"_index":300,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["sourceurltree",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.fragment",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.queryparams",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["spa",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["space",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["specified",{"_index":30,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["src/.../auth.config.ts",{"_index":622,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../window.ts",{"_index":625,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/abstract",{"_index":6,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["src/lib/account",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["src/lib/auth.config.ts",{"_index":66,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.config.ts:49",{"_index":71,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:61",{"_index":78,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:68",{"_index":73,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.guard.ts",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/lib/auth.guard.ts:18",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:21",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:25",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:32",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.interceptor.ts",{"_index":165,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["src/lib/auth.interceptor.ts:23",{"_index":168,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:29",{"_index":172,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.module.ts",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.module.ts:16",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.service.ts",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/lib/auth.service.ts:114",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:143",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:162",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:205",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:213",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:221",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:243",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:251",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:259",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:267",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:275",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:283",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:291",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:300",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:316",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/utils/constants.ts",{"_index":595,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/enums.ts",{"_index":603,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/types.ts",{"_index":262,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/utils/types.ts:48",{"_index":553,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:49",{"_index":554,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:50",{"_index":565,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:51",{"_index":551,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:52",{"_index":569,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:53",{"_index":571,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:54",{"_index":563,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:55",{"_index":570,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:56",{"_index":572,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:57",{"_index":564,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:58",{"_index":557,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:59",{"_index":561,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:60",{"_index":558,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:61",{"_index":559,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:62",{"_index":548,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:63",{"_index":555,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:64",{"_index":560,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:65",{"_index":567,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:66",{"_index":556,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:67",{"_index":552,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:68",{"_index":545,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:69",{"_index":547,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:70",{"_index":573,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:71",{"_index":566,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:72",{"_index":549,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/window.ts",{"_index":608,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":632,"title":{"index.html":{}},"body":{}}],["startswith",{"_index":212,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["state",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["statements",{"_index":577,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stateurl",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["stateurl.split('?')[0",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["static",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["still",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":27,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stripqueryfrom(uri",{"_index":195,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["subject",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["sugnup",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":640,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":641,"title":{},"body":{"modules.html":{}}}],["table",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["telemetry",{"_index":277,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["tenant_domain",{"_index":110,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["testprimitive",{"_index":201,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route",{"_index":220,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route.uri",{"_index":219,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["text",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.auth.fullauthenticateprocess(state.url",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.observableauthenticated",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authenticate",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.asobservable",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.next(newauthenticated",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.value",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.canattachtoken(route",{"_index":188,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.canhandleauthentication",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkauthentication",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanroutestate",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanurltree(currenturltree",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":124,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.config.httpinterceptor.apirequeststosecure.foreach(route",{"_index":187,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.config.httpinterceptor?.apirequeststosecure",{"_index":186,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.configfactory.get().has_ssr",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleauthentication",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleinvitation",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.config",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentaccesstoken",{"_index":184,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentidtoken",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getuser",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handleredirectcallback",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handlerefreshtokens",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.isauthenticated",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.useraccountaccess",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultauthenticationcallback(isauthenticated",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handleredirectcallback().then((tokens",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handletokens(tokens",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then((isauthenticated",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then(async",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.asobservable",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.next(false",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.path",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(this.routecleanedpath",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(url",{"_index":61,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.logout(null",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.complete",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.next",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(false",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(isauthenticated",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router",{"_index":53,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.createurltree([path",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.navigatebyurl(url",{"_index":58,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.parseurl(path",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.set(config",{"_index":123,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.setuser(null",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setuser(this.getclientuser",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect(default_scope",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripqueryfrom(request.url",{"_index":206,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.updatecurrentauthstate(false",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(handled",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(isauthenticated",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(valid",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.asobservable",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.next(newuser",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.value",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["todo",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle_cass_closed",{"_index":600,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggle_cass_opened",{"_index":601,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":278,"title":{"interfaces/TokenError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["tokenoptions",{"_index":109,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["tokens",{"_index":274,"title":{"interfaces/Tokens.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["transition",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transparent",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":207,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["try",{"_index":52,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["tslib",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":646,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":104,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["up",{"_index":268,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updatecurrentauthstate(newauthenticated",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["uppercase",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":108,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["uri.indexof",{"_index":196,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["uri.substr(0",{"_index":198,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["urlsegment",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["urltree",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["usage",{"_index":83,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["used",{"_index":32,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["usefactory",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":318,"title":{"interfaces/User.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["user_account_btn_class",{"_index":602,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useraccountaccess",{"_index":315,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["using",{"_index":211,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["utils/constants",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/types",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":275,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["value",{"_index":202,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.indexof",{"_index":213,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.length",{"_index":214,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.trim",{"_index":203,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["variable",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":648,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":42,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["w",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["white",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitespace",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["window",{"_index":627,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_expired",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_invalid_grant",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.history.replacestate",{"_index":38,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["window.location",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["windowprovider",{"_index":609,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["windowservice",{"_index":611,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["x",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xl",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xs",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yellow",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":72,"title":{},"body":{"injectables/AuthClientConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["zoom",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractNavigator.html":{"url":"injectables/AbstractNavigator.html","title":"injectable - AbstractNavigator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AbstractNavigator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/abstract-navigator.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateByUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateByUrl\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateByUrl(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/abstract-navigator.ts:22\n                \n            \n\n\n            \n                \n                    Navigates to the specified url. The router will be used if one is available, otherwise it falls back\nto window.history.replaceState.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The url to navigate to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthClientConfig.html":{"url":"injectables/AuthClientConfig.html","title":"injectable - AuthClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:68\n                \n            \n\n\n            \n                \n                    Gets the config that has been set by other consumers of the service\n\n\n                    \n                        Returns :         AuthConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(config: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:61\n                \n            \n\n\n            \n                \n                    Sets configuration to be read by other consumers of the service (see usage notes)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The configuration to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        has_ssr\n                                \n                                \n                                        httpInterceptor\n                                \n                                \n                                            Optional\n                                        other_key\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        has_ssr\n                                    \n                                \n                                \n                                    \n                                        has_ssr:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpInterceptor\n                                    \n                                \n                                \n                                    \n                                        httpInterceptor:         HttpInterceptorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpInterceptorConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        other_key\n                                    \n                                \n                                \n                                    \n                                        other_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable {\n    return this.auth.observableAuthenticated();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthHttpInterceptor.html":{"url":"interceptors/AuthHttpInterceptor.html","title":"interceptor - AuthHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AuthConfig, cryptrClient: any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.interceptor.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { first } from 'rxjs/operators';\nimport { CryptrClientService } from './auth.client';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(CryptrClientService) private cryptrClient: any\n  ) { }\n\n  intercept(\n    req: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const aToken = this.cryptrClient.getCurrentAccessToken();\n    let finalReq = req;\n\n    if (this.config.httpInterceptor?.apiRequestsToSecure !== undefined && aToken !== undefined) {\n      this.config.httpInterceptor.apiRequestsToSecure.forEach(route => {\n        if (this.canAttachToken(route, req)) {\n\n          finalReq = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${aToken}`),\n          });\n        }\n      });\n    }\n    return next.handle(finalReq);\n  }\n\n  /**\n   * @ignore\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * @ignore\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * @ignore\n   */\n  private findMatchingRoute(\n    request: HttpRequest\n  ): Observable {\n    return from(this.config.httpInterceptor.apiRequestsToSecure).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.module.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService, AuthClientConfig } from './auth.config';\nimport { AuthGuard } from './auth.guard';\nimport { AccountAccessButtonComponent } from './account-access-button/account-access-button.component';\nimport { CommonModule } from '@angular/common';\nimport { CryptrClientFactory, CryptrClientService } from './auth.client';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AccountAccessButtonComponent],\n  exports: [AccountAccessButtonComponent],\n  bootstrap: [AccountAccessButtonComponent]\n})\nexport class AuthModule {\n  static forRoot(config?: AuthConfig): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        {\n          provide: AuthConfigService,\n          useValue: config,\n        },\n        {\n          provide: CryptrClientService,\n          useFactory: CryptrClientFactory.createClient,\n          deps: [AuthClientConfig],\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponseError.html":{"url":"interfaces/AuthResponseError.html","title":"interface - AuthResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                AuthService - Cryptr Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticationInProgress\n                            \n                            \n                                config\n                            \n                            \n                                currentAuthenticationObservable\n                            \n                            \n                                currentAuthenticationState\n                            \n                            \n                                getAccessToken\n                            \n                            \n                                getIdToken\n                            \n                            \n                                getObservableUser\n                            \n                            \n                                getUser\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                logOut\n                            \n                            \n                                observableAuthenticated\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signInWithRedirect\n                            \n                            \n                                signUpWithRedirect\n                            \n                            \n                                userAccountAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authenticationInProgress\n                        \n                        \n                    \n                \n            \n            \n                \nauthenticationInProgress()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:275\n                \n            \n\n\n            \n                \n                    Check if authentication check still in progress\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication progress state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:259\n                \n            \n\n\n            \n                \n                    Retrieve Cryptr current configuration\n\n\n                    \n                    \n                    \n                        Returns :         Config\n\n                    \n                    \n                        Current Cryptr configuration settings\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationObservable\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationObservable()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:316\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state as Observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        boolean observable of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationState\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationState()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:300\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:213\n                \n            \n\n\n            \n                \n                    Retrieve current stored access token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session access_token or undefined if no live session\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:221\n                \n            \n\n\n            \n                \n                    retrieve current stored id token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session id_token or undefined if no live session.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObservableUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetObservableUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:291\n                \n            \n\n\n            \n                \n                    Retrieve current user as observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Current user as Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:267\n                \n            \n\n\n            \n                \n                    Retrieve current user\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        User object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:205\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        authentication state in a Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: () => void, location: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:162\n                \n            \n\n\n            \n                \n                    Destroy current session with specific action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nAction to call at the end of logout process\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        window.location\n                                    \n\n                                    \n                                        \nDefault: window.location. Where to redirect after logout process\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        process logout of session with callback call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            observableAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nobservableAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:283\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:251\n                \n            \n\n\n            \n                \n                    Refresh current tokens.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:114\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signin process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign in process (whitespace separator)\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign in process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign in process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignInWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignInWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this signin redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:143\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signup process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign up process (whitespace separator).\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign up process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign up process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignUpWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignUpWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this sugnup redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:243\n                \n            \n\n\n            \n                \n                    Opens user account page.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise of retrieving/opening page\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\nimport { BehaviorSubject, combineLatest, from, Observable, Subject } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\nimport { Config, CryptrClient, Tokens } from './utils/types';\nimport { ActivatedRoute, Router, UrlTree } from '@angular/router';\nimport { CryptrClientService } from './auth.client';\nimport { filter, map } from 'rxjs/operators';\nimport { DEFAULT_SCOPE } from './utils/constants';\nimport { AuthClientConfig } from './auth.config';\n\n/**\n * AuthService - Cryptr Authentication Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnDestroy {\n  /**\n   * @ignore\n   */\n  private ngUnsubscribe$ = new Subject();\n  /**\n   * @ignore\n   */\n  private authenticated$ = new BehaviorSubject(false);\n  /**\n   * @ignore\n   */\n  private user$ = new BehaviorSubject(null);\n  /**\n   * @ignore\n   */\n  private isLoading$ = new BehaviorSubject(true);\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Inject(CryptrClientService) private cryptrClient: CryptrClient,\n    private location: Location,\n    private navigator: AbstractNavigator,\n    private router: Router,\n    private route: ActivatedRoute,\n    private configFactory: AuthClientConfig,\n  ) {\n    this.checkAuthentication();\n    window.addEventListener(CryptrSpa.events.REFRESH_INVALID_GRANT, (RigError) => {\n      this.logOut(null);\n    });\n    window.addEventListener(CryptrSpa.events.REFRESH_EXPIRED, (ReError) => {\n      this.logOut(null);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  private checkAuthentication(): void {\n    this.isAuthenticated().then(async (isAuthenticated: boolean) => {\n      this.updateCurrentAuthState(isAuthenticated);\n      this.resetAuthentication(isAuthenticated);\n      await this.authenticate();\n    }).catch((error) => {\n      console.error(error);\n      this.resetAuthentication(false);\n      this.isLoading$.next(false);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private resetAuthentication(isAuthenticated: boolean): void {\n    if (isAuthenticated) {\n      return;\n    }\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n  }\n\n  /**\n   * Performs redirection to Cryptr for signin process with chosen args\n   * @example\n   * Default usage\n   * signInWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signInWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign in process (whitespace separator)\n   * @param locale - Default: `config.default_locale` value. locale for this sign in process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign in process.\n   * @returns Observable of this signin redirection\n   */\n  signInWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    if (this.cryptrClient) {\n      return from(this.cryptrClient.signInWithRedirect(scope, redirectUri, locale));\n    }\n  }\n\n  /**\n   * Performs redirection to Cryptr for signup process with chosen args\n   * @example\n   * Default usage\n   * signUpWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signUpWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign up process (whitespace separator).\n   * @param locale - Default: `config.default_locale` value. locale for this sign up process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign up process.\n   * @returns Observable of this sugnup redirection\n   */\n  signUpWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    return from(this.cryptrClient.signUpWithRedirect(scope, redirectUri, locale));\n  }\n\n  /**\n   * @ignore\n   */\n  private preLogOutCallBack(callback: () => void): () => void {\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n    return callback;\n  }\n\n  /**\n   * Destroy current session with specific action\n   * @param callback - Action to call at the end of logout process\n   * @param location - **Default:** `window.location`. Where to redirect after logout process\n   * @returns process logout of session with callback call\n   */\n  logOut(callback: () => void, location: any = window.location): Observable {\n    return from(this.cryptrClient.logOut(this.preLogOutCallBack(callback), location));\n  }\n\n  /**\n   * @ignore\n   */\n  canHandleAuthentication(): boolean {\n    return this.cryptrClient.canHandleAuthentication();\n  }\n\n  /**\n   * @ignore\n   */\n  handleRedirectCallback(): Promise {\n    try {\n      return this.cryptrClient.handleRedirectCallback();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  handleTokens(tokens: Tokens): boolean {\n    // console.log('tokens');\n    // console.log(tokens);\n    const { valid, accessToken } = tokens;\n    this.updateCurrentAuthState(valid && accessToken !== undefined);\n    if (this.authenticated$.value) {\n      this.setUser(this.getClientUser());\n    } else {\n      console.error('handling tokens failed');\n      console.error(tokens);\n    }\n    return this.authenticated$.value;\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns authentication state in a Promise\n   */\n  isAuthenticated(): Promise {\n    return this.cryptrClient.isAuthenticated();\n  }\n\n  /**\n   * Retrieve current stored access token\n   * @returns Current session access_token or undefined if no live session\n   */\n  getAccessToken(): string | undefined {\n    return this.cryptrClient.getCurrentAccessToken();\n  }\n\n  /**\n   * retrieve current stored id token\n   * @returns Current session id_token or undefined if no live session.\n   */\n  getIdToken(): string | undefined {\n    return this.cryptrClient.getCurrentIdToken();\n  }\n\n  /**\n   * @ignore\n   */\n  private setUser(newUser: any): void {\n    this.user$.next(newUser);\n  }\n\n  /**\n   * @ignore\n   */\n  getClientUser(): any {\n    return this.cryptrClient.getUser();\n  }\n\n  /**\n   * Opens user account page.\n   * @returns Promise of retrieving/opening page\n   */\n  userAccountAccess(): Promise {\n    return this.cryptrClient.userAccountAccess();\n  }\n\n  /**\n   * Refresh current tokens.\n   * @returns void\n   */\n  refreshTokens(): void {\n    this.cryptrClient.handleRefreshTokens();\n  }\n\n  /**\n   * Retrieve Cryptr current configuration\n   * @returns Current Cryptr configuration settings\n   */\n  config(): Config {\n    return this.cryptrClient.config;\n  }\n\n  /**\n   * Retrieve current user\n   * @returns User object\n   */\n  getUser(): any {\n    return this.user$.value;\n  }\n\n  /**\n   * Check if authentication check still in progress\n   * @returns Boolean observable of authentication progress state\n   */\n  authenticationInProgress(): Observable {\n    return this.isLoading$.asObservable();\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns Boolean observable of authentication state\n   */\n  observableAuthenticated(): Observable {\n    return from(this.cryptrClient.isAuthenticated());\n  }\n\n  /**\n   * Retrieve current user as observable\n   * @returns Current user as Observable\n   */\n  getObservableUser(): Observable {\n    return this.user$.asObservable();\n  }\n\n\n  /**\n   * Retrieve current authentication state.\n   * @returns boolean of authentiation state\n   */\n  currentAuthenticationState(): boolean {\n    return this.authenticated$.value;\n  }\n\n  /**\n   * @ignore\n   */\n  private updateCurrentAuthState(newAuthenticated: boolean): void {\n    this.authenticated$.next(newAuthenticated);\n    this.setUser(this.getClientUser());\n  }\n\n  /**\n   * Retrieve current authentication state as Observable\n   * @returns boolean observable of authentiation state\n   */\n  currentAuthenticationObservable(): Observable {\n    return this.authenticated$.asObservable();\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanUrlTree(sourceUrlTree: UrlTree, stateUrl?: string): UrlTree {\n    try {\n      const path = !!stateUrl ? stateUrl.split('?')[0] : '';\n      const queryParams = sourceUrlTree.queryParams;\n      const { authorization_id, code, state, ...newParams } = queryParams;\n      return this.router.createUrlTree([path], { queryParams: newParams, fragment: sourceUrlTree.fragment });\n    } catch (error) {\n      return sourceUrlTree;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private routeCleanedPath(): string {\n    const path = this.location.path();\n    const currentUrlTree = this.router.parseUrl(path);\n    const newPath = this.cleanUrlTree(currentUrlTree, path).toString();\n    return !!newPath ? newPath : '/';\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanRouteState(): void {\n    setTimeout(() => {\n      this.location.replaceState(this.routeCleanedPath(), '');\n    }, 2);\n  }\n\n  /**\n   * @ignore\n   */\n  private async authenticate(): Promise {\n    if (this.authenticated$.value) {\n      this.isLoading$.next(false);\n      return;\n    }\n    this.resetAuthentication(false);\n    if (this.canHandleAuthentication()) {\n      return this.handleRedirectCallback().then((tokens) => {\n        const handled = this.handleTokens(tokens);\n        this.updateCurrentAuthState(handled);\n        if (handled) {\n          this.cleanRouteState();\n          this.isLoading$.next(false);\n        } else {\n          this.isLoading$.next(false);\n        }\n        return handled;\n      }).catch((error) => {\n        return false;\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n      // TODO: handle invitation process\n      // } else if (this.cryptrClient.canHandleInvitation()) {\n      //   console.log('can handle invite')\n    } else {\n      await this.cryptrClient.handleRefreshTokens();\n      this.isAuthenticated().then((isAuthenticated) => {\n        this.updateCurrentAuthState(isAuthenticated);\n      }).catch((err) => {\n        this.updateCurrentAuthState(false);\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private defaultAuthenticationCallback(isAuthenticated: boolean, stateUrl?: string): boolean {\n    const { audience, default_locale } = this.config();\n    const redirectUri = audience.concat(stateUrl || '');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      if (this.configFactory.get().has_ssr) {\n        this.signInWithRedirect(DEFAULT_SCOPE, default_locale, redirectUri);\n      } else {\n        this.signInWithRedirect();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  fullAuthenticateProcess(\n    stateUrl?: string,\n    callback?: (isAuthenticated: boolean, stateUrl?: string) => boolean\n  ): Observable {\n    return combineLatest(\n      [this.isLoading$, this.authenticated$]\n    ).pipe(\n      filter(([isLoading, isAuthenticated]) => {\n        return !isLoading;\n      }),\n      map(([isLoading, isAuthenticated]) => {\n        if (callback) {\n          return callback(isAuthenticated, stateUrl);\n        } else {\n          return this.defaultAuthenticationCallback(isAuthenticated, stateUrl);\n        }\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authorization.html":{"url":"interfaces/Authorization.html","title":"interface - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                            Optional\n                                        telemetry\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telemetry\n                                    \n                                \n                                \n                                    \n                                        telemetry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptrClient.html":{"url":"interfaces/CryptrClient.html","title":"interface - CryptrClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CryptrClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canHandleAuthentication\n                                \n                                \n                                    canHandleInvitation\n                                \n                                \n                                    canRefresh\n                                \n                                \n                                    decoratedRequest\n                                \n                                \n                                    finalScope\n                                \n                                \n                                    getClaimsFromAccess\n                                \n                                \n                                    getCurrentAccessToken\n                                \n                                \n                                    getCurrentIdToken\n                                \n                                \n                                    getRefreshStore\n                                \n                                \n                                    getUser\n                                \n                                \n                                    handleInvitationState\n                                \n                                \n                                    handleNewTokens\n                                \n                                \n                                    handleRedirectCallback\n                                \n                                \n                                    handleRefreshTokens\n                                \n                                \n                                    handleTokensErrors\n                                \n                                \n                                    inviteWithoutRedirect\n                                \n                                \n                                    inviteWithRedirect\n                                \n                                \n                                    isAuthenticated\n                                \n                                \n                                    logOut\n                                \n                                \n                                    recurringRefreshToken\n                                \n                                \n                                    signInWithoutRedirect\n                                \n                                \n                                    signInWithRedirect\n                                \n                                \n                                    signUpWithoutRedirect\n                                \n                                \n                                    signUpWithRedirect\n                                \n                                \n                                    userAccountAccess\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleInvitation\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleInvitation(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canRefresh\n                        \n                        \n                    \n                \n            \n            \n                \ncanRefresh(refreshStore: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decoratedRequest\n                        \n                        \n                    \n                \n            \n            \n                \ndecoratedRequest(axiosRequestConfig: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    axiosRequestConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalScope\n                        \n                        \n                    \n                \n            \n            \n                \nfinalScope(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClaimsFromAccess\n                        \n                        \n                    \n                \n            \n            \n                \ngetClaimsFromAccess(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     object | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRefreshStore\n                        \n                        \n                    \n                \n            \n            \n                \ngetRefreshStore()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         RefreshStore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     object | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInvitationState\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInvitationState(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleNewTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleNewTokens(refreshStore: RefreshStore, tokens?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokens\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRefreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokensErrors\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokensErrors(errors: TokenError[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                TokenError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: any, location?: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recurringRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \nrecurringRefreshToken(refreshTokenWrapper: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenWrapper\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorConfig.html":{"url":"interfaces/HttpInterceptorConfig.html","title":"interface - HttpInterceptorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        apiRequestsToSecure\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiRequestsToSecure\n                                    \n                                \n                                \n                                    \n                                        apiRequestsToSecure:         ApiRouteDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiRouteDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorRouteConfig.html":{"url":"interfaces/HttpInterceptorRouteConfig.html","title":"interface - HttpInterceptorRouteConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorRouteConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        httpMethod\n                                \n                                \n                                            Optional\n                                        tokenOptions\n                                \n                                \n                                        uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpMethod\n                                    \n                                \n                                \n                                    \n                                        httpMethod:         HttpMethod | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenOptions\n                                    \n                                \n                                \n                                    \n                                        tokenOptions:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshStore.html":{"url":"interfaces/RefreshStore.html","title":"interface - RefreshStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_expiration_date\n                                \n                                \n                                        refresh_expiration_date\n                                \n                                \n                                        refresh_leeway\n                                \n                                \n                                        refresh_retry\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_expiration_date\n                                    \n                                \n                                \n                                    \n                                        access_token_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_expiration_date\n                                    \n                                \n                                \n                                    \n                                        refresh_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_leeway\n                                    \n                                \n                                \n                                    \n                                        refresh_leeway:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_retry\n                                    \n                                \n                                \n                                    \n                                        refresh_retry:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenError.html":{"url":"interfaces/TokenError.html","title":"interface - TokenError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        error_description\n                                \n                                \n                                        http_response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error_description\n                                    \n                                \n                                \n                                    \n                                        error_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http_response\n                                    \n                                \n                                \n                                    \n                                        http_response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accessToken\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/abstract-navigator.ts\n            \n            injectable\n            AbstractNavigator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/account-access-button/account-access-button.component.ts\n            \n            component\n            AccountAccessButtonComponent\n            \n                0 %\n                (0/57)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            injectable\n            AuthClientConfig\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorRouteConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            function\n            isHttpInterceptorRouteConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            variable\n            AuthConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/auth.interceptor.ts\n            \n            interceptor\n            AuthHttpInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            BADGE_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            DEFAULT_SCOPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            ERROR_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            LOG_OUT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            SIGN_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_CLOSED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_OPENED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            USER_ACCOUNT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/enums.ts\n            \n            variable\n            LocalizedStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Authorization\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            AuthResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            CryptrClient\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            RefreshStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            TokenError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            function\n            windowProvider\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            variable\n            WindowService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @cryptr/cryptr-spa-js : ^0.1.10\n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9 \n        \n            @angular/core : >=9 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../auth.config.ts)\n                        \n                        \n                            Sign   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                    \n                        \n                            Defines a common set of HTTP methods.\n\n                        \n                    \n                        \n                            \n                                 Get\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 Put\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 Patch\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 Head\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n            \n        \n\n    src/lib/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Sign\n                    \n                \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : invite\n                            \n                        \n                        \n                            \n                                 In\n                            \n                        \n                        \n                            \n                                Value : signin\n                            \n                        \n                        \n                            \n                                 Up\n                            \n                        \n                        \n                            \n                                Value : signup\n                            \n                        \n                        \n                            \n                                 Refresh\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isHttpInterceptorRouteConfig   (src/.../auth.config.ts)\n                        \n                        \n                            windowProvider   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isHttpInterceptorRouteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nisHttpInterceptorRouteConfig(def)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpInterceptorRouteConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/window.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            windowProvider\n                        \n                        \n                    \n                \n            \n            \n                \nwindowProvider()\n                \n            \n\n\n\n\n            \n                \n                    Default window provider. Provides the actual window object.\n\n\n                    \n                        Returns :     Window\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nStatements\nBranches\nFunctions\nLines\n\n\n\n\n\n\n\n\n\n\n\nCryptrAngular\nFor more See our related live Doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiRouteDefinition   (src/.../auth.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n    \n        \n            \n                \n                    \n                    ApiRouteDefinition\n                \n            \n            \n                \n                        HttpInterceptorRouteConfig | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfigService   (src/.../auth.config.ts)\n                        \n                        \n                            BADGE_CLASS   (src/.../constants.ts)\n                        \n                        \n                            DEFAULT_SCOPE   (src/.../constants.ts)\n                        \n                        \n                            ERROR_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            LocalizedStrings   (src/.../enums.ts)\n                        \n                        \n                            LOG_OUT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            SIGN_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_CLOSED   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_OPENED   (src/.../constants.ts)\n                        \n                        \n                            USER_ACCOUNT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            WindowService   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\n  'cryptr-angular.config'\n)\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BADGE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'uppercase rounded-full h-6 w-6 flex items-center justify-center bg-blue-500 text-xs text-white'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SCOPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'openid email profile'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-red-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_OUT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-yellow-500 bg-white hover:text-yellow-400 focus:outline-none focus:border-yellow-300 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SIGN_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-yellow-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_CLOSED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 transition ease-in-out duration-150 focus:outline-none'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_OPENED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 focus:outline-none focus:bg-gray-200 focus:shadow-none transition ease-in-out duration-150'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_ACCOUNT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer mt-2 w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-white bg-yellow-500 hover:bg-yellow-400 focus:outline-none focus:border-yellow-600 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/enums.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LocalizedStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  fr: {\n    signin: 'Connexion',\n    signup: 'Inscription',\n    logOut: 'Déconnexion',\n    manageAccount: 'Mon Compte'\n  },\n  en: {\n    signin: 'Sign In',\n    signup: 'Sign Up',\n    logOut: 'Log out',\n    manageAccount: 'Manage my account'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/window.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WindowService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('Browser window')\n                        \n                    \n\n                \n                    \n                        Injection token for providing an instance of window\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
