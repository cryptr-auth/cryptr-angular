var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractNavigator.html",[0,0.841,1,1.906]],["body/injectables/AbstractNavigator.html",[0,1.213,1,2.75,2,2.089,3,0.474,4,0.474,5,0.413,6,4.316,7,2.761,8,0.25,9,1.097,10,2.215,11,4.921,12,4.764,13,1.213,14,4.402,15,1.86,16,3.344,17,1.87,18,5.687,19,2.004,20,4.402,21,1.626,22,0.039,23,1.626,24,0.444,25,0.99,26,4.402,27,0.79,28,3.344,29,4.402,30,3.634,31,3.964,32,4.402,33,3.634,34,4.402,35,4.402,36,4.402,37,4.402,38,4.402,39,2.376,40,4.402,41,1.235,42,0.99,43,1.649,44,1.017,45,2.376,46,2.089,47,1.505,48,1.505,49,0.474,50,0.834,51,2.761,52,2.376,53,4.402,54,3.344,55,2.376,56,1.505,57,2.761,58,3.344,59,2.376,60,1.121,61,3.344,62,0.021,63,0.027,64,0.021]],["title/injectables/AuthClientConfig.html",[0,0.841,65,1.127]],["body/injectables/AuthClientConfig.html",[0,1.081,2,1.763,3,0.4,4,0.4,5,0.349,8,0.211,9,0.978,10,2.031,13,1.243,15,1.569,19,1.986,21,1.449,22,0.039,23,1.449,24,0.44,25,1.014,27,0.926,39,2.005,41,1.449,42,0.882,43,0.946,44,0.858,47,1.27,48,1.27,49,0.786,50,0.703,56,1.27,60,1.315,62,0.017,63,0.024,64,0.017,65,1.449,66,1.042,67,0.817,68,3.026,69,2.33,70,2.349,71,3.924,72,1.763,73,2.822,74,2.451,75,3.046,76,3.046,77,2.451,78,2.822,79,2.451,80,2.712,81,2.451,82,2.182,83,2.182,84,2.451,85,1.408,86,1.958,87,1.569,88,1.569,89,1.569,90,1.766,91,0.778,92,2.509,93,2.182,94,2.182,95,2.182,96,2.182,97,2.182,98,2.251,99,1.666,100,1.408,101,1.27,102,2.509,103,1.763,104,0.57,105,0.206,106,1.958,107,1.569,108,1.408,109,1.763,110,0.778,111,0.778,112,0.703,113,0.778,114,0.778,115,0.703,116,0.778,117,1.408,118,1.763,119,0.635,120,1.763,121,1.763,122,1.569,123,1.763,124,2.182,125,1.15,126,1.15,127,1.408,128,1.569]],["title/interfaces/AuthConfig.html",[70,1.243,105,0.139]],["body/interfaces/AuthConfig.html",[0,1.057,3,0.387,4,0.387,5,0.338,8,0.204,9,0.956,10,1.23,13,0.753,22,0.039,24,0.517,25,1.289,27,0.985,42,0.614,43,0.916,44,0.831,47,1.23,48,1.23,49,0.78,50,0.681,56,1.23,60,1.286,62,0.017,63,0.024,64,0.017,65,1.009,66,1.009,67,0.744,68,2.465,70,2.139,74,1.707,75,2.396,76,2.396,77,1.707,79,1.707,80,2.133,81,1.707,82,1.519,83,1.519,84,1.707,85,1.363,86,1.914,87,1.519,88,1.519,89,1.519,90,1.727,91,0.753,92,2.465,93,2.133,94,2.133,95,2.133,96,2.133,97,2.133,98,2.212,99,1.637,100,1.363,101,1.23,102,2.465,103,1.707,104,0.552,105,0.202,106,2.399,107,1.519,108,1.363,109,1.707,110,1.325,111,1.325,112,1.198,113,1.325,114,1.325,115,1.198,116,1.325,117,2.399,118,3.003,119,0.997,120,3.003,121,1.707,122,1.519,123,1.707,124,2.133,125,1.113,126,1.113,127,1.363,128,1.519,129,0.753]],["title/guards/AuthGuard.html",[130,2.168,131,1.697]],["body/guards/AuthGuard.html",[0,1.205,3,0.469,4,0.469,5,0.409,8,0.247,13,1.205,15,1.841,19,2.121,21,1.924,22,0.038,23,1.924,24,0.47,25,1.171,41,1.808,43,1.745,44,1.006,45,2.352,47,1.49,48,1.49,49,0.469,50,0.825,51,2.733,60,1.641,62,0.02,63,0.027,64,0.02,131,2.431,132,3.31,133,2.733,134,4.47,135,5.415,136,5.208,137,3.31,138,2.896,139,3.31,140,4.373,141,3.31,142,5.673,143,4.592,144,5.673,145,3.31,146,3.609,147,4.031,148,3.31,149,3.31,150,4.373,151,4.373,152,3.848,153,4.896,154,5.208,155,3.31,156,2.733,157,2.352,158,2.733,159,2.352,160,3.31,161,4.373]],["title/interceptors/AuthHttpInterceptor.html",[162,2.519,163,2.168]],["body/interceptors/AuthHttpInterceptor.html",[0,1.015,3,0.365,4,0.365,5,0.319,8,0.193,10,2.388,13,1.015,15,2.049,19,1.75,21,1.587,22,0.039,23,1.587,24,0.388,25,0.966,27,0.69,31,1.833,41,1.361,43,1.727,44,0.785,49,0.365,50,0.643,56,1.161,60,1.85,62,0.016,63,0.023,64,0.016,67,0.522,69,2.13,70,1.909,85,1.288,90,1.934,98,2.339,99,0.953,101,1.161,104,0.744,108,2.144,117,1.838,119,0.828,122,1.435,125,1.051,146,3.547,147,3.33,152,2.618,157,1.833,159,1.833,163,2.618,164,2.58,165,2.13,166,4.297,167,4.297,168,1.184,169,2.58,170,2.58,171,4.957,172,5.425,173,2.58,174,2.58,175,4.687,176,2.58,177,4.687,178,2.58,179,2.58,180,2.58,181,1.612,182,2.58,183,2.13,184,1.288,185,1.833,186,2.13,187,4.297,188,2.13,189,3.684,190,2.58,191,2.58,192,3.684,193,2.58,194,2.58,195,2.58,196,2.58,197,2.58,198,3.547,199,2.58,200,4.687,201,3.33,202,3.684,203,2.58,204,2.928,205,2.58,206,3.041,207,3.684,208,2.58,209,3.041,210,2.58,211,2.58,212,2.58,213,2.58,214,2.58,215,2.58,216,3.684,217,2.58,218,2.58,219,3.684,220,2.58,221,2.58,222,2.58,223,2.58,224,2.58,225,2.58,226,0.953]],["title/modules/AuthModule.html",[227,2.168,228,1.906]],["body/modules/AuthModule.html",[3,0.476,4,0.476,5,0.415,13,0.925,19,1.368,21,1.24,22,0.039,23,1.24,24,0.303,25,0.755,41,1.24,43,1.908,44,1.021,46,2.098,49,0.476,50,0.837,60,1.125,62,0.021,63,0.027,64,0.021,65,1.63,67,0.625,70,2.133,72,2.098,125,1.798,131,2.455,138,2.455,158,2.772,181,2.098,184,2.203,185,2.386,227,2.386,228,3.65,229,2.386,230,2.098,231,2.772,232,4.07,233,4.07,234,3.644,235,4.07,236,2.772,237,2.772,238,2.772,239,4.327,240,3.644,241,2.772,242,2.386,243,3.358,244,3.644,245,3.358,246,4.414,247,3.358,248,4.931,249,4.931,250,3.358,251,2.772,252,3.644,253,2.772,254,3.358,255,4.414,256,2.098,257,3.358,258,4.414,259,3.358,260,3.358,261,3.358,262,3.358]],["title/interfaces/AuthResponseError.html",[105,0.139,263,1.023]],["body/interfaces/AuthResponseError.html",[3,0.41,4,0.41,5,0.358,8,0.217,9,0.996,17,1.339,22,0.038,24,0.361,27,1.007,42,0.899,49,0.803,62,0.018,63,0.025,64,0.018,67,0.648,91,0.798,104,0.997,105,0.255,110,0.798,111,0.798,112,0.722,113,0.798,114,0.798,115,0.722,116,0.798,119,1.203,129,0.798,168,0.798,226,1.07,263,1.339,264,0.971,265,2.009,266,2.009,267,0.881,268,1.339,269,0.971,270,0.971,271,0.971,272,1.476,273,0.971,274,1.18,275,1.07,276,1.215,277,1.07,278,1.07,279,1.18,280,1.339,281,1.18,282,0.971,283,1.18,284,1.734,285,1.18,286,1.18,287,2.009,288,1.18,289,1.18,290,1.18,291,1.18,292,1.18,293,1.07,294,2.158,295,1.18,296,1.18,297,1.976,298,1.976,299,1.18,300,1.18,301,1.07,302,1.07,303,1.18,304,1.18,305,1.18,306,1.18,307,1.07,308,1.18,309,1.18,310,1.18,311,1.18,312,1.07,313,1.339,314,1.18,315,1.18,316,1.18,317,1.07,318,1.07,319,1.18,320,0.881,321,0.971]],["title/injectables/AuthService.html",[0,0.841,138,1.697]],["body/injectables/AuthService.html",[0,0.53,1,1.851,2,0.706,3,0.16,4,0.16,5,0.14,8,0.085,10,2.241,12,3.182,13,0.53,15,1.07,17,1.513,19,2.208,21,1.424,22,0.039,23,1.424,24,0.348,25,0.867,27,0.876,39,0.804,41,2.002,42,1.135,43,1.513,44,0.344,45,0.804,46,0.706,47,0.509,48,0.509,49,0.16,50,0.282,52,1.367,55,1.367,56,1.13,57,0.934,60,1.889,62,0.007,63,0.012,64,0.007,65,1.094,67,0.546,72,2.257,83,2.257,85,0.564,90,1.972,100,0.96,104,0.229,108,0.96,112,0.282,115,0.48,119,1.103,124,0.629,126,1.207,127,0.96,138,1.07,143,0.934,147,3.537,152,1.784,156,2.073,157,0.804,159,0.804,168,0.996,181,0.706,183,0.934,184,0.564,185,0.804,186,0.934,188,0.934,198,3.726,204,2.075,206,1.588,209,0.934,267,1.234,268,0.379,275,0.418,276,1.172,277,0.418,278,0.711,282,0.645,293,1.667,294,1.499,297,1.667,298,1.811,301,0.711,302,0.711,307,1.094,312,1.094,317,1.094,318,0.711,320,0.344,321,0.841,322,0.934,323,2.511,324,2.963,325,2.963,326,2.446,327,2.963,328,2.963,329,2.963,330,2.963,331,2.963,332,2.963,333,2.963,334,1.924,335,1.367,336,2.963,337,2.963,338,1.924,339,2.963,340,1.924,341,2.446,342,1.588,343,1.131,344,2.963,345,2.963,346,2.073,347,1.131,348,1.131,349,1.131,350,1.131,351,1.131,352,1.131,353,1.131,354,1.131,355,1.131,356,1.131,357,1.131,358,1.131,359,1.131,360,1.131,361,1.924,362,1.131,363,1.131,364,1.131,365,2.739,366,2.742,367,1.924,368,1.131,369,1.131,370,1.924,371,1.131,372,1.131,373,1.924,374,1.131,375,1.131,376,2.742,377,3.617,378,3.35,379,1.924,380,1.924,381,3.855,382,1.924,383,1.924,384,1.924,385,1.924,386,1.924,387,1.924,388,3.321,389,3.613,390,2.511,391,1.131,392,1.924,393,1.131,394,1.131,395,1.131,396,1.924,397,1.924,398,1.131,399,1.131,400,1.924,401,0.934,402,0.804,403,0.804,404,0.804,405,1.131,406,1.924,407,1.924,408,1.131,409,1.131,410,1.131,411,1.131,412,0.804,413,1.131,414,1.131,415,1.131,416,1.131,417,1.131,418,1.924,419,1.131,420,1.131,421,1.131,422,1.131,423,1.924,424,1.131,425,1.131,426,1.131,427,1.131,428,1.131,429,1.924,430,1.131,431,1.924,432,1.131,433,1.924,434,1.588,435,1.924,436,3.613,437,2.511,438,1.924,439,2.511,440,1.131,441,0.934,442,0.934,443,1.131,444,1.131,445,1.131,446,1.131,447,1.131,448,1.131,449,1.131,450,1.131,451,1.131,452,1.131,453,2.963,454,1.924,455,1.131,456,1.131,457,1.131,458,1.131,459,1.131,460,1.131,461,1.131,462,1.131,463,1.131,464,1.924,465,1.131,466,1.131,467,1.131,468,1.131,469,1.131,470,1.131,471,1.131,472,1.131,473,1.131,474,3.855,475,1.924,476,1.131,477,2.511,478,1.131,479,1.131,480,1.924,481,1.131,482,1.131,483,1.131,484,1.131,485,1.131,486,1.131,487,1.131,488,1.131,489,2.511,490,1.131,491,1.131,492,1.131,493,1.131,494,0.934,495,1.131,496,1.131,497,2.511,498,1.131,499,1.131,500,1.131,501,1.924,502,1.131,503,1.924,504,1.131,505,1.131,506,1.131,507,1.131,508,1.131,509,1.131,510,1.131,511,1.131,512,1.131,513,1.131,514,1.131,515,1.131,516,1.131,517,1.131,518,1.131,519,1.131,520,1.131,521,1.131]],["title/interfaces/Authorization.html",[105,0.139,273,1.023]],["body/interfaces/Authorization.html",[3,0.41,4,0.41,5,0.358,8,0.217,9,0.996,17,1.339,22,0.038,24,0.361,27,1.007,42,0.899,49,0.803,62,0.018,63,0.025,64,0.018,67,0.648,91,0.798,104,0.997,105,0.255,110,0.798,111,0.798,112,0.722,113,0.798,114,0.798,115,0.722,116,0.798,119,1.203,129,0.798,168,0.798,226,1.07,263,0.971,264,0.971,265,1.18,266,1.18,267,0.881,268,1.339,269,0.971,270,0.971,271,0.971,272,1.476,273,1.339,274,2.009,275,1.821,276,1.215,277,1.07,278,1.07,279,1.18,280,1.339,281,1.18,282,0.971,283,1.18,284,1.734,285,1.18,286,1.18,287,2.009,288,1.18,289,1.18,290,1.18,291,1.18,292,1.18,293,1.07,294,2.158,295,1.18,296,1.18,297,1.976,298,1.976,299,1.18,300,1.18,301,1.07,302,1.07,303,1.18,304,1.18,305,1.18,306,1.18,307,1.07,308,1.18,309,1.18,310,1.18,311,1.18,312,1.07,313,1.339,314,1.18,315,1.18,316,1.18,317,1.07,318,1.07,319,1.18,320,0.881,321,0.971]],["title/interfaces/Config.html",[67,0.432,105,0.139]],["body/interfaces/Config.html",[3,0.377,4,0.377,5,0.329,8,0.199,9,0.939,17,1.262,22,0.038,24,0.494,25,1.229,27,1.008,42,0.847,49,0.788,62,0.016,63,0.023,64,0.016,67,0.673,91,0.733,104,0.96,105,0.249,110,1.309,111,1.309,112,1.184,113,1.309,114,1.309,115,1.184,116,1.309,119,1.229,129,0.733,168,0.733,226,0.983,263,0.892,264,0.892,265,1.084,266,1.084,267,0.809,268,1.262,269,0.892,270,0.892,271,0.892,272,1.391,273,0.892,274,1.084,275,0.983,276,1.145,277,0.983,278,0.983,279,1.936,280,1.262,281,1.084,282,0.892,283,1.084,284,1.681,285,1.084,286,1.084,287,1.936,288,1.084,289,1.084,290,1.084,291,1.084,292,1.084,293,0.983,294,2.126,295,1.084,296,1.084,297,1.923,298,1.923,299,1.084,300,1.084,301,0.983,302,0.983,303,1.084,304,1.084,305,1.084,306,1.084,307,0.983,308,1.084,309,1.084,310,1.084,311,1.084,312,0.983,313,1.262,314,1.084,315,1.084,316,1.084,317,0.983,318,0.983,319,1.084,320,0.809,321,0.892]],["title/interfaces/CryptrClient.html",[105,0.139,168,0.841]],["body/interfaces/CryptrClient.html",[3,0.237,4,0.237,5,0.207,8,0.125,9,0.661,13,0.731,17,1.462,19,2.354,21,2.036,22,0.038,23,2.036,24,0.502,25,1.24,27,1.003,41,2.134,42,0.845,49,0.692,62,0.01,63,0.016,64,0.01,67,0.672,72,3.595,91,0.461,104,0.924,105,0.217,110,0.461,111,0.461,112,0.417,113,0.461,114,0.461,115,0.417,116,0.461,119,1.126,129,0.461,168,0.731,226,0.98,263,0.56,264,0.56,265,0.681,266,0.681,267,0.508,268,0.889,269,0.56,270,0.56,271,0.56,272,0.98,273,0.56,274,0.681,275,0.617,276,1.143,277,0.617,278,0.98,279,0.681,280,1.26,281,0.681,282,0.56,283,0.681,284,1.793,285,0.681,286,0.681,287,1.531,288,0.681,289,0.681,290,0.681,291,1.531,292,1.531,293,1.388,294,2.125,295,1.081,296,1.081,297,2.053,298,2.053,299,1.081,300,1.081,301,0.98,302,0.98,303,1.081,304,1.081,305,1.081,306,1.081,307,1.388,308,1.081,309,1.531,310,1.531,311,1.081,312,1.388,313,1.26,314,1.081,315,1.081,316,1.081,317,1.388,318,0.98,319,1.081,320,0.508,321,0.56,326,2.191,335,1.885,341,2.191,342,2.191,366,1.38,376,3.918,522,2.654,523,2.654,524,2.654,525,2.654,526,2.654,527,2.654,528,2.654,529,2.654,530,2.654,531,2.654,532,2.654,533,2.654,534,2.654,535,1.671,536,2.654,537,1.671,538,1.671,539,1.671,540,1.671,541,1.671,542,1.671,543,1.671,544,1.671,545,1.671,546,1.671,547,1.671,548,1.671,549,1.671,550,1.671,551,1.671,552,1.671,553,1.671,554,1.671,555,1.671,556,1.671,557,1.671,558,1.671,559,1.671,560,1.671,561,1.671,562,1.671,563,1.671]],["title/classes/CryptrClientFactory.html",[50,0.761,256,1.906]],["body/classes/CryptrClientFactory.html",[3,0.499,4,0.499,5,0.436,8,0.263,13,1.255,19,1.436,21,1.302,22,0.039,23,1.302,24,0.318,25,0.793,30,2.91,31,2.505,33,2.91,41,1.302,43,1.692,44,1.072,49,0.645,50,0.879,52,2.505,55,2.505,59,2.505,60,1.181,62,0.022,63,0.028,64,0.022,65,1.971,67,0.715,80,1.96,86,1.759,90,2.272,104,0.712,107,2.534,117,1.759,126,2.174,131,1.96,134,2.91,181,2.202,184,1.759,244,4.167,256,2.846,282,1.788,346,2.91,401,2.91,402,2.505,403,2.505,404,2.505,434,2.91,564,3.525,565,2.505,566,4.556,567,4.556,568,3.525,569,3.525,570,4.556,571,4.556,572,3.525,573,3.525,574,3.525,575,3.525,576,3.525,577,3.525,578,3.525,579,3.525,580,3.525,581,3.525,582,3.525,583,3.525,584,3.525,585,3.525,586,3.525,587,3.525,588,2.91]],["title/interfaces/HttpInterceptorConfig.html",[105,0.139,106,1.523]],["body/interfaces/HttpInterceptorConfig.html",[0,1.157,3,0.441,4,0.441,5,0.385,8,0.233,9,1.046,10,1.402,13,0.858,22,0.039,24,0.379,25,0.7,27,0.943,42,0.7,43,1.044,44,0.947,47,1.402,48,1.402,49,0.804,50,0.776,56,1.402,60,1.407,62,0.019,63,0.026,64,0.019,65,1.15,66,1.15,67,0.774,68,2.641,70,2.161,74,1.945,75,2.622,76,2.622,77,1.945,79,1.945,80,2.334,81,1.945,82,1.732,83,1.732,84,1.945,85,1.554,86,2.095,87,1.732,88,1.732,89,1.732,90,1.889,91,0.858,92,2.641,93,2.334,94,2.334,95,2.334,96,2.334,97,2.334,98,2.647,99,1.754,100,1.554,101,1.402,102,2.641,103,1.945,104,0.629,105,0.217,106,2.37,107,2.826,108,1.554,109,1.945,110,0.858,111,0.858,112,0.776,113,0.858,114,0.858,115,0.776,116,0.858,117,1.554,118,1.945,119,0.7,120,1.945,121,1.945,122,1.732,123,1.945,124,2.334,125,1.268,126,1.268,127,1.554,128,1.732,129,0.858]],["title/interfaces/HttpInterceptorRouteConfig.html",[99,1.127,105,0.139]],["body/interfaces/HttpInterceptorRouteConfig.html",[0,1.128,3,0.425,4,0.425,5,0.371,8,0.224,9,1.02,10,1.35,13,0.826,22,0.039,24,0.452,25,1.178,27,0.961,42,0.674,43,1.005,44,0.912,47,1.35,48,1.35,49,0.797,50,0.748,56,1.35,60,1.371,62,0.018,63,0.025,64,0.018,65,1.108,66,1.108,67,0.765,68,2.59,70,2.133,74,1.873,75,2.556,76,2.556,77,1.873,79,1.873,80,2.275,81,1.873,82,1.668,83,1.668,84,1.873,85,1.496,86,2.042,87,1.668,88,1.668,89,1.668,90,1.842,91,0.826,92,3.131,93,2.275,94,2.275,95,2.275,96,2.275,97,2.275,98,2.324,99,1.848,100,1.496,101,1.35,102,2.59,103,1.873,104,0.606,105,0.213,106,2.042,107,1.668,108,2.497,109,3.126,110,0.826,111,0.826,112,0.748,113,0.826,114,0.826,115,0.748,116,0.826,117,1.496,118,1.873,119,0.674,120,1.873,121,1.873,122,1.668,123,1.873,124,2.275,125,1.222,126,1.222,127,1.496,128,1.668,129,0.826]],["title/interfaces/RefreshStore.html",[105,0.139,284,1.023]],["body/interfaces/RefreshStore.html",[3,0.396,4,0.396,5,0.345,8,0.209,9,0.971,17,1.306,22,0.038,24,0.461,27,1.004,42,0.876,49,0.796,62,0.017,63,0.024,64,0.017,67,0.635,91,0.77,104,0.981,105,0.253,110,0.77,111,0.77,112,0.696,113,0.77,114,0.77,115,0.696,116,0.77,119,1.189,129,0.77,168,0.77,226,1.032,263,0.936,264,0.936,265,1.138,266,1.138,267,0.849,268,1.306,269,0.936,270,0.936,271,0.936,272,1.439,273,0.936,274,1.138,275,1.032,276,1.185,277,1.032,278,1.032,279,1.138,280,1.306,281,1.138,282,0.936,283,1.138,284,1.772,285,1.977,286,1.977,287,2.365,288,1.977,289,1.977,290,1.977,291,1.138,292,1.138,293,1.032,294,2.145,295,1.138,296,1.138,297,1.953,298,1.953,299,1.138,300,1.138,301,1.032,302,1.032,303,1.138,304,1.138,305,1.138,306,1.138,307,1.032,308,1.138,309,1.138,310,1.138,311,1.138,312,1.032,313,1.306,314,1.138,315,1.138,316,1.138,317,1.032,318,1.032,319,1.138,320,0.849,321,0.936]],["title/interfaces/TokenError.html",[105,0.139,280,1.023]],["body/interfaces/TokenError.html",[3,0.407,4,0.407,5,0.355,8,0.215,9,0.99,17,1.331,22,0.038,24,0.411,27,1.007,42,0.893,49,0.801,62,0.018,63,0.024,64,0.018,67,0.645,91,0.791,104,0.993,105,0.254,110,0.791,111,0.791,112,0.716,113,0.791,114,0.791,115,0.716,116,0.791,119,1.199,129,0.791,168,0.791,226,1.061,263,0.962,264,0.962,265,1.17,266,1.17,267,0.873,268,1.331,269,0.962,270,0.962,271,0.962,272,1.467,273,0.962,274,1.17,275,1.061,276,1.208,277,1.061,278,1.061,279,1.17,280,1.526,281,2.001,282,1.647,283,2.001,284,1.728,285,1.17,286,1.17,287,2.001,288,1.17,289,1.17,290,1.17,291,1.17,292,1.17,293,1.061,294,2.155,295,1.17,296,1.17,297,1.97,298,1.97,299,1.17,300,1.17,301,1.061,302,1.061,303,1.17,304,1.17,305,1.17,306,1.17,307,1.061,308,1.17,309,1.17,310,1.17,311,1.17,312,1.061,313,1.331,314,1.17,315,1.17,316,1.17,317,1.061,318,1.061,319,1.17,320,0.873,321,0.962]],["title/interfaces/Tokens.html",[105,0.139,276,0.928]],["body/interfaces/Tokens.html",[3,0.409,4,0.409,5,0.357,8,0.216,9,0.994,17,1.336,22,0.038,24,0.36,25,0.896,27,1.006,42,0.896,49,0.802,62,0.018,63,0.025,64,0.018,67,0.647,91,0.796,104,0.995,105,0.255,110,0.796,111,0.796,112,0.72,113,0.796,114,0.796,115,0.72,116,0.796,119,1.255,129,0.796,168,0.796,226,1.066,263,0.968,264,0.968,265,1.176,266,1.176,267,0.878,268,1.336,269,0.968,270,0.968,271,0.968,272,1.472,273,0.968,274,1.176,275,1.066,276,1.388,277,1.819,278,1.819,279,1.176,280,1.336,281,1.176,282,0.968,283,1.176,284,1.732,285,1.176,286,1.176,287,2.006,288,1.176,289,1.176,290,1.176,291,1.176,292,1.176,293,1.066,294,2.157,295,1.176,296,1.176,297,1.973,298,1.973,299,1.176,300,1.176,301,1.066,302,1.066,303,1.176,304,1.176,305,1.176,306,1.176,307,1.066,308,1.176,309,1.176,310,1.176,311,1.176,312,1.066,313,1.336,314,1.176,315,1.176,316,1.176,317,1.066,318,1.066,319,1.176,320,0.878,321,0.968]],["title/interfaces/User.html",[105,0.139,320,0.928]],["body/interfaces/User.html",[3,0.415,4,0.415,5,0.363,8,0.219,9,1.005,17,1.351,22,0.038,24,0.265,27,1.007,42,0.906,49,0.805,62,0.018,63,0.025,64,0.018,67,0.652,91,0.809,104,1.002,105,0.256,110,0.809,111,0.809,112,0.731,113,0.809,114,0.809,115,0.731,116,0.809,119,1.207,129,0.809,168,0.809,226,1.084,263,0.983,264,0.983,265,1.195,266,1.195,267,0.892,268,1.351,269,0.983,270,0.983,271,0.983,272,1.489,273,0.983,274,1.195,275,1.084,276,1.226,277,1.084,278,1.084,279,1.195,280,1.351,281,1.195,282,0.983,283,1.195,284,1.742,285,1.195,286,1.195,287,2.02,288,1.195,289,1.195,290,1.195,291,1.195,292,1.195,293,1.084,294,2.163,295,1.195,296,1.195,297,1.983,298,1.983,299,1.195,300,1.195,301,1.084,302,1.084,303,1.195,304,1.195,305,1.195,306,1.195,307,1.084,308,1.195,309,1.195,310,1.195,311,1.195,312,1.084,313,1.351,314,1.195,315,1.195,316,1.195,317,1.084,318,1.084,319,1.195,320,1.226,321,1.662]],["title/coverage.html",[589,3.418]],["body/coverage.html",[0,1.286,1,1.88,5,0.372,6,2.485,7,2.485,22,0.038,24,0.272,50,0.75,59,4.396,62,0.019,63,0.025,64,0.019,65,1.112,66,1.999,67,0.426,70,1.226,99,1.112,100,2.047,101,1.355,105,0.266,106,1.502,125,1.226,126,1.226,130,2.139,131,1.674,133,2.485,138,1.674,162,2.485,163,2.139,165,2.485,168,0.829,184,1.502,239,2.139,252,3.386,253,2.485,256,1.88,263,1.009,264,1.889,273,1.009,276,0.915,280,1.009,284,1.009,320,0.915,322,2.485,412,2.139,565,2.915,589,2.485,590,3.01,591,3.01,592,2.485,593,3.01,594,3.01,595,3.01,596,3.01,597,2.485,598,3.01,599,4.667,600,5.881,601,5.881,602,3.01,603,3.01,604,3.01,605,4.667,606,3.01,607,3.01,608,4.653,609,2.485,610,2.485,611,2.485,612,2.485,613,2.485,614,2.485,615,2.485,616,2.485,617,2.485,618,4.667,619,3.01,620,3.01,621,3.01,622,2.915,623,2.485,624,3.386,625,4.102,626,2.485,627,3.01,628,3.01]],["title/dependencies.html",[230,2.288,629,2.56]],["body/dependencies.html",[22,0.037,44,1.407,46,2.891,62,0.028,63,0.033,64,0.028,230,3.364,402,3.289,403,3.289,404,3.289,630,4.629,631,4.629,632,4.629,633,4.629,634,5.386]],["title/miscellaneous/enumerations.html",[635,1.043,636,3.024]],["body/miscellaneous/enumerations.html",[8,0.314,13,1.157,22,0.038,62,0.026,63,0.031,64,0.026,66,1.551,68,2.335,87,2.335,88,2.335,89,2.335,92,2.826,93,2.826,94,2.826,95,2.826,96,2.826,97,2.826,204,3.818,264,1.407,267,1.545,268,1.703,269,1.407,270,1.407,271,1.407,272,1.877,635,1.71,636,3.466,637,2.623,638,4.199]],["title/miscellaneous/functions.html",[635,1.043,639,2.603]],["body/miscellaneous/functions.html",[8,0.333,21,1.644,22,0.036,23,1.644,25,1.001,41,1.944,62,0.027,63,0.032,64,0.027,66,1.644,99,1.644,101,2.369,102,2.475,313,1.492,365,3.163,622,3.163,623,4.627,635,1.813,637,2.781,639,3.163,640,3.675,641,4.452,642,4.627,643,4.452,644,4.452,645,4.452]],["title/index.html",[8,0.191,646,2.56,647,2.56]],["body/index.html",[22,0.034,62,0.029,63,0.034,64,0.029,82,2.626,592,3.899,639,3.356,648,4.723,649,4.723,650,4.723,651,4.723,652,4.723,653,4.723,654,4.723]],["title/modules.html",[229,2.942]],["body/modules.html",[22,0.034,62,0.029,63,0.034,64,0.029,228,2.985,229,3.395,655,4.778,656,4.778,657,4.778,658,4.778]],["title/overview.html",[659,3.418]],["body/overview.html",[2,2.678,22,0.036,50,1.069,62,0.026,63,0.032,64,0.026,129,1.181,130,3.046,201,4.065,227,3.657,228,3.711,230,2.678,231,3.539,232,3.539,233,3.539,234,3.539,235,3.539,236,3.539,237,3.539,238,3.539,239,4.333,240,4.249,241,3.539,242,3.046,597,3.539,659,3.539,660,3.539,661,4.287]],["title/miscellaneous/typealiases.html",[635,1.043,662,3.664]],["body/miscellaneous/typealiases.html",[8,0.352,22,0.035,24,0.425,27,0.756,62,0.029,63,0.033,64,0.029,66,1.739,98,2.714,99,1.739,635,1.918,637,2.942,663,4.709]],["title/miscellaneous/variables.html",[635,1.043,664,3.024]],["body/miscellaneous/variables.html",[8,0.162,22,0.037,24,0.477,27,0.83,62,0.013,63,0.02,64,0.013,66,0.802,86,1.083,125,1.323,126,1.584,127,1.083,128,1.207,184,1.62,201,2.307,204,3.456,242,3.572,251,1.792,267,0.987,269,1.088,270,0.727,271,1.088,313,0.727,321,0.727,335,2.307,365,3.931,377,1.792,378,1.792,412,2.307,441,1.792,442,1.792,494,4.149,565,1.542,588,1.792,608,1.792,609,2.68,610,2.68,611,2.68,612,2.68,613,2.68,614,2.68,615,2.68,616,1.792,617,2.68,622,1.542,624,2.68,626,2.68,635,0.884,637,1.356,640,1.792,642,2.68,660,2.68,664,1.792,665,5.169,666,2.171,667,2.171,668,4.621,669,5.027,670,3.89,671,2.171,672,5.169,673,3.89,674,5.284,675,5.027,676,5.381,677,3.89,678,4.621,679,2.171,680,5.027,681,5.646,682,3.89,683,4.621,684,3.247,685,3.247,686,4.85,687,4.317,688,4.85,689,5.169,690,4.317,691,4.317,692,4.85,693,4.85,694,4.317,695,5.169,696,2.171,697,4.317,698,3.247,699,3.247,700,4.85,701,5.027,702,4.85,703,4.85,704,4.85,705,4.85,706,3.247,707,3.247,708,5.284,709,2.171,710,3.247,711,3.247,712,2.171,713,3.89,714,3.247,715,3.247,716,4.621,717,3.247,718,3.247,719,3.247,720,3.247,721,3.89,722,2.171,723,2.171,724,2.171,725,2.171,726,2.171,727,2.171,728,2.171,729,3.247,730,2.171,731,2.171,732,2.171,733,2.171,734,2.171,735,2.171,736,2.171,737,2.171,738,2.171]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":59,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["0.1.10",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["0/57",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":201,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":661,"title":{},"body":{"overview.html":{}}}],["150",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":660,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["500",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["600",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstractnavigator",{"_index":1,"title":{"injectables/AbstractNavigator.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["access_token_expiration_date",{"_index":286,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["accesstoken",{"_index":278,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["account",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["accountaccessbuttoncomponent",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["activatedroute",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroutesnapshot",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["actual",{"_index":645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aliases",{"_index":663,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular.config",{"_index":128,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["angular/common",{"_index":46,"title":{},"body":{"injectables/AbstractNavigator.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":179,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["angular/core",{"_index":44,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"dependencies.html":{}}}],["angular/router",{"_index":45,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["apirequeststosecure",{"_index":107,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["apirequeststosecure.length",{"_index":574,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["apiroutedefinition",{"_index":98,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/typealiases.html":{}}}],["asterisk",{"_index":211,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["async",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["atoken",{"_index":187,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["audience",{"_index":112,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["audience.concat(stateurl",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth.client",{"_index":185,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.config",{"_index":181,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["auth.guard",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["authclientconfig",{"_index":65,"title":{"injectables/AuthClientConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authclientconfig.set",{"_index":573,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["authconfig",{"_index":70,"title":{"interfaces/AuthConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfigservice",{"_index":125,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationinprogress",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":131,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["authhttpinterceptor",{"_index":163,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["authmodule",{"_index":228,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":572,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["authorization",{"_index":273,"title":{"interfaces/Authorization.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authorization_id",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponseerror",{"_index":263,"title":{"interfaces/AuthResponseError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":34,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["await",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosrequestconfig",{"_index":540,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["back",{"_index":37,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["badge_class",{"_index":609,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":196,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["behaviorsubject",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(null",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(true",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["bg",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blue",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bold",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["bootstrap",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["border",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branches",{"_index":648,"title":{},"body":{"index.html":{}}}],["browse",{"_index":658,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":655,"title":{},"body":{"modules.html":{}}}],["button.component",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["button.component.ts",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["button/account",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["callback",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["callback(isauthenticated",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CryptrClientFactory.html":{}}}],["canactivate(next",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild(childroute",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canattachtoken",{"_index":166,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canattachtoken(route",{"_index":170,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canhandleauthentication",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["canhandleauthentication(searchparams",{"_index":315,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canhandleinvitation",{"_index":522,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canhandleinvitation(searchparams",{"_index":316,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canload",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canload(route",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canrefresh",{"_index":523,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canrefresh(refreshstore",{"_index":308,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["catch",{"_index":55,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["catch((err",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch((error",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkauthentication",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["childroute",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["class",{"_index":50,"title":{"classes/CryptrClientFactory.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":564,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["cleanroutestate",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanurltree(sourceurltree",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id",{"_index":111,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cluster_authmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_declarations",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["code",{"_index":275,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["combinelatest",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["common",{"_index":88,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["commonmodule",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["component",{"_index":597,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["compte",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":67,"title":{"interfaces/Config.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["config.default_locale",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.default_redirect_uri",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.httpinterceptor.apirequeststosecure",{"_index":577,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["configfactory",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["configfactory.get",{"_index":569,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["configuration",{"_index":80,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["connexion",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error('authclient",{"_index":587,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["console.error('handling",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(error",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["console.error(tokens",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('can",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('tokens",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(tokens",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.warn('secured",{"_index":582,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["const",{"_index":90,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["constructor(@optional",{"_index":121,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor(auth",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(config",{"_index":69,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["constructor(cryptrclient",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(location",{"_index":16,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{}}}],["consumers",{"_index":75,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["coverage",{"_index":589,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createclient",{"_index":566,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["createclient(configfactory",{"_index":567,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["cryptr",{"_index":127,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["cryptr/cryptr",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["cryptr_base_url",{"_index":116,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cryptrangular",{"_index":650,"title":{},"body":{"index.html":{}}}],["cryptrclient",{"_index":168,"title":{"interfaces/CryptrClient.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["cryptrclientfactory",{"_index":256,"title":{"classes/CryptrClientFactory.html":{}},"body":{"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["cryptrclientfactory.createclient",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientservice",{"_index":184,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptrspa",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["cryptrspa.client(config",{"_index":586,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["currentauthenticationobservable",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationstate",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["currenturltree",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["cursor",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["decorated",{"_index":584,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["decoratedrequest",{"_index":524,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["decoratedrequest(axiosrequestconfig",{"_index":319,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["def",{"_index":102,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_locale",{"_index":115,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_redirect_uri",{"_index":113,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_scope",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultauthenticationcallback(isauthenticated",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{}}}],["defines",{"_index":87,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":96,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":230,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["description",{"_index":39,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}}}],["doc",{"_index":654,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["duration",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["déconnexion",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ease",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":321,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["en",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["ends",{"_index":210,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["enum",{"_index":91,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["enumerations",{"_index":636,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":282,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["error_btn_class",{"_index":610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_description",{"_index":283,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["errors",{"_index":552,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["example",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["exports",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["failed",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["falls",{"_index":36,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["false",{"_index":206,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["field",{"_index":265,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["filter",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["filter(([isloading",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["finally",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["finalreq",{"_index":189,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["finalscope",{"_index":525,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["finalscope(scope",{"_index":295,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["findmatchingroute",{"_index":223,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first",{"_index":182,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first((route",{"_index":225,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["flex",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:bg",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:border",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:outline",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:shadow",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroot(config",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["fr",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.config.httpinterceptor.apirequeststosecure).pipe",{"_index":224,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["from(this.cryptrclient.isauthenticated",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.logout(this.prelogoutcallback(callback",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signinwithredirect(scope",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signupwithredirect(scope",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["full",{"_index":670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fullauthenticateprocess",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":100,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["functions",{"_index":639,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["getaccesstoken",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["getclaimsfromaccess",{"_index":526,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["getclaimsfromaccess(accesstoken",{"_index":314,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getclientuser",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentaccesstoken",{"_index":291,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getcurrentidtoken",{"_index":292,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getidtoken",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["getobservableuser",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshstore",{"_index":309,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gets",{"_index":74,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["getting",{"_index":646,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":312,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gray",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":130,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["handled",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["handleinvitationstate",{"_index":527,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handleinvitationstate(scope",{"_index":304,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlenewtokens",{"_index":528,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handlenewtokens(refreshstore",{"_index":306,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handleredirectcallback",{"_index":307,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlerefreshtokens",{"_index":310,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handletokens",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokens(tokens",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokenserrors",{"_index":529,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handletokenserrors(errors",{"_index":305,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["has_ssr",{"_index":118,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["head",{"_index":97,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["headers",{"_index":194,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["hover:bg",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:shadow",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:text",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":89,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["http://localhsot:4201",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["http_response",{"_index":281,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["httpevent",{"_index":178,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httphandler",{"_index":175,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":117,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpinterceptorconfig",{"_index":106,"title":{"interfaces/HttpInterceptorConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["httpinterceptorrouteconfig",{"_index":99,"title":{"interfaces/HttpInterceptorRouteConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["httpinterceptorrouteconfig).uri",{"_index":103,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpmethod",{"_index":92,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["httprequest",{"_index":172,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["id",{"_index":274,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["identifier",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":198,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["iif",{"_index":180,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["implements",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["import",{"_index":43,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["imports",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["inject",{"_index":85,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(authconfigservice",{"_index":122,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(cryptrclientservice",{"_index":186,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["injection",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":86,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('browser",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('cryptr.client",{"_index":588,"title":{},"body":{"classes/CryptrClientFactory.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":18,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["injector.get(router",{"_index":54,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["inline",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inscription",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instance",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":167,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["intercept(req",{"_index":174,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interceptor",{"_index":162,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":164,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interface",{"_index":105,"title":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":129,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invitation",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["invite",{"_index":268,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["invitewithoutredirect",{"_index":530,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithoutredirect(scope",{"_index":300,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["invitewithredirect",{"_index":531,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithredirect(scope",{"_index":303,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["isauthenticated",{"_index":293,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["ishttpinterceptorrouteconfig",{"_index":101,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(def",{"_index":641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(route",{"_index":218,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["isloading",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["item",{"_index":576,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["items",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["justify",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leading",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["lg",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lines",{"_index":649,"title":{},"body":{"index.html":{}}}],["live",{"_index":653,"title":{},"body":{"index.html":{}}}],["locale",{"_index":298,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["localizedstrings",{"_index":617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":17,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["log",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_out_btn_class",{"_index":611,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/variables.html":{}}}],["logout(callback",{"_index":318,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["mainly",{"_index":578,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["manage",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccount",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(([isloading",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["match",{"_index":212,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["matching",{"_index":63,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":266,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["minimum/default",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["miscellaneous",{"_index":635,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":227,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":229,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["mon",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":651,"title":{},"body":{"index.html":{}}}],["mt",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":40,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl",{"_index":14,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl(url",{"_index":26,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigates",{"_index":29,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigator.ts",{"_index":7,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["navigator.ts:22",{"_index":28,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator.ts:9",{"_index":20,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["new",{"_index":126,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newparams",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpath",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["next.handle(finalreq",{"_index":197,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["ngmodule",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["ngondestroy",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngunsubscribe",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["none",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notes",{"_index":84,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["null",{"_index":226,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["number",{"_index":287,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["object",{"_index":313,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["observableauthenticated",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["ondestroy",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":33,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{}}}],["openid",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/Tokens.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":585,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["other_key",{"_index":120,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["otherwise",{"_index":35,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["out",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":659,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":629,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":95,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["path).tostring",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["paths",{"_index":583,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["peer",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["pointer",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":93,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["prelogoutcallback",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["prelogoutcallback(callback",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["process",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["profile&quot",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":294,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["properties",{"_index":9,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["provide",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["provider",{"_index":643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["provides",{"_index":644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providing",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":94,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["px",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["py",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparams",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;en&quot",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;fr&quot",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;http://localhsot:4201&quot",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":81,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["read:invoices",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["read:invoices&quot",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["recurringrefreshtoken",{"_index":532,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["recurringrefreshtoken(refreshtokenwrapper",{"_index":311,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["red",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirects",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirecturi",{"_index":297,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["reerror",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["refresh_expiration_date",{"_index":288,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_leeway",{"_index":289,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_retry",{"_index":290,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_token",{"_index":285,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refreshstore",{"_index":284,"title":{"interfaces/RefreshStore.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenwrapper",{"_index":558,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["region",{"_index":114,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["related",{"_index":652,"title":{},"body":{"index.html":{}}}],["relative",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":177,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.clone",{"_index":193,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.headers.set('authorization",{"_index":195,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request",{"_index":171,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.method",{"_index":220,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.url.startswith(value.substr(0",{"_index":217,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["requested",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpath",{"_index":207,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["reset",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["resetauthentication",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetauthentication(isauthenticated",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":580,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["result",{"_index":62,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":64,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["rigerror",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["root",{"_index":48,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["rounded",{"_index":669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["route.httpmethod",{"_index":219,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["routecleanedpath",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["router",{"_index":12,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["routerstatesnapshot",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["row",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["rxjs/operators",{"_index":183,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["scopes",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["searchparams",{"_index":536,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["see",{"_index":82,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"index.html":{}}}],["segments",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":581,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["set",{"_index":68,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["set(config",{"_index":77,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["sets",{"_index":79,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["settimeout",{"_index":57,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["setuser(newuser",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["shadow",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":267,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sign_btn_class",{"_index":612,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["signin",{"_index":269,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signinwithoutredirect",{"_index":533,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signinwithoutredirect(scope",{"_index":296,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signinwithredirect",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signinwithredirect(\"email",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(&quot;email",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(scope",{"_index":301,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signup",{"_index":271,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signupwithoutredirect",{"_index":534,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signupwithoutredirect(scope",{"_index":299,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signupwithredirect",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signupwithredirect(scope",{"_index":302,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["sourceurltree",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.fragment",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.queryparams",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["spa",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["space",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specified",{"_index":30,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{}}}],["specify",{"_index":575,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["src/.../auth.client.ts",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.config.ts",{"_index":637,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":638,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../window.ts",{"_index":640,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/abstract",{"_index":6,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["src/lib/account",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["src/lib/auth.client.ts",{"_index":565,"title":{},"body":{"classes/CryptrClientFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.client.ts:6",{"_index":568,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["src/lib/auth.config.ts",{"_index":66,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.config.ts:49",{"_index":71,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:61",{"_index":78,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:68",{"_index":73,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.guard.ts",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/lib/auth.guard.ts:18",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:21",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:25",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:32",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.interceptor.ts",{"_index":165,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["src/lib/auth.interceptor.ts:23",{"_index":169,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:29",{"_index":176,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:67",{"_index":173,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.module.ts",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.module.ts:16",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.service.ts",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/lib/auth.service.ts:104",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:108",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:113",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:117",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:121",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:129",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:143",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:147",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:151",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:162",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:166",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:170",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:174",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:178",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:182",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:186",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:190",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:195",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:207",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:244",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:32",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:51",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:56",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:68",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:98",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/utils/constants.ts",{"_index":608,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/enums.ts",{"_index":616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/types.ts",{"_index":264,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/utils/types.ts:48",{"_index":543,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:49",{"_index":544,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:50",{"_index":555,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:51",{"_index":541,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:52",{"_index":559,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:53",{"_index":561,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:54",{"_index":553,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:55",{"_index":560,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:56",{"_index":562,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:57",{"_index":554,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:58",{"_index":547,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:59",{"_index":551,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:60",{"_index":548,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:61",{"_index":549,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:62",{"_index":538,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:63",{"_index":545,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:64",{"_index":550,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:65",{"_index":557,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:66",{"_index":546,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:67",{"_index":542,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:68",{"_index":535,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:69",{"_index":537,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:70",{"_index":563,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:71",{"_index":556,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:72",{"_index":539,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/window.ts",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":647,"title":{"index.html":{}},"body":{}}],["startswith",{"_index":214,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["state",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["statements",{"_index":592,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stateurl",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["stateurl.split('?')[0",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["static",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{}}}],["string",{"_index":27,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stripqueryfrom(uri",{"_index":199,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["subject",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":656,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":657,"title":{},"body":{"modules.html":{}}}],["table",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["telemetry",{"_index":279,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["tenant_domain",{"_index":110,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["testprimitive",{"_index":203,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route",{"_index":222,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route.uri",{"_index":221,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["text",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.auth.fullauthenticateprocess(state.url",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.observableauthenticated",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authenticate",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.asobservable",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.next(newauthenticated",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.value",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.canattachtoken(route",{"_index":192,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.canhandleauthentication",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkauthentication",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanroutestate",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanurltree(currenturltree",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":124,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.config.httpinterceptor.apirequeststosecure.foreach(route",{"_index":191,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.config.httpinterceptor?.apirequeststosecure",{"_index":190,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.configfactory.get().has_ssr",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleauthentication",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleinvitation",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.config",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentaccesstoken",{"_index":188,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentidtoken",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getuser",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handleredirectcallback",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handlerefreshtokens",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.isauthenticated",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.useraccountaccess",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultauthenticationcallback(isauthenticated",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handleredirectcallback().then((tokens",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handletokens(tokens",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then((isauthenticated",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then(async",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.asobservable",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.next(false",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.path",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(this.routecleanedpath",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(url",{"_index":61,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.logout(null",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.complete",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.next",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(false",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(isauthenticated",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router",{"_index":53,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.createurltree([path",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.navigatebyurl(url",{"_index":58,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.parseurl(path",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.set(config",{"_index":123,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.setuser(null",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setuser(this.getclientuser",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect(default_scope",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripqueryfrom(request.url",{"_index":208,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.updatecurrentauthstate(false",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(handled",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(isauthenticated",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(valid",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.asobservable",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.next(newuser",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.value",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":571,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["throw",{"_index":570,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["todo",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle_cass_closed",{"_index":613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggle_cass_opened",{"_index":614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":280,"title":{"interfaces/TokenError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["tokenoptions",{"_index":109,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["tokens",{"_index":276,"title":{"interfaces/Tokens.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["transition",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transparent",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":209,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["try",{"_index":52,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["tslib",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":662,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":104,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["up",{"_index":270,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updatecurrentauthstate(newauthenticated",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["uppercase",{"_index":668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":108,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["uri.indexof",{"_index":200,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["uri.substr(0",{"_index":202,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interceptors/AuthHttpInterceptor.html":{},"classes/CryptrClientFactory.html":{}}}],["urlsegment",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["urltree",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["usage",{"_index":83,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["use",{"_index":579,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["used",{"_index":32,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["usefactory",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":320,"title":{"interfaces/User.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["user_account_btn_class",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useraccountaccess",{"_index":317,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["using",{"_index":213,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["utils/constants",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/types",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":277,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["value",{"_index":204,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.indexof",{"_index":215,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.length",{"_index":216,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.trim",{"_index":205,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["variable",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":664,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":42,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["w",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["white",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitespace",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["window",{"_index":642,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_expired",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_invalid_grant",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.history.replacestate",{"_index":38,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["window.location",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["windowprovider",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["windowservice",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["x",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xl",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xs",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yellow",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":72,"title":{},"body":{"injectables/AuthClientConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["zoom",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractNavigator.html":{"url":"injectables/AbstractNavigator.html","title":"injectable - AbstractNavigator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AbstractNavigator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/abstract-navigator.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateByUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateByUrl\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateByUrl(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/abstract-navigator.ts:22\n                \n            \n\n\n            \n                \n                    Navigates to the specified url. The router will be used if one is available, otherwise it falls back\nto window.history.replaceState.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The url to navigate to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthClientConfig.html":{"url":"injectables/AuthClientConfig.html","title":"injectable - AuthClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:68\n                \n            \n\n\n            \n                \n                    Gets the config that has been set by other consumers of the service\n\n\n                    \n                        Returns :         AuthConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(config: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:61\n                \n            \n\n\n            \n                \n                    Sets configuration to be read by other consumers of the service (see usage notes)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The configuration to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        has_ssr\n                                \n                                \n                                        httpInterceptor\n                                \n                                \n                                            Optional\n                                        other_key\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        has_ssr\n                                    \n                                \n                                \n                                    \n                                        has_ssr:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpInterceptor\n                                    \n                                \n                                \n                                    \n                                        httpInterceptor:         HttpInterceptorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpInterceptorConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        other_key\n                                    \n                                \n                                \n                                    \n                                        other_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable {\n    return this.auth.observableAuthenticated();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthHttpInterceptor.html":{"url":"interceptors/AuthHttpInterceptor.html","title":"interceptor - AuthHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                canAttachToken\n                            \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AuthConfig, cryptrClient: any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.interceptor.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            canAttachToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canAttachToken(route: ApiRouteDefinition, request: HttpRequest)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                ApiRouteDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { first } from 'rxjs/operators';\nimport { CryptrClientService } from './auth.client';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(CryptrClientService) private cryptrClient: any\n  ) { }\n\n  intercept(\n    req: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const aToken = this.cryptrClient.getCurrentAccessToken();\n    let finalReq = req;\n\n    if (this.config.httpInterceptor?.apiRequestsToSecure !== undefined && aToken !== undefined) {\n      this.config.httpInterceptor.apiRequestsToSecure.forEach(route => {\n        if (this.canAttachToken(route, req)) {\n\n          finalReq = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${aToken}`),\n          });\n        }\n      });\n    }\n    return next.handle(finalReq);\n  }\n\n  /**\n   * @ignore\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * @param ignore\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * @ignore\n   */\n  private findMatchingRoute(\n    request: HttpRequest\n  ): Observable {\n    return from(this.config.httpInterceptor.apiRequestsToSecure).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.module.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService, AuthClientConfig } from './auth.config';\nimport { AuthGuard } from './auth.guard';\nimport { AccountAccessButtonComponent } from './account-access-button/account-access-button.component';\nimport { CommonModule } from '@angular/common';\nimport { CryptrClientFactory, CryptrClientService } from './auth.client';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AccountAccessButtonComponent],\n  exports: [AccountAccessButtonComponent],\n  bootstrap: [AccountAccessButtonComponent]\n})\nexport class AuthModule {\n  static forRoot(config?: AuthConfig): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        {\n          provide: AuthConfigService,\n          useValue: config,\n        },\n        {\n          provide: CryptrClientService,\n          useFactory: CryptrClientFactory.createClient,\n          deps: [AuthClientConfig],\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponseError.html":{"url":"interfaces/AuthResponseError.html","title":"interface - AuthResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                authenticationInProgress\n                            \n                            \n                                canHandleAuthentication\n                            \n                            \n                                checkAuthentication\n                            \n                            \n                                config\n                            \n                            \n                                currentAuthenticationObservable\n                            \n                            \n                                currentAuthenticationState\n                            \n                            \n                                getAccessToken\n                            \n                            \n                                getClientUser\n                            \n                            \n                                getIdToken\n                            \n                            \n                                getObservableUser\n                            \n                            \n                                getUser\n                            \n                            \n                                handleRedirectCallback\n                            \n                            \n                                handleTokens\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                logOut\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                observableAuthenticated\n                            \n                            \n                                preLogOutCallBack\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                resetAuthentication\n                            \n                            \n                                signInWithRedirect\n                            \n                            \n                                signUpWithRedirect\n                            \n                            \n                                userAccountAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptrClient: CryptrClient, location: Location, navigator: AbstractNavigator, router: Router, route: ActivatedRoute, configFactory: AuthClientConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        CryptrClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigator\n                                                  \n                                                        \n                                                                        AbstractNavigator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                        Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                        ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configFactory\n                                                  \n                                                        \n                                                                        AuthClientConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authenticate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authenticationInProgress\n                        \n                        \n                    \n                \n            \n            \n                \nauthenticationInProgress()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            checkAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncheckAuthentication()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Config\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationObservable\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationObservable()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationState\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationState()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClientUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetClientUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObservableUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetObservableUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokens(tokens: Tokens)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokens\n                                    \n                                                Tokens\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: () => void, location: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    location\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        window.location\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            observableAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nobservableAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            preLogOutCallBack\n                        \n                        \n                    \n                \n            \n            \n                \npreLogOutCallBack(callback: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \nresetAuthentication(isAuthenticated: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isAuthenticated\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        openid profile] - Scopes requested for this sign in process (whitespace separator), Minimum/Default: \"email openid profile\"\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nlocale for this sign in process. Default: config.default_locale value\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nURI where to redirect after sign in process. Default: config.default_redirect_uri value\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignInWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignInWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Redirects to Cryptr Sign in page\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\nimport { BehaviorSubject, combineLatest, from, Observable, Subject } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\nimport { Config, CryptrClient, Tokens } from './utils/types';\nimport { ActivatedRoute, Router, UrlTree } from '@angular/router';\nimport { CryptrClientService } from './auth.client';\nimport { filter, map } from 'rxjs/operators';\nimport { DEFAULT_SCOPE } from './utils/constants';\nimport { AuthClientConfig } from './auth.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnDestroy {\n  /**\n  * @ignore\n  */\n  private ngUnsubscribe$ = new Subject();\n  /**\n  * @ignore\n  */\n  private authenticated$ = new BehaviorSubject(false);\n  /**\n  * @ignore\n  */\n  private user$ = new BehaviorSubject(null);\n  /**\n  * @ignore\n  */\n  private isLoading$ = new BehaviorSubject(true);\n\n  constructor(\n    @Inject(CryptrClientService) private cryptrClient: CryptrClient,\n    private location: Location,\n    private navigator: AbstractNavigator,\n    private router: Router,\n    private route: ActivatedRoute,\n    private configFactory: AuthClientConfig,\n  ) {\n    this.checkAuthentication();\n    window.addEventListener(CryptrSpa.events.REFRESH_INVALID_GRANT, (RigError) => {\n      this.logOut(null);\n    });\n    window.addEventListener(CryptrSpa.events.REFRESH_EXPIRED, (ReError) => {\n      this.logOut(null);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  checkAuthentication(): void {\n    this.isAuthenticated().then(async (isAuthenticated: boolean) => {\n      this.updateCurrentAuthState(isAuthenticated);\n      this.resetAuthentication(isAuthenticated);\n      await this.authenticate();\n    }).catch((error) => {\n      console.error(error);\n      this.resetAuthentication(false);\n      this.isLoading$.next(false);\n    });\n  }\n\n  resetAuthentication(isAuthenticated: boolean): void {\n    if (isAuthenticated) {\n      return;\n    }\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n  }\n\n  /**\n  * @example\n  * Default usage\n  * signInWithRedirect()\n  *\n  * @example\n  * Usage with custom scope\n  * signInWithRedirect(\"email openid profile read:invoices\")\n  *\n  * @example\n  * Usage with custom locale\n  * signInWithRedirect(\"email openid profile\", \"fr\")\n  *\n  * @example\n  * Usage with custom locale\n  * signInWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n  *\n  * @param {string} [scope= email openid profile] - Scopes requested for this sign in process (whitespace separator), Minimum/Default: `\"email openid profile\"`\n  * @param {string} locale - locale for this sign in process. Default: `config.default_locale` value\n  * @param {string} redirectUri - URI where to redirect after sign in process. Default: `config.default_redirect_uri` value\n  * @returns Redirects to Cryptr Sign in page\n  */\n  signInWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    if (this.cryptrClient) {\n      return from(this.cryptrClient.signInWithRedirect(scope, redirectUri, locale));\n    }\n  }\n\n  signUpWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    return from(this.cryptrClient.signUpWithRedirect(scope, redirectUri, locale));\n  }\n\n  preLogOutCallBack(callback: () => void): () => void {\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n    return callback;\n  }\n  logOut(callback: () => void, location: any = window.location): Observable {\n    return from(this.cryptrClient.logOut(this.preLogOutCallBack(callback), location));\n  }\n\n  canHandleAuthentication(): boolean {\n    return this.cryptrClient.canHandleAuthentication();\n  }\n\n  handleRedirectCallback(): Promise {\n    try {\n      return this.cryptrClient.handleRedirectCallback();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  handleTokens(tokens: Tokens): boolean {\n    // console.log('tokens');\n    // console.log(tokens);\n    const { valid, accessToken } = tokens;\n    this.updateCurrentAuthState(valid && accessToken !== undefined);\n    if (this.authenticated$.value) {\n      this.setUser(this.getClientUser());\n    } else {\n      console.error('handling tokens failed');\n      console.error(tokens);\n    }\n    return this.authenticated$.value;\n  }\n\n  isAuthenticated(): Promise {\n    return this.cryptrClient.isAuthenticated();\n  }\n\n  getAccessToken(): any {\n    return this.cryptrClient.getCurrentAccessToken();\n  }\n\n  getIdToken(): any {\n    return this.cryptrClient.getCurrentIdToken();\n  }\n\n  /**\n  * @ignore\n  */\n  private setUser(newUser: any): void {\n    this.user$.next(newUser);\n  }\n\n  getClientUser(): any {\n    return this.cryptrClient.getUser();\n  }\n\n  userAccountAccess(): Promise {\n    return this.cryptrClient.userAccountAccess();\n  }\n\n  refreshTokens(): void {\n    this.cryptrClient.handleRefreshTokens();\n  }\n\n  config(): Config {\n    return this.cryptrClient.config;\n  }\n\n  getUser(): any {\n    return this.user$.value;\n  }\n\n  authenticationInProgress(): Observable {\n    return this.isLoading$.asObservable();\n  }\n\n  observableAuthenticated(): Observable {\n    return from(this.cryptrClient.isAuthenticated());\n  }\n\n  getObservableUser(): Observable {\n    return this.user$.asObservable();\n  }\n\n\n  currentAuthenticationState(): boolean {\n    return this.authenticated$.value;\n  }\n\n  /**\n  * @ignore\n  */\n  private updateCurrentAuthState(newAuthenticated: boolean): void {\n    this.authenticated$.next(newAuthenticated);\n    this.setUser(this.getClientUser());\n  }\n\n  currentAuthenticationObservable(): Observable {\n    return this.authenticated$.asObservable();\n  }\n\n  /**\n  * @ignore\n  */\n  private cleanUrlTree(sourceUrlTree: UrlTree, stateUrl?: string): UrlTree {\n    try {\n      const path = !!stateUrl ? stateUrl.split('?')[0] : '';\n      const queryParams = sourceUrlTree.queryParams;\n      const { authorization_id, code, state, ...newParams } = queryParams;\n      return this.router.createUrlTree([path], { queryParams: newParams, fragment: sourceUrlTree.fragment });\n    } catch (error) {\n      return sourceUrlTree;\n    }\n  }\n\n  /**\n  * @ignore\n  */\n  private routeCleanedPath(): string {\n    const path = this.location.path();\n    const currentUrlTree = this.router.parseUrl(path);\n    const newPath = this.cleanUrlTree(currentUrlTree, path).toString();\n    return !!newPath ? newPath : '/';\n  }\n\n  /**\n  * @ignore\n  */\n  private cleanRouteState(): void {\n    setTimeout(() => {\n      this.location.replaceState(this.routeCleanedPath(), '');\n    }, 2);\n  }\n\n  async authenticate(): Promise {\n    if (this.authenticated$.value) {\n      this.isLoading$.next(false);\n      return;\n    }\n    this.resetAuthentication(false);\n    if (this.canHandleAuthentication()) {\n      return this.handleRedirectCallback().then((tokens) => {\n        const handled = this.handleTokens(tokens);\n        this.updateCurrentAuthState(handled);\n        if (handled) {\n          this.cleanRouteState();\n          this.isLoading$.next(false);\n        } else {\n          this.isLoading$.next(false);\n        }\n        return handled;\n      }).catch((error) => {\n        return false;\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n      // TODO: handle invitation process\n      // } else if (this.cryptrClient.canHandleInvitation()) {\n      //   console.log('can handle invite')\n    } else {\n      await this.cryptrClient.handleRefreshTokens();\n      this.isAuthenticated().then((isAuthenticated) => {\n        this.updateCurrentAuthState(isAuthenticated);\n      }).catch((err) => {\n        this.updateCurrentAuthState(false);\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private defaultAuthenticationCallback(isAuthenticated: boolean, stateUrl?: string): boolean {\n    const { audience, default_locale } = this.config();\n    const redirectUri = audience.concat(stateUrl || '');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      if (this.configFactory.get().has_ssr) {\n        this.signInWithRedirect(DEFAULT_SCOPE, default_locale, redirectUri);\n      } else {\n        this.signInWithRedirect();\n      }\n      return false;\n    }\n  }\n\n  /**\n  * @ignore\n  */\n  fullAuthenticateProcess(\n    stateUrl?: string,\n    callback?: (isAuthenticated: boolean, stateUrl?: string) => boolean\n  ): Observable {\n    return combineLatest(\n      [this.isLoading$, this.authenticated$]\n    ).pipe(\n      filter(([isLoading, isAuthenticated]) => {\n        return !isLoading;\n      }),\n      map(([isLoading, isAuthenticated]) => {\n        if (callback) {\n          return callback(isAuthenticated, stateUrl);\n        } else {\n          return this.defaultAuthenticationCallback(isAuthenticated, stateUrl);\n        }\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authorization.html":{"url":"interfaces/Authorization.html","title":"interface - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                            Optional\n                                        telemetry\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telemetry\n                                    \n                                \n                                \n                                    \n                                        telemetry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptrClient.html":{"url":"interfaces/CryptrClient.html","title":"interface - CryptrClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CryptrClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canHandleAuthentication\n                                \n                                \n                                    canHandleInvitation\n                                \n                                \n                                    canRefresh\n                                \n                                \n                                    decoratedRequest\n                                \n                                \n                                    finalScope\n                                \n                                \n                                    getClaimsFromAccess\n                                \n                                \n                                    getCurrentAccessToken\n                                \n                                \n                                    getCurrentIdToken\n                                \n                                \n                                    getRefreshStore\n                                \n                                \n                                    getUser\n                                \n                                \n                                    handleInvitationState\n                                \n                                \n                                    handleNewTokens\n                                \n                                \n                                    handleRedirectCallback\n                                \n                                \n                                    handleRefreshTokens\n                                \n                                \n                                    handleTokensErrors\n                                \n                                \n                                    inviteWithoutRedirect\n                                \n                                \n                                    inviteWithRedirect\n                                \n                                \n                                    isAuthenticated\n                                \n                                \n                                    logOut\n                                \n                                \n                                    recurringRefreshToken\n                                \n                                \n                                    signInWithoutRedirect\n                                \n                                \n                                    signInWithRedirect\n                                \n                                \n                                    signUpWithoutRedirect\n                                \n                                \n                                    signUpWithRedirect\n                                \n                                \n                                    userAccountAccess\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleInvitation\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleInvitation(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canRefresh\n                        \n                        \n                    \n                \n            \n            \n                \ncanRefresh(refreshStore: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decoratedRequest\n                        \n                        \n                    \n                \n            \n            \n                \ndecoratedRequest(axiosRequestConfig: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    axiosRequestConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalScope\n                        \n                        \n                    \n                \n            \n            \n                \nfinalScope(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClaimsFromAccess\n                        \n                        \n                    \n                \n            \n            \n                \ngetClaimsFromAccess(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     object | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRefreshStore\n                        \n                        \n                    \n                \n            \n            \n                \ngetRefreshStore()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         RefreshStore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     object | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInvitationState\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInvitationState(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleNewTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleNewTokens(refreshStore: RefreshStore, tokens?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokens\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRefreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokensErrors\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokensErrors(errors: TokenError[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                TokenError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: any, location?: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recurringRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \nrecurringRefreshToken(refreshTokenWrapper: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenWrapper\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CryptrClientFactory.html":{"url":"classes/CryptrClientFactory.html","title":"class - CryptrClientFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CryptrClientFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.client.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createClient(configFactory: AuthClientConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.client.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configFactory\n                                    \n                                                AuthClientConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\n\nimport { AuthClientConfig } from './auth.config';\nexport class CryptrClientFactory {\n  static createClient(configFactory: AuthClientConfig): any {\n    const config = configFactory.get();\n\n    try {\n      if (!config) {\n        throw new Error(\n          'Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set'\n        );\n      } else {\n        const { httpInterceptor: { apiRequestsToSecure } } = config;\n        if (apiRequestsToSecure === undefined || apiRequestsToSecure.length === 0) {\n          throw new Error(\n            'You must specify at least one item in config.httpInterceptor.apiRequestsToSecure . Mainly use your Resource server url'\n          );\n        }\n        console.warn('Secured paths have to be decorated with \\'canActivate: [AuthGuard]\\' options');\n      }\n      return new CryptrSpa.client(config);\n    } catch (error) {\n      console.error('authclient error');\n      console.error(error);\n    }\n  }\n}\n\nexport const CryptrClientService = new InjectionToken('cryptr.client');\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorConfig.html":{"url":"interfaces/HttpInterceptorConfig.html","title":"interface - HttpInterceptorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        apiRequestsToSecure\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiRequestsToSecure\n                                    \n                                \n                                \n                                    \n                                        apiRequestsToSecure:         ApiRouteDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiRouteDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorRouteConfig.html":{"url":"interfaces/HttpInterceptorRouteConfig.html","title":"interface - HttpInterceptorRouteConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorRouteConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        httpMethod\n                                \n                                \n                                            Optional\n                                        tokenOptions\n                                \n                                \n                                        uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpMethod\n                                    \n                                \n                                \n                                    \n                                        httpMethod:         HttpMethod | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenOptions\n                                    \n                                \n                                \n                                    \n                                        tokenOptions:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshStore.html":{"url":"interfaces/RefreshStore.html","title":"interface - RefreshStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_expiration_date\n                                \n                                \n                                        refresh_expiration_date\n                                \n                                \n                                        refresh_leeway\n                                \n                                \n                                        refresh_retry\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_expiration_date\n                                    \n                                \n                                \n                                    \n                                        access_token_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_expiration_date\n                                    \n                                \n                                \n                                    \n                                        refresh_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_leeway\n                                    \n                                \n                                \n                                    \n                                        refresh_leeway:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_retry\n                                    \n                                \n                                \n                                    \n                                        refresh_retry:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenError.html":{"url":"interfaces/TokenError.html","title":"interface - TokenError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        error_description\n                                \n                                \n                                        http_response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error_description\n                                    \n                                \n                                \n                                    \n                                        error_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http_response\n                                    \n                                \n                                \n                                    \n                                        http_response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accessToken\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/abstract-navigator.ts\n            \n            injectable\n            AbstractNavigator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/account-access-button/account-access-button.component.ts\n            \n            component\n            AccountAccessButtonComponent\n            \n                0 %\n                (0/57)\n            \n        \n        \n            \n                \n                src/lib/auth.client.ts\n            \n            class\n            CryptrClientFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.client.ts\n            \n            variable\n            CryptrClientService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            injectable\n            AuthClientConfig\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorRouteConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            function\n            isHttpInterceptorRouteConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            variable\n            AuthConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/auth.interceptor.ts\n            \n            interceptor\n            AuthHttpInterceptor\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            BADGE_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            DEFAULT_SCOPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            ERROR_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            LOG_OUT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            SIGN_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_CLOSED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_OPENED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            USER_ACCOUNT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/enums.ts\n            \n            variable\n            LocalizedStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Authorization\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            AuthResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            CryptrClient\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            RefreshStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            TokenError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            function\n            windowProvider\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            variable\n            WindowService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @cryptr/cryptr-spa-js : ^0.1.10\n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9 \n        \n            @angular/core : >=9 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../auth.config.ts)\n                        \n                        \n                            Sign   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                    \n                        \n                            Defines a common set of HTTP methods.\n\n                        \n                    \n                        \n                            \n                                 Get\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 Put\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 Patch\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 Head\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n            \n        \n\n    src/lib/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Sign\n                    \n                \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : invite\n                            \n                        \n                        \n                            \n                                 In\n                            \n                        \n                        \n                            \n                                Value : signin\n                            \n                        \n                        \n                            \n                                 Up\n                            \n                        \n                        \n                            \n                                Value : signup\n                            \n                        \n                        \n                            \n                                 Refresh\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isHttpInterceptorRouteConfig   (src/.../auth.config.ts)\n                        \n                        \n                            windowProvider   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isHttpInterceptorRouteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nisHttpInterceptorRouteConfig(def)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpInterceptorRouteConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/window.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            windowProvider\n                        \n                        \n                    \n                \n            \n            \n                \nwindowProvider()\n                \n            \n\n\n\n\n            \n                \n                    Default window provider. Provides the actual window object.\n\n\n                    \n                        Returns :     Window\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nStatements\nBranches\nFunctions\nLines\n\n\n\n\n\n\n\n\n\n\n\nCryptrAngular\nFor more See our related live Doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiRouteDefinition   (src/.../auth.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n    \n        \n            \n                \n                    \n                    ApiRouteDefinition\n                \n            \n            \n                \n                        HttpInterceptorRouteConfig | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfigService   (src/.../auth.config.ts)\n                        \n                        \n                            BADGE_CLASS   (src/.../constants.ts)\n                        \n                        \n                            CryptrClientService   (src/.../auth.client.ts)\n                        \n                        \n                            DEFAULT_SCOPE   (src/.../constants.ts)\n                        \n                        \n                            ERROR_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            LocalizedStrings   (src/.../enums.ts)\n                        \n                        \n                            LOG_OUT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            SIGN_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_CLOSED   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_OPENED   (src/.../constants.ts)\n                        \n                        \n                            USER_ACCOUNT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            WindowService   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\n  'cryptr-angular.config'\n)\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BADGE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'uppercase rounded-full h-6 w-6 flex items-center justify-center bg-blue-500 text-xs text-white'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SCOPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'openid email profile'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-red-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_OUT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-yellow-500 bg-white hover:text-yellow-400 focus:outline-none focus:border-yellow-300 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SIGN_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-yellow-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_CLOSED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 transition ease-in-out duration-150 focus:outline-none'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_OPENED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 focus:outline-none focus:bg-gray-200 focus:shadow-none transition ease-in-out duration-150'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_ACCOUNT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer mt-2 w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-white bg-yellow-500 hover:bg-yellow-400 focus:outline-none focus:border-yellow-600 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n\n    src/lib/auth.client.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CryptrClientService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('cryptr.client')\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/enums.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LocalizedStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  fr: {\n    signin: 'Connexion',\n    signup: 'Inscription',\n    logOut: 'Déconnexion',\n    manageAccount: 'Mon Compte'\n  },\n  en: {\n    signin: 'Sign In',\n    signup: 'Sign Up',\n    logOut: 'Log out',\n    manageAccount: 'Manage my account'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/window.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WindowService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('Browser window')\n                        \n                    \n\n                \n                    \n                        Injection token for providing an instance of window\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
