var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AbstractNavigator.html",[0,0.841,1,1.906]],["body/injectables/AbstractNavigator.html",[0,1.228,1,2.784,2,2.129,3,0.483,4,0.483,5,0.421,6,4.348,7,2.813,8,0.255,9,1.111,10,2.235,11,4.966,12,4.783,13,1.228,14,4.457,15,1.895,16,3.408,17,1.879,18,5.713,19,2.023,20,4.457,21,1.646,22,0.039,23,1.646,24,0.448,25,1.002,26,4.457,27,0.798,28,3.408,29,4.457,30,3.679,31,3.984,32,4.457,33,3.679,34,4.457,35,4.457,36,4.457,37,4.457,38,4.457,39,2.421,40,4.457,41,1.259,42,1.002,43,1.664,44,1.036,45,2.421,46,2.129,47,1.534,48,1.534,49,0.483,50,0.849,51,2.813,52,2.421,53,4.457,54,3.408,55,2.421,56,1.7,57,2.813,58,3.408,59,2.421,60,1.142,61,3.408,62,0.021,63,0.027,64,0.021]],["title/injectables/AuthClientConfig.html",[0,0.841,65,1.127]],["body/injectables/AuthClientConfig.html",[0,1.1,2,1.807,3,0.41,4,0.41,5,0.358,8,0.216,9,0.995,10,2.058,13,1.26,15,1.609,19,2.008,21,1.475,22,0.039,23,1.475,24,0.445,25,1.028,27,0.93,39,2.056,41,1.475,42,0.898,43,0.97,44,0.88,47,1.302,48,1.302,49,0.791,50,0.721,56,1.444,60,1.338,62,0.018,63,0.025,64,0.018,65,1.475,66,1.069,67,0.82,68,3.047,69,2.389,70,2.36,71,3.993,72,1.807,73,2.894,74,2.494,75,3.079,76,2.741,77,2.494,78,2.894,79,2.494,80,2.46,81,2.494,82,2.22,83,2.22,84,2.494,85,1.444,86,1.992,87,1.609,88,1.609,89,1.609,90,1.797,91,0.797,92,2.542,93,2.22,94,2.22,95,2.22,96,2.22,97,2.22,98,2.281,99,1.688,100,1.444,101,1.302,102,2.542,103,1.807,104,0.585,105,0.209,106,1.992,107,1.609,108,1.444,109,1.807,110,0.797,111,0.797,112,0.721,113,0.797,114,0.797,115,0.721,116,0.797,117,1.444,118,1.807,119,0.651,120,1.807,121,1.807,122,1.609,123,1.807,124,2.22,125,1.179,126,1.179,127,1.444,128,1.609]],["title/interfaces/AuthConfig.html",[70,1.243,105,0.139]],["body/interfaces/AuthConfig.html",[0,1.077,3,0.397,4,0.397,5,0.347,8,0.21,9,0.974,10,1.262,13,0.773,22,0.039,24,0.52,25,1.295,27,0.987,42,0.631,43,0.94,44,0.853,47,1.262,48,1.262,49,0.785,50,0.699,56,1.399,60,1.309,62,0.017,63,0.024,64,0.017,65,1.036,66,1.036,67,0.75,68,2.5,70,2.157,74,1.752,75,2.44,76,2.173,77,1.752,79,1.752,80,1.95,81,1.752,82,1.559,83,1.559,84,1.752,85,1.399,86,1.95,87,1.559,88,1.559,89,1.559,90,1.759,91,0.773,92,2.5,93,2.173,94,2.173,95,2.173,96,2.173,97,2.173,98,2.244,99,1.661,100,1.399,101,1.262,102,2.5,103,1.752,104,0.567,105,0.205,106,2.427,107,1.559,108,1.399,109,1.752,110,1.34,111,1.34,112,1.212,113,1.34,114,1.34,115,1.212,116,1.34,117,2.427,118,3.038,119,1.011,120,3.038,121,1.752,122,1.559,123,1.752,124,2.173,125,1.142,126,1.142,127,1.399,128,1.559,129,0.773]],["title/guards/AuthGuard.html",[130,2.168,131,1.697]],["body/guards/AuthGuard.html",[0,1.22,3,0.478,4,0.478,5,0.417,8,0.252,13,1.22,15,1.876,19,2.137,21,1.938,22,0.038,23,1.938,24,0.474,25,1.18,41,1.825,43,1.759,44,1.026,45,2.398,47,1.519,48,1.519,49,0.478,50,0.841,51,2.786,60,1.656,62,0.021,63,0.027,64,0.021,131,2.462,132,3.375,133,2.786,134,4.498,135,5.449,136,5.248,137,3.375,138,2.918,139,3.375,140,4.428,141,3.375,142,5.699,143,4.616,144,5.699,145,3.375,146,3.655,147,4.049,148,3.375,149,3.375,150,4.428,151,4.428,152,3.872,153,4.943,154,5.248,155,3.375,156,2.786,157,2.398,158,2.786,159,2.398,160,3.375,161,4.428]],["title/interceptors/AuthHttpInterceptor.html",[162,2.519,163,2.168]],["body/interceptors/AuthHttpInterceptor.html",[0,1.062,3,0.39,4,0.39,5,0.34,8,0.206,10,2.285,13,1.062,15,2.143,19,1.57,21,1.424,22,0.039,23,1.424,24,0.348,25,0.867,27,0.715,31,1.954,41,1.016,43,1.764,44,0.836,49,0.39,50,0.686,60,1.878,62,0.017,63,0.024,64,0.017,67,0.546,69,2.271,70,1.964,85,1.373,90,2.003,98,1.923,99,1.016,101,1.238,104,0.779,108,2.22,117,1.923,119,0.618,122,1.53,125,1.12,146,3.673,147,3.426,152,1.954,157,1.954,159,1.954,163,2.739,164,2.751,165,2.271,166,4.45,167,1.226,168,2.751,169,2.751,170,5.263,171,4.822,172,2.751,173,4.822,174,2.751,175,2.751,176,2.751,177,1.718,178,2.751,179,2.271,180,1.373,181,1.954,182,2.271,183,4.45,184,2.271,185,3.855,186,2.751,187,2.751,188,3.855,189,2.751,190,2.751,191,2.751,192,2.751,193,2.751,194,3.673,195,2.751,196,4.822,197,3.426,198,3.855,199,2.751,200,4.45,201,2.751,202,3.012,203,2.751,204,3.182,205,3.855,206,2.751,207,3.182,208,2.751,209,2.751,210,2.751,211,2.751,212,2.751,213,2.751,214,3.855,215,2.751,216,2.751,217,3.855,218,2.751,219,2.751,220,2.751,221,2.751,222,2.751,223,2.751,224,1.016]],["title/modules/AuthModule.html",[225,2.168,226,1.906]],["body/modules/AuthModule.html",[3,0.484,4,0.484,5,0.423,13,0.943,19,1.394,21,1.264,22,0.039,23,1.264,24,0.309,25,0.769,41,1.264,43,1.916,44,1.04,46,2.137,49,0.484,50,0.853,60,1.147,62,0.021,63,0.028,64,0.021,65,1.65,67,0.633,70,2.149,72,2.137,125,1.82,131,2.485,138,2.485,158,2.824,177,2.137,180,2.23,181,2.431,225,2.431,226,3.663,227,2.431,228,2.137,229,2.824,230,4.107,231,4.107,232,3.688,233,4.107,234,2.824,235,3.421,236,2.824,237,4.336,238,3.688,239,2.824,240,2.431,241,3.421,242,3.688,243,3.421,244,4.468,245,3.421,246,4.976,247,4.976,248,3.421,249,2.431,250,3.175,251,2.824,252,3.421,253,4.468,254,2.137,255,3.421,256,4.468,257,3.421,258,3.421,259,3.421,260,3.421]],["title/interfaces/AuthResponseError.html",[105,0.139,261,1.023]],["body/interfaces/AuthResponseError.html",[3,0.42,4,0.42,5,0.367,8,0.222,9,1.013,17,1.362,22,0.038,24,0.367,27,1.008,42,0.914,49,0.807,62,0.018,63,0.025,64,0.018,67,0.656,91,0.818,104,1.007,105,0.256,110,0.818,111,0.818,112,0.74,113,0.818,114,0.818,115,0.74,116,0.818,119,1.212,129,0.818,167,0.818,224,1.096,261,1.362,262,0.995,263,2.029,264,2.029,265,0.902,266,1.362,267,0.902,268,0.902,269,0.902,270,1.362,271,0.995,272,1.096,273,1.096,274,1.235,275,1.096,276,1.096,277,1.209,278,1.362,279,1.209,280,0.995,281,1.209,282,1.749,283,1.209,284,1.209,285,2.029,286,1.209,287,1.209,288,1.209,289,1.209,290,1.209,291,1.096,292,2.167,293,1.209,294,1.209,295,1.99,296,1.99,297,1.209,298,1.209,299,1.096,300,1.096,301,1.209,302,1.209,303,1.209,304,1.209,305,1.096,306,1.209,307,1.209,308,1.209,309,1.209,310,1.096,311,1.235,312,1.209,313,1.209,314,1.209,315,1.096,316,1.096,317,1.209,318,0.902,319,0.995]],["title/injectables/AuthService.html",[0,0.841,138,1.697]],["body/injectables/AuthService.html",[0,0.448,1,1.015,2,0.581,3,0.132,4,0.132,5,0.115,8,0.07,10,2.236,12,1.787,13,0.448,15,0.517,17,1.24,19,1.88,21,0.8,22,0.039,23,0.8,24,0.195,25,0.487,27,0.848,39,1.844,41,1.986,42,1.017,43,1.403,44,0.283,45,0.661,46,0.581,47,0.419,48,0.419,49,0.132,50,0.232,52,1.155,55,1.155,56,1.846,57,0.768,60,1.83,62,0.006,63,0.01,64,0.006,65,0.6,67,0.494,72,2.024,76,0.904,80,1.295,83,2.613,85,0.464,90,1.82,100,0.464,104,0.785,108,1.295,112,0.232,115,0.405,119,1.104,124,0.517,126,1.057,127,2.018,138,1.443,143,4.052,147,3.86,152,0.661,156,1.787,157,0.661,159,0.661,167,0.597,177,0.581,179,0.768,180,0.464,181,0.661,182,0.768,184,0.768,194,4.146,202,2.426,204,1.342,207,0.768,249,1.155,250,1.155,265,1.311,266,0.312,267,0.789,268,0.985,269,0.494,270,0.545,272,0.6,273,0.344,274,0.985,275,0.344,276,0.6,280,0.545,291,1.494,292,1.494,295,1.592,296,1.874,299,0.6,300,0.6,305,0.344,310,0.959,311,0.494,315,0.959,316,0.6,318,1.273,319,0.87,320,0.768,321,4.845,322,2.596,323,2.596,324,2.596,325,2.596,326,2.596,327,2.596,328,2.629,329,2.596,330,2.596,331,2.143,332,2.143,333,0.93,334,2.596,335,1.626,336,2.596,337,0.93,338,4.845,339,5.244,340,1.626,341,0.93,342,2.596,343,0.93,344,0.93,345,2.596,346,2.143,347,4.311,348,1.626,349,2.143,350,0.93,351,1.626,352,0.93,353,0.93,354,0.93,355,0.93,356,1.626,357,1.626,358,2.596,359,3.488,360,2.879,361,2.596,362,1.626,363,5.12,364,2.596,365,3.241,366,0.93,367,0.93,368,0.93,369,2.596,370,3.7,371,2.596,372,2.596,373,3.054,374,3.879,375,3.559,376,2.596,377,2.596,378,2.596,379,2.596,380,2.596,381,2.596,382,4.044,383,4.311,384,2.165,385,1.626,386,2.596,387,1.626,388,1.626,389,1.626,390,0.93,391,2.165,392,1.626,393,0.93,394,1.626,395,2.596,396,1.626,397,1.626,398,0.768,399,0.661,400,0.661,401,0.661,402,0.93,403,1.626,404,1.626,405,0.93,406,1.626,407,0.93,408,1.626,409,0.93,410,0.93,411,0.661,412,0.93,413,0.93,414,0.93,415,0.93,416,0.93,417,1.626,418,0.93,419,0.768,420,0.93,421,0.93,422,0.93,423,1.626,424,0.93,425,0.93,426,0.93,427,0.93,428,0.93,429,0.93,430,0.93,431,1.626,432,0.93,433,1.626,434,0.93,435,1.626,436,1.342,437,1.626,438,3.241,439,0.93,440,2.165,441,1.626,442,2.165,443,1.626,444,1.342,445,1.342,446,1.626,447,0.93,448,0.93,449,2.165,450,0.93,451,0.93,452,0.93,453,0.768,454,0.93,455,0.93,456,0.93,457,0.93,458,0.93,459,0.93,460,2.596,461,1.626,462,0.93,463,0.93,464,0.93,465,0.93,466,0.93,467,0.93,468,0.93,469,0.93,470,0.93,471,0.93,472,1.626,473,0.93,474,0.93,475,0.93,476,0.93,477,0.93,478,0.93,479,0.93,480,0.93,481,0.93,482,3.488,483,1.626,484,0.93,485,2.165,486,0.93,487,0.93,488,1.626,489,0.93,490,0.93,491,0.93,492,0.93,493,0.93,494,0.93,495,0.93,496,0.93,497,2.165,498,0.93,499,0.93,500,0.93,501,0.93,502,0.768,503,0.93,504,0.93,505,0.93,506,0.93,507,2.165,508,0.93,509,0.93,510,0.93,511,1.626,512,0.93,513,1.626,514,0.93,515,0.93,516,0.93,517,0.93,518,0.93,519,0.93,520,0.93,521,0.93,522,0.93,523,0.93,524,0.93,525,0.93,526,0.93,527,0.93,528,0.93,529,0.93,530,0.93,531,0.93]],["title/interfaces/Authorization.html",[105,0.139,271,1.023]],["body/interfaces/Authorization.html",[3,0.42,4,0.42,5,0.367,8,0.222,9,1.013,17,1.362,22,0.038,24,0.367,27,1.008,42,0.914,49,0.807,62,0.018,63,0.025,64,0.018,67,0.656,91,0.818,104,1.007,105,0.256,110,0.818,111,0.818,112,0.74,113,0.818,114,0.818,115,0.74,116,0.818,119,1.212,129,0.818,167,0.818,224,1.096,261,0.995,262,0.995,263,1.209,264,1.209,265,0.902,266,1.362,267,0.902,268,0.902,269,0.902,270,1.362,271,1.362,272,1.84,273,1.84,274,1.235,275,1.096,276,1.096,277,1.209,278,1.362,279,1.209,280,0.995,281,1.209,282,1.749,283,1.209,284,1.209,285,2.029,286,1.209,287,1.209,288,1.209,289,1.209,290,1.209,291,1.096,292,2.167,293,1.209,294,1.209,295,1.99,296,1.99,297,1.209,298,1.209,299,1.096,300,1.096,301,1.209,302,1.209,303,1.209,304,1.209,305,1.096,306,1.209,307,1.209,308,1.209,309,1.209,310,1.096,311,1.235,312,1.209,313,1.209,314,1.209,315,1.096,316,1.096,317,1.209,318,0.902,319,0.995]],["title/interfaces/Config.html",[67,0.432,105,0.139]],["body/interfaces/Config.html",[3,0.387,4,0.387,5,0.338,8,0.204,9,0.957,17,1.286,22,0.038,24,0.497,25,1.238,27,1.01,42,0.863,49,0.792,62,0.017,63,0.024,64,0.017,67,0.681,91,0.753,104,0.972,105,0.251,110,1.325,111,1.325,112,1.199,113,1.325,114,1.325,115,1.199,116,1.325,119,1.238,129,0.753,167,0.753,224,1.009,261,0.916,262,0.916,263,1.113,264,1.113,265,0.831,266,1.286,267,0.831,268,0.831,269,0.831,270,1.286,271,0.916,272,1.009,273,1.009,274,1.167,275,1.009,276,1.009,277,1.959,278,1.286,279,1.113,280,0.916,281,1.113,282,1.698,283,1.113,284,1.113,285,1.959,286,1.113,287,1.113,288,1.113,289,1.113,290,1.113,291,1.009,292,2.137,293,1.113,294,1.113,295,1.94,296,1.94,297,1.113,298,1.113,299,1.009,300,1.009,301,1.113,302,1.113,303,1.113,304,1.113,305,1.009,306,1.113,307,1.113,308,1.113,309,1.113,310,1.009,311,1.167,312,1.113,313,1.113,314,1.113,315,1.009,316,1.009,317,1.113,318,0.831,319,0.916]],["title/interfaces/CryptrClient.html",[105,0.139,167,0.841]],["body/interfaces/CryptrClient.html",[3,0.246,4,0.246,5,0.215,8,0.13,9,0.682,13,0.754,17,1.487,19,2.367,21,2.051,22,0.038,23,2.051,24,0.505,25,1.249,27,1.004,41,2.146,42,0.864,49,0.701,62,0.011,63,0.017,64,0.011,67,0.681,72,3.614,91,0.479,104,0.938,105,0.22,110,0.479,111,0.479,112,0.433,113,0.479,114,0.479,115,0.433,116,0.479,119,1.139,129,0.479,167,0.754,224,1.011,261,0.582,262,0.582,263,0.708,264,0.708,265,0.528,266,0.917,267,0.528,268,0.528,269,0.528,270,0.917,271,0.582,272,0.642,273,0.642,274,1.168,275,0.642,276,1.011,277,0.708,278,1.287,279,0.708,280,0.582,281,0.708,282,1.808,283,0.708,284,0.708,285,1.564,286,0.708,287,0.708,288,0.708,289,1.564,290,1.564,291,1.418,292,2.137,293,1.115,294,1.115,295,2.067,296,2.067,297,1.115,298,1.115,299,1.011,300,1.011,301,1.115,302,1.115,303,1.115,304,1.115,305,1.418,306,1.115,307,1.564,308,1.564,309,1.115,310,1.418,311,1.168,312,1.115,313,1.115,314,1.115,315,1.418,316,1.011,317,1.115,318,0.528,319,0.582,328,1.944,331,2.259,332,2.259,360,1.434,373,3.972,453,2.259,532,2.736,533,2.736,534,2.736,535,2.736,536,2.736,537,2.736,538,2.736,539,2.736,540,2.736,541,2.736,542,2.736,543,2.736,544,2.736,545,1.737,546,2.736,547,1.737,548,1.737,549,1.737,550,1.737,551,1.737,552,1.737,553,1.737,554,1.737,555,1.737,556,1.737,557,1.737,558,1.737,559,1.737,560,1.737,561,1.737,562,1.737,563,1.737,564,1.737,565,1.737,566,1.737,567,1.737,568,1.737,569,1.737,570,1.737,571,1.737,572,1.737,573,1.737]],["title/classes/CryptrClientFactory.html",[50,0.761,254,1.906]],["body/classes/CryptrClientFactory.html",[3,0.508,4,0.508,5,0.443,8,0.268,13,1.269,19,1.46,21,1.324,22,0.039,23,1.324,24,0.324,25,0.806,30,2.959,31,2.547,33,2.959,41,1.324,43,1.705,44,1.09,49,0.652,50,0.894,52,2.547,55,2.547,59,2.547,60,1.201,62,0.022,63,0.028,64,0.022,65,1.983,67,0.721,80,1.789,86,1.789,90,2.29,104,0.724,107,2.561,117,1.789,126,2.187,131,1.993,134,2.959,177,2.239,180,1.789,242,4.2,254,2.877,280,1.8,398,2.959,399,2.547,400,2.547,401,2.547,419,2.959,436,2.959,574,3.585,575,2.547,576,4.605,577,4.605,578,3.585,579,3.585,580,4.605,581,4.605,582,3.585,583,3.585,584,3.585,585,3.585,586,3.585,587,3.585,588,3.585,589,3.585,590,3.585,591,3.585,592,3.585,593,3.585,594,3.585,595,3.585,596,3.585,597,3.585,598,2.959]],["title/interfaces/HttpInterceptorConfig.html",[105,0.139,106,1.523]],["body/interfaces/HttpInterceptorConfig.html",[0,1.174,3,0.451,4,0.451,5,0.393,8,0.238,9,1.062,10,1.432,13,0.877,22,0.039,24,0.384,25,0.715,27,0.946,42,0.715,43,1.066,44,0.967,47,1.432,48,1.432,49,0.808,50,0.793,56,1.588,60,1.427,62,0.02,63,0.026,64,0.02,65,1.175,66,1.175,67,0.779,68,2.669,70,2.177,74,1.987,75,2.66,76,2.368,77,1.987,79,1.987,80,2.125,81,1.987,82,1.769,83,1.769,84,1.987,85,1.588,86,2.125,87,1.769,88,1.769,89,1.769,90,1.917,91,0.877,92,2.669,93,2.368,94,2.368,95,2.368,96,2.368,97,2.368,98,2.667,99,1.773,100,1.588,101,1.432,102,2.669,103,1.987,104,0.643,105,0.219,106,2.395,107,2.851,108,1.588,109,1.987,110,0.877,111,0.877,112,0.793,113,0.877,114,0.877,115,0.793,116,0.877,117,1.588,118,1.987,119,0.715,120,1.987,121,1.987,122,1.769,123,1.987,124,2.368,125,1.296,126,1.296,127,1.588,128,1.769,129,0.877]],["title/interfaces/HttpInterceptorRouteConfig.html",[99,1.127,105,0.139]],["body/interfaces/HttpInterceptorRouteConfig.html",[0,1.145,3,0.435,4,0.435,5,0.379,8,0.229,9,1.036,10,1.381,13,0.846,22,0.039,24,0.456,25,1.187,27,0.963,42,0.69,43,1.028,44,0.933,47,1.381,48,1.381,49,0.802,50,0.765,56,1.531,60,1.393,62,0.019,63,0.026,64,0.019,65,1.133,66,1.133,67,0.771,68,2.621,70,2.15,74,1.917,75,2.596,76,2.311,77,1.917,79,1.917,80,2.074,81,1.917,82,1.706,83,1.706,84,1.917,85,1.531,86,2.074,87,1.706,88,1.706,89,1.706,90,1.871,91,0.846,92,3.148,93,2.311,94,2.311,95,2.311,96,2.311,97,2.311,98,2.352,99,1.866,100,1.531,101,1.381,102,2.621,103,1.917,104,0.62,105,0.215,106,2.074,107,1.706,108,2.521,109,3.155,110,0.846,111,0.846,112,0.765,113,0.846,114,0.846,115,0.765,116,0.846,117,1.531,118,1.917,119,0.69,120,1.917,121,1.917,122,1.706,123,1.917,124,2.311,125,1.25,126,1.25,127,1.531,128,1.706,129,0.846]],["title/interfaces/RefreshStore.html",[105,0.139,282,1.023]],["body/interfaces/RefreshStore.html",[3,0.406,4,0.406,5,0.354,8,0.214,9,0.988,17,1.329,22,0.038,24,0.465,27,1.005,42,0.892,49,0.801,62,0.018,63,0.024,64,0.018,67,0.644,91,0.789,104,0.992,105,0.254,110,0.789,111,0.789,112,0.714,113,0.789,114,0.789,115,0.714,116,0.789,119,1.199,129,0.789,167,0.789,224,1.058,261,0.96,262,0.96,263,1.167,264,1.167,265,0.871,266,1.329,267,0.871,268,0.871,269,0.871,270,1.329,271,0.96,272,1.058,273,1.058,274,1.206,275,1.058,276,1.058,277,1.167,278,1.329,279,1.167,280,0.96,281,1.167,282,1.786,283,1.999,284,1.999,285,2.376,286,1.999,287,1.999,288,1.999,289,1.167,290,1.167,291,1.058,292,2.154,293,1.167,294,1.167,295,1.969,296,1.969,297,1.167,298,1.167,299,1.058,300,1.058,301,1.167,302,1.167,303,1.167,304,1.167,305,1.058,306,1.167,307,1.167,308,1.167,309,1.167,310,1.058,311,1.206,312,1.167,313,1.167,314,1.167,315,1.058,316,1.058,317,1.167,318,0.871,319,0.96]],["title/interfaces/TokenError.html",[105,0.139,278,1.023]],["body/interfaces/TokenError.html",[3,0.417,4,0.417,5,0.364,8,0.22,9,1.007,17,1.354,22,0.038,24,0.416,27,1.008,42,0.908,49,0.805,62,0.018,63,0.025,64,0.018,67,0.653,91,0.811,104,1.003,105,0.256,110,0.811,111,0.811,112,0.734,113,0.811,114,0.811,115,0.734,116,0.811,119,1.208,129,0.811,167,0.811,224,1.087,261,0.986,262,0.986,263,1.199,264,1.199,265,0.895,266,1.354,267,0.895,268,0.895,269,0.895,270,1.354,271,0.986,272,1.087,273,1.087,274,1.228,275,1.087,276,1.087,277,1.199,278,1.546,279,2.022,280,1.664,281,2.022,282,1.744,283,1.199,284,1.199,285,2.022,286,1.199,287,1.199,288,1.199,289,1.199,290,1.199,291,1.087,292,2.164,293,1.199,294,1.199,295,1.985,296,1.985,297,1.199,298,1.199,299,1.087,300,1.087,301,1.199,302,1.199,303,1.199,304,1.199,305,1.087,306,1.199,307,1.199,308,1.199,309,1.199,310,1.087,311,1.228,312,1.199,313,1.199,314,1.199,315,1.087,316,1.087,317,1.199,318,0.895,319,0.986]],["title/interfaces/Tokens.html",[105,0.139,274,0.928]],["body/interfaces/Tokens.html",[3,0.419,4,0.419,5,0.366,8,0.221,9,1.01,17,1.359,22,0.038,24,0.366,25,0.911,27,1.007,42,0.911,49,0.806,62,0.018,63,0.025,64,0.018,67,0.655,91,0.815,104,1.005,105,0.256,110,0.815,111,0.815,112,0.737,113,0.815,114,0.815,115,0.737,116,0.815,119,1.262,129,0.815,167,0.815,224,1.093,261,0.991,262,0.991,263,1.205,264,1.205,265,0.899,266,1.359,267,0.899,268,0.899,269,0.899,270,1.359,271,0.991,272,1.093,273,1.093,274,1.406,275,1.837,276,1.837,277,1.205,278,1.359,279,1.205,280,0.991,281,1.205,282,1.747,283,1.205,284,1.205,285,2.027,286,1.205,287,1.205,288,1.205,289,1.205,290,1.205,291,1.093,292,2.166,293,1.205,294,1.205,295,1.988,296,1.988,297,1.205,298,1.205,299,1.093,300,1.093,301,1.205,302,1.205,303,1.205,304,1.205,305,1.093,306,1.205,307,1.205,308,1.205,309,1.205,310,1.093,311,1.233,312,1.205,313,1.205,314,1.205,315,1.093,316,1.093,317,1.205,318,0.899,319,0.991]],["title/interfaces/User.html",[105,0.139,318,0.928]],["body/interfaces/User.html",[3,0.425,4,0.425,5,0.371,8,0.224,9,1.021,17,1.373,22,0.038,24,0.271,27,1.008,42,0.921,49,0.809,62,0.018,63,0.025,64,0.018,67,0.66,91,0.828,104,1.012,105,0.257,110,0.828,111,0.828,112,0.749,113,0.828,114,0.828,115,0.749,116,0.828,119,1.216,129,0.828,167,0.828,224,1.11,261,1.007,262,1.007,263,1.224,264,1.224,265,0.913,266,1.373,267,0.913,268,0.913,269,0.913,270,1.373,271,1.007,272,1.11,273,1.11,274,1.246,275,1.11,276,1.11,277,1.224,278,1.373,279,1.224,280,1.007,281,1.224,282,1.756,283,1.224,284,1.224,285,2.04,286,1.224,287,1.224,288,1.224,289,1.224,290,1.224,291,1.11,292,2.171,293,1.224,294,1.224,295,1.997,296,1.997,297,1.224,298,1.224,299,1.11,300,1.11,301,1.224,302,1.224,303,1.224,304,1.224,305,1.11,306,1.224,307,1.224,308,1.224,309,1.224,310,1.11,311,1.246,312,1.224,313,1.224,314,1.224,315,1.11,316,1.11,317,1.224,318,1.246,319,1.678]],["title/coverage.html",[599,3.418]],["body/coverage.html",[0,1.301,1,1.924,5,0.381,6,2.542,7,2.542,22,0.038,24,0.278,50,0.768,59,4.397,62,0.019,63,0.026,64,0.019,65,1.137,66,2.012,67,0.436,70,1.254,99,1.137,100,2.079,101,1.386,105,0.267,106,1.537,125,1.254,126,1.254,130,2.188,131,1.712,133,2.542,138,1.712,162,2.542,163,2.188,165,2.542,167,0.849,180,1.537,237,2.188,250,2.96,251,2.542,254,1.924,261,1.032,262,1.899,271,1.032,274,0.936,278,1.032,282,1.032,318,0.936,320,2.542,411,2.188,575,2.96,599,2.542,600,3.08,601,3.08,602,2.542,603,3.08,604,3.08,605,3.08,606,3.08,607,2.542,608,3.08,609,4.722,610,5.902,611,5.902,612,3.08,613,3.08,614,3.08,615,4.166,616,3.08,617,5.059,618,3.898,619,3.08,620,4.677,621,2.542,622,2.542,623,2.542,624,2.542,625,2.542,626,2.542,627,2.542,628,2.542,629,2.542,630,3.08,631,3.08,632,3.08,633,2.96,634,2.542,635,4.166,636,2.542,637,3.08,638,3.08]],["title/dependencies.html",[228,2.288,639,2.56]],["body/dependencies.html",[22,0.037,44,1.413,46,2.902,62,0.029,63,0.033,64,0.029,228,3.372,399,3.301,400,3.301,401,3.301,640,4.646,641,4.646,642,4.646,643,4.646,644,5.398]],["title/miscellaneous/enumerations.html",[645,1.043,646,3.024]],["body/miscellaneous/enumerations.html",[8,0.317,13,1.167,22,0.038,62,0.026,63,0.031,64,0.026,66,1.564,68,2.355,87,2.355,88,2.355,89,2.355,92,2.841,93,2.841,94,2.841,95,2.841,96,2.841,97,2.841,202,3.823,262,1.42,265,1.554,266,1.712,267,1.288,268,1.288,269,1.288,270,1.712,645,1.725,646,3.496,647,2.646,648,4.236]],["title/miscellaneous/functions.html",[645,1.043,649,2.603]],["body/miscellaneous/functions.html",[8,0.335,21,1.654,22,0.036,23,1.654,25,1.007,41,1.951,62,0.028,63,0.033,64,0.028,66,1.654,99,1.654,101,2.377,102,2.49,311,1.361,359,3.181,633,3.181,634,4.638,645,1.824,647,2.797,649,3.181,650,3.696,651,4.478,652,4.638,653,4.478,654,4.478,655,4.478]],["title/index.html",[8,0.191,656,2.56,657,2.56]],["body/index.html",[22,0.034,62,0.029,63,0.034,64,0.029,82,2.633,349,3.909,602,3.909,649,3.365,658,4.736,659,4.736,660,4.736,661,4.736,662,4.736,663,4.736]],["title/modules.html",[227,2.942]],["body/modules.html",[22,0.034,62,0.029,63,0.034,64,0.029,226,2.991,227,3.402,664,4.788,665,4.788,666,4.788,667,4.788]],["title/overview.html",[668,3.418]],["body/overview.html",[2,2.699,22,0.036,50,1.077,62,0.027,63,0.032,64,0.027,129,1.191,130,3.07,197,4.075,225,3.674,226,3.718,228,2.699,229,3.567,230,3.567,231,3.567,232,3.567,233,3.567,234,3.567,236,3.567,237,4.338,238,4.269,239,3.567,240,3.07,607,3.567,668,3.567,669,4.321,670,3.567,671,4.321]],["title/miscellaneous/typealiases.html",[645,1.043,672,3.664]],["body/miscellaneous/typealiases.html",[8,0.353,22,0.035,24,0.426,27,0.758,62,0.029,63,0.034,64,0.029,66,1.744,98,2.719,99,1.744,645,1.924,647,2.95,673,4.723]],["title/miscellaneous/variables.html",[645,1.043,674,3.024]],["body/miscellaneous/variables.html",[8,0.168,22,0.037,24,0.481,27,0.838,62,0.014,63,0.02,64,0.014,66,0.828,86,1.119,125,1.355,126,1.615,127,1.119,128,1.247,180,1.66,197,2.364,202,3.48,240,3.61,249,1.594,265,1.012,267,1.012,268,0.682,269,1.012,311,0.682,319,0.752,328,2.364,346,1.852,359,3.958,374,1.852,375,1.852,411,2.364,444,1.852,445,1.852,502,4.194,575,1.594,598,1.852,618,2.746,620,1.852,621,2.746,622,2.746,623,2.746,624,2.746,625,2.746,626,2.746,627,2.746,628,1.852,629,2.746,633,1.594,636,2.746,645,0.914,647,1.401,650,1.852,652,2.746,670,2.746,674,1.852,675,5.219,676,2.243,677,2.243,678,4.686,679,5.081,680,3.966,681,2.243,682,5.219,683,3.966,684,5.331,685,5.081,686,5.424,687,3.966,688,4.686,689,2.243,690,5.081,691,5.68,692,3.966,693,4.686,694,3.327,695,3.327,696,4.909,697,4.387,698,4.909,699,5.219,700,4.387,701,4.387,702,4.909,703,4.909,704,4.387,705,5.219,706,2.243,707,4.387,708,3.327,709,3.327,710,4.909,711,5.081,712,4.909,713,4.909,714,4.909,715,4.909,716,3.327,717,3.327,718,5.331,719,2.243,720,3.327,721,3.327,722,2.243,723,3.966,724,3.327,725,3.327,726,4.686,727,3.327,728,3.327,729,3.327,730,3.327,731,3.966,732,2.243,733,2.243,734,2.243,735,2.243,736,2.243,737,2.243,738,2.243,739,3.327,740,2.243,741,2.243,742,2.243,743,2.243,744,2.243,745,2.243,746,2.243,747,2.243]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":59,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["0.1.10",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":615,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["0/57",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":197,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":618,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":671,"title":{},"body":{"overview.html":{}}}],["150",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16/16",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["2/5",{"_index":613,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":670,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["300",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["40",{"_index":612,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["500",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["600",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["abstractnavigator",{"_index":1,"title":{"injectables/AbstractNavigator.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["access_token",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_expiration_date",{"_index":284,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["accesstoken",{"_index":276,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["account",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["accountaccessbuttoncomponent",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["action",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroute",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["activatedroutesnapshot",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["actual",{"_index":655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aliases",{"_index":673,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular.config",{"_index":128,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["angular/common",{"_index":46,"title":{},"body":{"injectables/AbstractNavigator.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":175,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["angular/core",{"_index":44,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"dependencies.html":{}}}],["angular/router",{"_index":45,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["apirequeststosecure",{"_index":107,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["apirequeststosecure.length",{"_index":584,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["apiroutedefinition",{"_index":98,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/typealiases.html":{}}}],["args",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["asterisk",{"_index":209,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["async",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["atoken",{"_index":183,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["audience",{"_index":112,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["audience.concat(stateurl",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":140,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth.client",{"_index":181,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["auth.config",{"_index":177,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["auth.guard",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":158,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["authclientconfig",{"_index":65,"title":{"injectables/AuthClientConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authclientconfig.set",{"_index":583,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["authconfig",{"_index":70,"title":{"interfaces/AuthConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["authconfigservice",{"_index":125,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentiation",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticate",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticated",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationinprogress",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":131,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["authhttpinterceptor",{"_index":163,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["authmodule",{"_index":226,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule.forroot",{"_index":582,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["authorization",{"_index":271,"title":{"interfaces/Authorization.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authorization_id",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponseerror",{"_index":261,"title":{"interfaces/AuthResponseError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["authservice",{"_index":138,"title":{"injectables/AuthService.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["available",{"_index":34,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["await",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["axiosrequestconfig",{"_index":550,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["back",{"_index":37,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["badge_class",{"_index":621,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":192,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["behaviorsubject",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(null",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["behaviorsubject(true",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["bg",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blue",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bold",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["bootstrap",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["border",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branches",{"_index":658,"title":{},"body":{"index.html":{}}}],["browse",{"_index":667,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":664,"title":{},"body":{"modules.html":{}}}],["button.component",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["button.component.ts",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["button/account",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{}}}],["call",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["callback",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["callback(isauthenticated",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["canactivate",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CryptrClientFactory.html":{}}}],["canactivate(next",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivatechild(childroute",{"_index":148,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canattachtoken",{"_index":199,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["canhandleauthentication",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["canhandleauthentication(searchparams",{"_index":313,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canhandleinvitation",{"_index":532,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canhandleinvitation(searchparams",{"_index":314,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["canload",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canload(route",{"_index":151,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canrefresh",{"_index":533,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["canrefresh(refreshstore",{"_index":306,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["catch",{"_index":55,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["catch((err",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch((error",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["center",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkauthentication",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["childroute",{"_index":150,"title":{},"body":{"guards/AuthGuard.html":{}}}],["chosen",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":50,"title":{"classes/CryptrClientFactory.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":574,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["cleanroutestate",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["cleanurltree(sourceurltree",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id",{"_index":111,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cluster_authmodule",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_bootstrap",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_declarations",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":669,"title":{},"body":{"overview.html":{}}}],["code",{"_index":273,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["combinelatest",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["common",{"_index":88,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["commonmodule",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["component",{"_index":607,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["compte",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":67,"title":{"interfaces/Config.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["config.default_locale",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.default_redirect_uri",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["config.httpinterceptor.apirequeststosecure",{"_index":587,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["configfactory",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["configfactory.get",{"_index":579,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["configuration",{"_index":80,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["connexion",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error('authclient",{"_index":597,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["console.error('handling",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(error",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["console.error(tokens",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('can",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('tokens",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(tokens",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.warn('secured",{"_index":592,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["const",{"_index":90,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["constructor(@optional",{"_index":121,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["constructor(auth",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(config",{"_index":69,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["constructor(location",{"_index":16,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"injectables/AbstractNavigator.html":{},"guards/AuthGuard.html":{}}}],["consumers",{"_index":75,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["coverage",{"_index":599,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createclient",{"_index":576,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["createclient(configfactory",{"_index":577,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["cryptr",{"_index":127,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["cryptr/cryptr",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["cryptr_base_url",{"_index":116,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["cryptrangular",{"_index":660,"title":{},"body":{"index.html":{}}}],["cryptrclient",{"_index":167,"title":{"interfaces/CryptrClient.html":{}},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["cryptrclientfactory",{"_index":254,"title":{"classes/CryptrClientFactory.html":{}},"body":{"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{}}}],["cryptrclientfactory.createclient",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["cryptrclientservice",{"_index":180,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptrspa",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["cryptrspa.client(config",{"_index":596,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["current",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationobservable",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentauthenticationstate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["currenturltree",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["cursor",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["decorated",{"_index":594,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["decoratedrequest",{"_index":534,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["decoratedrequest(axiosrequestconfig",{"_index":317,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["def",{"_index":102,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/functions.html":{}}}],["default",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_locale",{"_index":115,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_redirect_uri",{"_index":113,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["default_scope",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultauthenticationcallback(isauthenticated",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["defined",{"_index":19,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{}}}],["defines",{"_index":87,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["delete",{"_index":96,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":228,"title":{"dependencies.html":{}},"body":{"modules/AuthModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deps",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["description",{"_index":39,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}}}],["destroy",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["doc",{"_index":663,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["duration",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["déconnexion",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ease",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":319,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["en",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["ends",{"_index":208,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["enum",{"_index":91,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["enumerations",{"_index":646,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":280,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["error_btn_class",{"_index":622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_description",{"_index":281,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["errors",{"_index":562,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["example",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["exports",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["failed",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["falls",{"_index":36,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["false",{"_index":204,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["field",{"_index":263,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["filter",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["filter(([isloading",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["finally",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["finalreq",{"_index":185,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["finalscope",{"_index":535,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["finalscope(scope",{"_index":293,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["findmatchingroute",{"_index":221,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first",{"_index":178,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["first((route",{"_index":223,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["flex",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:bg",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:border",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:outline",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["focus:shadow",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["font",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroot",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroot(config",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["fr",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["fragment",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.config.httpinterceptor.apirequeststosecure).pipe",{"_index":222,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["from(this.cryptrclient.isauthenticated",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.logout(this.prelogoutcallback(callback",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signinwithredirect(scope",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["from(this.cryptrclient.signupwithredirect(scope",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["full",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fullauthenticateprocess",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":100,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["functions",{"_index":649,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["getaccesstoken",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["getclaimsfromaccess",{"_index":536,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["getclaimsfromaccess(accesstoken",{"_index":312,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getclientuser",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcurrentaccesstoken",{"_index":289,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getcurrentidtoken",{"_index":290,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["getidtoken",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["getobservableuser",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["getrefreshstore",{"_index":307,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gets",{"_index":74,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["getting",{"_index":656,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":310,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["gray",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":130,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["h",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["handled",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["handleinvitationstate",{"_index":537,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handleinvitationstate(scope",{"_index":302,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlenewtokens",{"_index":538,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handlenewtokens(refreshstore",{"_index":304,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handleredirectcallback",{"_index":305,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handlerefreshtokens",{"_index":308,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["handletokens(tokens",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["handletokenserrors",{"_index":539,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["handletokenserrors(errors",{"_index":303,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["has_ssr",{"_index":118,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["head",{"_index":97,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["headers",{"_index":190,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["hover:bg",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:shadow",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hover:text",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":89,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["http://localhsot:4201",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["http_response",{"_index":279,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["httpevent",{"_index":174,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httphandler",{"_index":171,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["httpinterceptor",{"_index":117,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpinterceptorconfig",{"_index":106,"title":{"interfaces/HttpInterceptorConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["httpinterceptorrouteconfig",{"_index":99,"title":{"interfaces/HttpInterceptorRouteConfig.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["httpinterceptorrouteconfig).uri",{"_index":103,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["httpmethod",{"_index":92,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["httprequest",{"_index":170,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["id",{"_index":272,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["id_token",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["identifier",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":194,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["iif",{"_index":176,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["implements",{"_index":159,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["import",{"_index":43,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["imports",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["inject",{"_index":85,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(authconfigservice",{"_index":122,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["inject(cryptrclientservice",{"_index":182,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{}},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"injectables/AuthService.html":{},"overview.html":{}}}],["injection",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":86,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('browser",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('cryptr.client",{"_index":598,"title":{},"body":{"classes/CryptrClientFactory.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":18,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["injector.get(router",{"_index":54,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["inline",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inscription",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["instance",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":166,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["intercept(req",{"_index":169,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interceptor",{"_index":162,"title":{"interceptors/AuthHttpInterceptor.html":{}},"body":{"coverage.html":{}}}],["interceptors",{"_index":164,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["interface",{"_index":105,"title":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":129,"title":{},"body":{"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invitation",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["invite",{"_index":266,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["invitewithoutredirect",{"_index":540,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithoutredirect(scope",{"_index":298,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["invitewithredirect",{"_index":541,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["invitewithredirect(scope",{"_index":301,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["isauthenticated",{"_index":291,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["ishttpinterceptorrouteconfig",{"_index":101,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(def",{"_index":651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ishttpinterceptorrouteconfig(route",{"_index":216,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["isloading",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["item",{"_index":586,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["items",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["justify",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leading",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["lg",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lines",{"_index":659,"title":{},"body":{"index.html":{}}}],["live",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["locale",{"_index":296,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["localizedstrings",{"_index":629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["location",{"_index":17,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["log",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log_out_btn_class",{"_index":623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logout",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"miscellaneous/variables.html":{}}}],["logout(callback",{"_index":316,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["mainly",{"_index":588,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["manage",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manageaccount",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["map(([isloading",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["match",{"_index":210,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["matching",{"_index":63,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["md",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":264,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["methods",{"_index":13,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":645,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":225,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["modules",{"_index":227,"title":{"modules.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["mon",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":661,"title":{},"body":{"index.html":{}}}],["mt",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":23,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["navigate",{"_index":40,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl",{"_index":14,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigatebyurl(url",{"_index":26,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigates",{"_index":29,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["navigator.ts",{"_index":7,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["navigator.ts:22",{"_index":28,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["navigator.ts:9",{"_index":20,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["new",{"_index":126,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newparams",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpath",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":146,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{}}}],["next.handle(finalreq",{"_index":193,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["ngmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["ngondestroy",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["ngunsubscribe",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["none",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notes",{"_index":84,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["null",{"_index":224,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["number",{"_index":285,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["object",{"_index":311,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":147,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["observableauthenticated",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["ondestroy",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["one",{"_index":33,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{}}}],["openid",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["opens",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["optional",{"_index":25,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/Tokens.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":595,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["other_key",{"_index":120,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["otherwise",{"_index":35,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["out",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":668,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":639,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["param",{"_index":56,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["patch",{"_index":95,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["path",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["path).tostring",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["paths",{"_index":593,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["peer",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["performs",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["pointer",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":93,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["prelogoutcallback(callback",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["private",{"_index":10,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["process",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["profile",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["profile&quot",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["progress",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":292,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["properties",{"_index":9,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["provide",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["providedin",{"_index":47,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["provider",{"_index":653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["provides",{"_index":654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providing",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["put",{"_index":94,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["px",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["py",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparams",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;en&quot",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;fr&quot",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["quot;http://localhsot:4201&quot",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":81,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["read:invoices",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["read:invoices&quot",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["recurringrefreshtoken",{"_index":542,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["recurringrefreshtoken(refreshtokenwrapper",{"_index":309,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["red",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirection",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirecturi",{"_index":295,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["reerror",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh",{"_index":270,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["refresh_expiration_date",{"_index":286,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_leeway",{"_index":287,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_retry",{"_index":288,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refresh_token",{"_index":283,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["refreshstore",{"_index":282,"title":{"interfaces/RefreshStore.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["refreshtokens",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenwrapper",{"_index":568,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["region",{"_index":114,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["related",{"_index":662,"title":{},"body":{"index.html":{}}}],["relative",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":173,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.clone",{"_index":189,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["req.headers.set('authorization",{"_index":191,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request",{"_index":200,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.method",{"_index":218,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["request.url.startswith(value.substr(0",{"_index":215,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["requested",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestpath",{"_index":205,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["reset",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["resetauthentication(isauthenticated",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":590,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["result",{"_index":62,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":64,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieving/opening",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["returns",{"_index":41,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"miscellaneous/functions.html":{}}}],["rigerror",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["root",{"_index":48,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["rounded",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":152,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["route.httpmethod",{"_index":217,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["routecleanedpath",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["router",{"_index":12,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["routerstatesnapshot",{"_index":144,"title":{},"body":{"guards/AuthGuard.html":{}}}],["row",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":157,"title":{},"body":{"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["rxjs/operators",{"_index":179,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["scope",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["scopes",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["searchparams",{"_index":546,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["see",{"_index":82,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"index.html":{}}}],["segments",{"_index":153,"title":{},"body":{"guards/AuthGuard.html":{}}}],["separator",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":591,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["service",{"_index":76,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["session",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":68,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"miscellaneous/enumerations.html":{}}}],["set(config",{"_index":77,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["sets",{"_index":79,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["settimeout",{"_index":57,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{}}}],["settings",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["setuser(newuser",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["shadow",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign",{"_index":265,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sign_btn_class",{"_index":624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["signin",{"_index":267,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signinwithoutredirect",{"_index":543,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signinwithoutredirect(scope",{"_index":294,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signinwithredirect",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signinwithredirect(\"email",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(&quot;email",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinwithredirect(scope",{"_index":299,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signup",{"_index":269,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signupwithoutredirect",{"_index":544,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["signupwithoutredirect(scope",{"_index":297,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["signupwithredirect",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["signupwithredirect(\"email",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(&quot;email",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwithredirect(scope",{"_index":300,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["sourceurltree",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.fragment",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["sourceurltree.queryparams",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["spa",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{},"dependencies.html":{}}}],["space",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["specified",{"_index":30,"title":{},"body":{"injectables/AbstractNavigator.html":{},"classes/CryptrClientFactory.html":{}}}],["specify",{"_index":585,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["src/.../auth.client.ts",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.config.ts",{"_index":647,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../enums.ts",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../window.ts",{"_index":650,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/abstract",{"_index":6,"title":{},"body":{"injectables/AbstractNavigator.html":{},"coverage.html":{}}}],["src/lib/account",{"_index":605,"title":{},"body":{"coverage.html":{}}}],["src/lib/auth.client.ts",{"_index":575,"title":{},"body":{"classes/CryptrClientFactory.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.client.ts:6",{"_index":578,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["src/lib/auth.config.ts",{"_index":66,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/auth.config.ts:49",{"_index":71,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:61",{"_index":78,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.config.ts:68",{"_index":73,"title":{},"body":{"injectables/AuthClientConfig.html":{}}}],["src/lib/auth.guard.ts",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/lib/auth.guard.ts:18",{"_index":139,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:21",{"_index":155,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:25",{"_index":145,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.guard.ts:32",{"_index":149,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/lib/auth.interceptor.ts",{"_index":165,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"coverage.html":{}}}],["src/lib/auth.interceptor.ts:23",{"_index":168,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.interceptor.ts:29",{"_index":172,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["src/lib/auth.module.ts",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.module.ts:16",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/lib/auth.service.ts",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/lib/auth.service.ts:114",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:143",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:162",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:205",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:213",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:221",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:243",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:251",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:259",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:267",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:275",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:283",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:291",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:300",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/auth.service.ts:316",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/lib/utils/constants.ts",{"_index":620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/enums.ts",{"_index":628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/lib/utils/types.ts",{"_index":262,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/utils/types.ts:48",{"_index":553,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:49",{"_index":554,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:50",{"_index":565,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:51",{"_index":551,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:52",{"_index":569,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:53",{"_index":571,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:54",{"_index":563,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:55",{"_index":570,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:56",{"_index":572,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:57",{"_index":564,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:58",{"_index":557,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:59",{"_index":561,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:60",{"_index":558,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:61",{"_index":559,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:62",{"_index":548,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:63",{"_index":555,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:64",{"_index":560,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:65",{"_index":567,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:66",{"_index":556,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:67",{"_index":552,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:68",{"_index":545,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:69",{"_index":547,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:70",{"_index":573,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:71",{"_index":566,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/utils/types.ts:72",{"_index":549,"title":{},"body":{"interfaces/CryptrClient.html":{}}}],["src/lib/window.ts",{"_index":633,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":657,"title":{"index.html":{}},"body":{}}],["startswith",{"_index":212,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["state",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["statements",{"_index":602,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stateurl",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["stateurl.split('?')[0",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["static",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{},"classes/CryptrClientFactory.html":{}}}],["still",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":27,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stripqueryfrom(uri",{"_index":195,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["subject",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["sugnup",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["support",{"_index":665,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":666,"title":{},"body":{"modules.html":{}}}],["table",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["telemetry",{"_index":277,"title":{},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["tenant_domain",{"_index":110,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["testprimitive",{"_index":201,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route",{"_index":220,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["testprimitive(route.uri",{"_index":219,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["text",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.auth.fullauthenticateprocess(state.url",{"_index":161,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.auth.observableauthenticated",{"_index":160,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.authenticate",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.asobservable",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.next(newauthenticated",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authenticated$.value",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.canattachtoken(route",{"_index":188,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.canhandleauthentication",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.checkauthentication",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanroutestate",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cleanurltree(currenturltree",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":124,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.config.httpinterceptor.apirequeststosecure.foreach(route",{"_index":187,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.config.httpinterceptor?.apirequeststosecure",{"_index":186,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.configfactory.get().has_ssr",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleauthentication",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.canhandleinvitation",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.config",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentaccesstoken",{"_index":184,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["this.cryptrclient.getcurrentidtoken",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.getuser",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handleredirectcallback",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.handlerefreshtokens",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.isauthenticated",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cryptrclient.useraccountaccess",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.defaultauthenticationcallback(isauthenticated",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handleredirectcallback().then((tokens",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handletokens(tokens",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then((isauthenticated",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isauthenticated().then(async",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.asobservable",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isloading$.next(false",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.path",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(this.routecleanedpath",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.location.replacestate(url",{"_index":61,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.logout(null",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.complete",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ngunsubscribe$.next",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(false",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.resetauthentication(isauthenticated",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router",{"_index":53,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.createurltree([path",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.router.navigatebyurl(url",{"_index":58,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["this.router.parseurl(path",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.set(config",{"_index":123,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["this.setuser(null",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.setuser(this.getclientuser",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signinwithredirect(default_scope",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.stripqueryfrom(request.url",{"_index":206,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["this.updatecurrentauthstate(false",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(handled",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(isauthenticated",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updatecurrentauthstate(valid",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.asobservable",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.next(newuser",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.user$.value",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["through",{"_index":581,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["throw",{"_index":580,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["todo",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["toggle_cass_closed",{"_index":625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toggle_cass_opened",{"_index":626,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["tokenerror",{"_index":278,"title":{"interfaces/TokenError.html":{}},"body":{"interfaces/AuthResponseError.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["tokenoptions",{"_index":109,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["tokens",{"_index":274,"title":{"interfaces/Tokens.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["transition",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transparent",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":207,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{}}}],["try",{"_index":52,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthService.html":{},"classes/CryptrClientFactory.html":{}}}],["tslib",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":24,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"guards/AuthGuard.html":{},"interceptors/AuthHttpInterceptor.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":672,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["undefined",{"_index":104,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"classes/CryptrClientFactory.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["up",{"_index":268,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["updatecurrentauthstate(newauthenticated",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["uppercase",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uri",{"_index":108,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["uri.indexof",{"_index":196,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["uri.substr(0",{"_index":198,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["url",{"_index":31,"title":{},"body":{"injectables/AbstractNavigator.html":{},"interceptors/AuthHttpInterceptor.html":{},"classes/CryptrClientFactory.html":{}}}],["urlsegment",{"_index":154,"title":{},"body":{"guards/AuthGuard.html":{}}}],["urltree",{"_index":156,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["usage",{"_index":83,"title":{},"body":{"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"injectables/AuthService.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{}}}],["use",{"_index":589,"title":{},"body":{"classes/CryptrClientFactory.html":{}}}],["used",{"_index":32,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["usefactory",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":318,"title":{"interfaces/User.html":{}},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["user_account_btn_class",{"_index":627,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["useraccountaccess",{"_index":315,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["usevalue",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["using",{"_index":211,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["utils/constants",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["utils/types",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["valid",{"_index":275,"title":{},"body":{"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["value",{"_index":202,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{},"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.indexof",{"_index":213,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.length",{"_index":214,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["value.trim",{"_index":203,"title":{},"body":{"interceptors/AuthHttpInterceptor.html":{}}}],["variable",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":674,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":42,"title":{},"body":{"injectables/AbstractNavigator.html":{},"injectables/AuthClientConfig.html":{},"interfaces/AuthConfig.html":{},"interfaces/AuthResponseError.html":{},"injectables/AuthService.html":{},"interfaces/Authorization.html":{},"interfaces/Config.html":{},"interfaces/CryptrClient.html":{},"interfaces/HttpInterceptorConfig.html":{},"interfaces/HttpInterceptorRouteConfig.html":{},"interfaces/RefreshStore.html":{},"interfaces/TokenError.html":{},"interfaces/Tokens.html":{},"interfaces/User.html":{}}}],["w",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["white",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitespace",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["window",{"_index":652,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_expired",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.addeventlistener(cryptrspa.events.refresh_invalid_grant",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.history.replacestate",{"_index":38,"title":{},"body":{"injectables/AbstractNavigator.html":{}}}],["window.location",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["windowprovider",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["windowservice",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["x",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xl",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["xs",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yellow",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":72,"title":{},"body":{"injectables/AuthClientConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CryptrClient.html":{}}}],["zoom",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AbstractNavigator.html":{"url":"injectables/AbstractNavigator.html","title":"injectable - AbstractNavigator","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AbstractNavigator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/abstract-navigator.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateByUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, injector: Injector)\n                    \n                \n                        \n                            \n                                Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                        Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        injector\n                                                  \n                                                        \n                                                                        Injector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            navigateByUrl\n                        \n                        \n                    \n                \n            \n            \n                \nnavigateByUrl(url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/abstract-navigator.ts:22\n                \n            \n\n\n            \n                \n                    Navigates to the specified url. The router will be used if one is available, otherwise it falls back\nto window.history.replaceState.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The url to navigate to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/abstract-navigator.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AbstractNavigator {\n  private readonly router: Router;\n\n  constructor(private location: Location, injector: Injector) {\n    try {\n      this.router = injector.get(Router);\n    } catch {}\n  }\n\n  /**\n   * Navigates to the specified url. The router will be used if one is available, otherwise it falls back\n   * to `window.history.replaceState`.\n   * @param url The url to navigate to\n   */\n  navigateByUrl(url: string): void {\n    if (this.router) {\n      setTimeout(() => {\n        this.router.navigateByUrl(url);\n      }, 0);\n\n      return;\n    }\n\n    this.location.replaceState(url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthClientConfig.html":{"url":"injectables/AuthClientConfig.html","title":"injectable - AuthClientConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthClientConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:68\n                \n            \n\n\n            \n                \n                    Gets the config that has been set by other consumers of the service\n\n\n                    \n                        Returns :         AuthConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            set\n                        \n                        \n                    \n                \n            \n            \n                \nset(config: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.config.ts:61\n                \n            \n\n\n            \n                \n                    Sets configuration to be read by other consumers of the service (see usage notes)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The configuration to set\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AuthConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/auth.config.ts:49\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthConfig.html":{"url":"interfaces/AuthConfig.html","title":"interface - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        has_ssr\n                                \n                                \n                                        httpInterceptor\n                                \n                                \n                                            Optional\n                                        other_key\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        has_ssr\n                                    \n                                \n                                \n                                    \n                                        has_ssr:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpInterceptor\n                                    \n                                \n                                \n                                    \n                                        httpInterceptor:         HttpInterceptorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpInterceptorConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        other_key\n                                    \n                                \n                                \n                                    \n                                        other_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/lib/auth.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                canActivateChild\n                            \n                            \n                                canLoad\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.guard.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    next\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivateChild\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    childRoute\n                                    \n                                                ActivatedRouteSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    state\n                                    \n                                                RouterStateSnapshot\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canLoad\n                        \n                        \n                    \n                \n            \n            \n                \ncanLoad(route: Route, segments: UrlSegment[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.guard.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    segments\n                                    \n                                            UrlSegment[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  CanActivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n  CanActivateChild,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService) { }\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable {\n    return this.auth.observableAuthenticated();\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    return this.auth.fullAuthenticateProcess(state.url);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interceptors/AuthHttpInterceptor.html":{"url":"interceptors/AuthHttpInterceptor.html","title":"interceptor - AuthHttpInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Interceptors\n  AuthHttpInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.interceptor.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: AuthConfig, cryptrClient: any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/auth.interceptor.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptrClient\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(req: HttpRequest, next: HttpHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.interceptor.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            HttpRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                HttpHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n} from '@angular/common/http';\n\nimport { Observable, from, of, iif } from 'rxjs';\nimport { Injectable, Inject } from '@angular/core';\n\nimport {\n  AuthConfig,\n  AuthConfigService,\n  HttpInterceptorRouteConfig,\n  ApiRouteDefinition,\n  isHttpInterceptorRouteConfig,\n} from './auth.config';\n\nimport { first } from 'rxjs/operators';\nimport { CryptrClientService } from './auth.client';\n\n@Injectable()\nexport class AuthHttpInterceptor implements HttpInterceptor {\n  constructor(\n    @Inject(AuthConfigService) private config: AuthConfig,\n    @Inject(CryptrClientService) private cryptrClient: any\n  ) { }\n\n  intercept(\n    req: HttpRequest,\n    next: HttpHandler\n  ): Observable> {\n    const aToken = this.cryptrClient.getCurrentAccessToken();\n    let finalReq = req;\n\n    if (this.config.httpInterceptor?.apiRequestsToSecure !== undefined && aToken !== undefined) {\n      this.config.httpInterceptor.apiRequestsToSecure.forEach(route => {\n        if (this.canAttachToken(route, req)) {\n\n          finalReq = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${aToken}`),\n          });\n        }\n      });\n    }\n    return next.handle(finalReq);\n  }\n\n  /**\n   * @ignore\n   */\n  private stripQueryFrom(uri: string): string {\n    if (uri.indexOf('?') > -1) {\n      uri = uri.substr(0, uri.indexOf('?'));\n    }\n\n    if (uri.indexOf('#') > -1) {\n      uri = uri.substr(0, uri.indexOf('#'));\n    }\n\n    return uri;\n  }\n\n  /**\n   * @ignore\n   */\n  private canAttachToken(\n    route: ApiRouteDefinition,\n    request: HttpRequest\n  ): boolean {\n    const testPrimitive = (value: string) => {\n      if (value) {\n        value.trim();\n      }\n\n      if (!value) {\n        return false;\n      }\n\n      const requestPath = this.stripQueryFrom(request.url);\n\n      if (value === requestPath) {\n        return true;\n      }\n\n      // If the URL ends with an asterisk, match using startsWith.\n      if (\n        value.indexOf('*') === value.length - 1 &&\n        request.url.startsWith(value.substr(0, value.length - 1))\n      ) {\n        return true;\n      }\n    };\n\n    if (isHttpInterceptorRouteConfig(route)) {\n      if (route.httpMethod && route.httpMethod !== request.method) {\n        return false;\n      }\n\n      return testPrimitive(route.uri);\n    }\n\n    return testPrimitive(route);\n  }\n\n  /**\n   * @ignore\n   */\n  private findMatchingRoute(\n    request: HttpRequest\n  ): Observable {\n    return from(this.config.httpInterceptor.apiRequestsToSecure).pipe(\n      first((route) => this.canAttachToken(route, request), null)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_bootstrap\n\n\n\ncluster_AuthModule_declarations\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AccountAccessButtonComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: AuthConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.module.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                AuthConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AuthConfig, AuthConfigService, AuthClientConfig } from './auth.config';\nimport { AuthGuard } from './auth.guard';\nimport { AccountAccessButtonComponent } from './account-access-button/account-access-button.component';\nimport { CommonModule } from '@angular/common';\nimport { CryptrClientFactory, CryptrClientService } from './auth.client';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AccountAccessButtonComponent],\n  exports: [AccountAccessButtonComponent],\n  bootstrap: [AccountAccessButtonComponent]\n})\nexport class AuthModule {\n  static forRoot(config?: AuthConfig): ModuleWithProviders {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        AuthService,\n        AuthGuard,\n        {\n          provide: AuthConfigService,\n          useValue: config,\n        },\n        {\n          provide: CryptrClientService,\n          useFactory: CryptrClientFactory.createClient,\n          deps: [AuthClientConfig],\n        },\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponseError.html":{"url":"interfaces/AuthResponseError.html","title":"interface - AuthResponseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthResponseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        field\n                                \n                                \n                                        message\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                AuthService - Cryptr Authentication Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticationInProgress\n                            \n                            \n                                config\n                            \n                            \n                                currentAuthenticationObservable\n                            \n                            \n                                currentAuthenticationState\n                            \n                            \n                                getAccessToken\n                            \n                            \n                                getIdToken\n                            \n                            \n                                getObservableUser\n                            \n                            \n                                getUser\n                            \n                            \n                                isAuthenticated\n                            \n                            \n                                logOut\n                            \n                            \n                                observableAuthenticated\n                            \n                            \n                                refreshTokens\n                            \n                            \n                                signInWithRedirect\n                            \n                            \n                                signUpWithRedirect\n                            \n                            \n                                userAccountAccess\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            authenticationInProgress\n                        \n                        \n                    \n                \n            \n            \n                \nauthenticationInProgress()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:275\n                \n            \n\n\n            \n                \n                    Check if authentication check still in progress\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication progress state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            config\n                        \n                        \n                    \n                \n            \n            \n                \nconfig()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:259\n                \n            \n\n\n            \n                \n                    Retrieve Cryptr current configuration\n\n\n                    \n                    \n                    \n                        Returns :         Config\n\n                    \n                    \n                        Current Cryptr configuration settings\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationObservable\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationObservable()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:316\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state as Observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        boolean observable of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            currentAuthenticationState\n                        \n                        \n                    \n                \n            \n            \n                \ncurrentAuthenticationState()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:300\n                \n            \n\n\n            \n                \n                    Retrieve current authentication state.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        boolean of authentiation state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:213\n                \n            \n\n\n            \n                \n                    Retrieve current stored access token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session access_token or undefined if no live session\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:221\n                \n            \n\n\n            \n                \n                    retrieve current stored id token\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        Current session id_token or undefined if no live session.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getObservableUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetObservableUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:291\n                \n            \n\n\n            \n                \n                    Retrieve current user as observable\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Current user as Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:267\n                \n            \n\n\n            \n                \n                    Retrieve current user\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        User object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:205\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        authentication state in a Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: () => void, location: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:162\n                \n            \n\n\n            \n                \n                    Destroy current session with specific action\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        \nAction to call at the end of logout process\n\n\n                                    \n                                \n                                \n                                    location\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        window.location\n                                    \n\n                                    \n                                        \nDefault: window.location. Where to redirect after logout process\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        process logout of session with callback call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            observableAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nobservableAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:283\n                \n            \n\n\n            \n                \n                    Retrieve authentication state\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Boolean observable of authentication state\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            refreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nrefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:251\n                \n            \n\n\n            \n                \n                    Refresh current tokens.\n\n\n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:114\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signin process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign in process (whitespace separator)\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign in process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign in process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignInWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignInWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignInWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this signin redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, locale?: string, redirectUri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:143\n                \n            \n\n\n            \n                \n                    Performs redirection to Cryptr for signup process with chosen args\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: \"email openid profile\". Scopes requested for this sign up process (whitespace separator).\n\n\n                                    \n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_locale value. locale for this sign up process.\n\n\n                                    \n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nDefault: config.default_redirect_uri value. URI where to redirect after sign up process.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            Default usage\nsignUpWithRedirect()\n                        \n                        \n                            Usage with custom scope\nsignUpWithRedirect(&quot;email openid profile read:invoices&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;fr&quot;)\n                        \n                        \n                            Usage with custom locale\nsignUpWithRedirect(&quot;email openid profile&quot;, &quot;en&quot;, &quot;http://localhsot:4201&quot;)\n                        \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        Observable of this sugnup redirection\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.service.ts:243\n                \n            \n\n\n            \n                \n                    Opens user account page.\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Promise of retrieving/opening page\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\nimport { BehaviorSubject, combineLatest, from, Observable, Subject } from 'rxjs';\nimport { AbstractNavigator } from './abstract-navigator';\nimport { Location } from '@angular/common';\nimport { Config, CryptrClient, Tokens } from './utils/types';\nimport { ActivatedRoute, Router, UrlTree } from '@angular/router';\nimport { CryptrClientService } from './auth.client';\nimport { filter, map } from 'rxjs/operators';\nimport { DEFAULT_SCOPE } from './utils/constants';\nimport { AuthClientConfig } from './auth.config';\n\n/**\n * AuthService - Cryptr Authentication Service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnDestroy {\n  /**\n   * @ignore\n   */\n  private ngUnsubscribe$ = new Subject();\n  /**\n   * @ignore\n   */\n  private authenticated$ = new BehaviorSubject(false);\n  /**\n   * @ignore\n   */\n  private user$ = new BehaviorSubject(null);\n  /**\n   * @ignore\n   */\n  private isLoading$ = new BehaviorSubject(true);\n\n  /**\n   * @ignore\n   */\n  constructor(\n    @Inject(CryptrClientService) private cryptrClient: CryptrClient,\n    private location: Location,\n    private navigator: AbstractNavigator,\n    private router: Router,\n    private route: ActivatedRoute,\n    private configFactory: AuthClientConfig,\n  ) {\n    this.checkAuthentication();\n    window.addEventListener(CryptrSpa.events.REFRESH_INVALID_GRANT, (RigError) => {\n      this.logOut(null);\n    });\n    window.addEventListener(CryptrSpa.events.REFRESH_EXPIRED, (ReError) => {\n      this.logOut(null);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  /**\n   * @ignore\n   */\n  private checkAuthentication(): void {\n    this.isAuthenticated().then(async (isAuthenticated: boolean) => {\n      this.updateCurrentAuthState(isAuthenticated);\n      this.resetAuthentication(isAuthenticated);\n      await this.authenticate();\n    }).catch((error) => {\n      console.error(error);\n      this.resetAuthentication(false);\n      this.isLoading$.next(false);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  private resetAuthentication(isAuthenticated: boolean): void {\n    if (isAuthenticated) {\n      return;\n    }\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n  }\n\n  /**\n   * Performs redirection to Cryptr for signin process with chosen args\n   * @example\n   * Default usage\n   * signInWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signInWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signInWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign in process (whitespace separator)\n   * @param locale - Default: `config.default_locale` value. locale for this sign in process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign in process.\n   * @returns Observable of this signin redirection\n   */\n  signInWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    if (this.cryptrClient) {\n      return from(this.cryptrClient.signInWithRedirect(scope, redirectUri, locale));\n    }\n  }\n\n  /**\n   * Performs redirection to Cryptr for signup process with chosen args\n   * @example\n   * Default usage\n   * signUpWithRedirect()\n   *\n   * @example\n   * Usage with custom scope\n   * signUpWithRedirect(\"email openid profile read:invoices\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"fr\")\n   *\n   * @example\n   * Usage with custom locale\n   * signUpWithRedirect(\"email openid profile\", \"en\", \"http://localhsot:4201\")\n   *\n   * @param scope - Default: `\"email openid profile\"`. Scopes requested for this sign up process (whitespace separator).\n   * @param locale - Default: `config.default_locale` value. locale for this sign up process.\n   * @param redirectUri - Default: `config.default_redirect_uri` value. URI where to redirect after sign up process.\n   * @returns Observable of this sugnup redirection\n   */\n  signUpWithRedirect(scope?: string, locale?: string, redirectUri?: string): Observable {\n    return from(this.cryptrClient.signUpWithRedirect(scope, redirectUri, locale));\n  }\n\n  /**\n   * @ignore\n   */\n  private preLogOutCallBack(callback: () => void): () => void {\n    this.updateCurrentAuthState(false);\n    this.setUser(null);\n    return callback;\n  }\n\n  /**\n   * Destroy current session with specific action\n   * @param callback - Action to call at the end of logout process\n   * @param location - **Default:** `window.location`. Where to redirect after logout process\n   * @returns process logout of session with callback call\n   */\n  logOut(callback: () => void, location: any = window.location): Observable {\n    return from(this.cryptrClient.logOut(this.preLogOutCallBack(callback), location));\n  }\n\n  /**\n   * @ignore\n   */\n  canHandleAuthentication(): boolean {\n    return this.cryptrClient.canHandleAuthentication();\n  }\n\n  /**\n   * @ignore\n   */\n  handleRedirectCallback(): Promise {\n    try {\n      return this.cryptrClient.handleRedirectCallback();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  handleTokens(tokens: Tokens): boolean {\n    // console.log('tokens');\n    // console.log(tokens);\n    const { valid, accessToken } = tokens;\n    this.updateCurrentAuthState(valid && accessToken !== undefined);\n    if (this.authenticated$.value) {\n      this.setUser(this.getClientUser());\n    } else {\n      console.error('handling tokens failed');\n      console.error(tokens);\n    }\n    return this.authenticated$.value;\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns authentication state in a Promise\n   */\n  isAuthenticated(): Promise {\n    return this.cryptrClient.isAuthenticated();\n  }\n\n  /**\n   * Retrieve current stored access token\n   * @returns Current session access_token or undefined if no live session\n   */\n  getAccessToken(): string | undefined {\n    return this.cryptrClient.getCurrentAccessToken();\n  }\n\n  /**\n   * retrieve current stored id token\n   * @returns Current session id_token or undefined if no live session.\n   */\n  getIdToken(): string | undefined {\n    return this.cryptrClient.getCurrentIdToken();\n  }\n\n  /**\n   * @ignore\n   */\n  private setUser(newUser: any): void {\n    this.user$.next(newUser);\n  }\n\n  /**\n   * @ignore\n   */\n  getClientUser(): any {\n    return this.cryptrClient.getUser();\n  }\n\n  /**\n   * Opens user account page.\n   * @returns Promise of retrieving/opening page\n   */\n  userAccountAccess(): Promise {\n    return this.cryptrClient.userAccountAccess();\n  }\n\n  /**\n   * Refresh current tokens.\n   * @returns void\n   */\n  refreshTokens(): void {\n    this.cryptrClient.handleRefreshTokens();\n  }\n\n  /**\n   * Retrieve Cryptr current configuration\n   * @returns Current Cryptr configuration settings\n   */\n  config(): Config {\n    return this.cryptrClient.config;\n  }\n\n  /**\n   * Retrieve current user\n   * @returns User object\n   */\n  getUser(): any {\n    return this.user$.value;\n  }\n\n  /**\n   * Check if authentication check still in progress\n   * @returns Boolean observable of authentication progress state\n   */\n  authenticationInProgress(): Observable {\n    return this.isLoading$.asObservable();\n  }\n\n  /**\n   * Retrieve authentication state\n   * @returns Boolean observable of authentication state\n   */\n  observableAuthenticated(): Observable {\n    return from(this.cryptrClient.isAuthenticated());\n  }\n\n  /**\n   * Retrieve current user as observable\n   * @returns Current user as Observable\n   */\n  getObservableUser(): Observable {\n    return this.user$.asObservable();\n  }\n\n\n  /**\n   * Retrieve current authentication state.\n   * @returns boolean of authentiation state\n   */\n  currentAuthenticationState(): boolean {\n    return this.authenticated$.value;\n  }\n\n  /**\n   * @ignore\n   */\n  private updateCurrentAuthState(newAuthenticated: boolean): void {\n    this.authenticated$.next(newAuthenticated);\n    this.setUser(this.getClientUser());\n  }\n\n  /**\n   * Retrieve current authentication state as Observable\n   * @returns boolean observable of authentiation state\n   */\n  currentAuthenticationObservable(): Observable {\n    return this.authenticated$.asObservable();\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanUrlTree(sourceUrlTree: UrlTree, stateUrl?: string): UrlTree {\n    try {\n      const path = !!stateUrl ? stateUrl.split('?')[0] : '';\n      const queryParams = sourceUrlTree.queryParams;\n      const { authorization_id, code, state, ...newParams } = queryParams;\n      return this.router.createUrlTree([path], { queryParams: newParams, fragment: sourceUrlTree.fragment });\n    } catch (error) {\n      return sourceUrlTree;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private routeCleanedPath(): string {\n    const path = this.location.path();\n    const currentUrlTree = this.router.parseUrl(path);\n    const newPath = this.cleanUrlTree(currentUrlTree, path).toString();\n    return !!newPath ? newPath : '/';\n  }\n\n  /**\n   * @ignore\n   */\n  private cleanRouteState(): void {\n    setTimeout(() => {\n      this.location.replaceState(this.routeCleanedPath(), '');\n    }, 2);\n  }\n\n  /**\n   * @ignore\n   */\n  private async authenticate(): Promise {\n    if (this.authenticated$.value) {\n      this.isLoading$.next(false);\n      return;\n    }\n    this.resetAuthentication(false);\n    if (this.canHandleAuthentication()) {\n      return this.handleRedirectCallback().then((tokens) => {\n        const handled = this.handleTokens(tokens);\n        this.updateCurrentAuthState(handled);\n        if (handled) {\n          this.cleanRouteState();\n          this.isLoading$.next(false);\n        } else {\n          this.isLoading$.next(false);\n        }\n        return handled;\n      }).catch((error) => {\n        return false;\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n      // TODO: handle invitation process\n      // } else if (this.cryptrClient.canHandleInvitation()) {\n      //   console.log('can handle invite')\n    } else {\n      await this.cryptrClient.handleRefreshTokens();\n      this.isAuthenticated().then((isAuthenticated) => {\n        this.updateCurrentAuthState(isAuthenticated);\n      }).catch((err) => {\n        this.updateCurrentAuthState(false);\n      }).finally(() => {\n        this.isLoading$.next(false);\n      });\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private defaultAuthenticationCallback(isAuthenticated: boolean, stateUrl?: string): boolean {\n    const { audience, default_locale } = this.config();\n    const redirectUri = audience.concat(stateUrl || '');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      if (this.configFactory.get().has_ssr) {\n        this.signInWithRedirect(DEFAULT_SCOPE, default_locale, redirectUri);\n      } else {\n        this.signInWithRedirect();\n      }\n      return false;\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  fullAuthenticateProcess(\n    stateUrl?: string,\n    callback?: (isAuthenticated: boolean, stateUrl?: string) => boolean\n  ): Observable {\n    return combineLatest(\n      [this.isLoading$, this.authenticated$]\n    ).pipe(\n      filter(([isLoading, isAuthenticated]) => {\n        return !isLoading;\n      }),\n      map(([isLoading, isAuthenticated]) => {\n        if (callback) {\n          return callback(isAuthenticated, stateUrl);\n        } else {\n          return this.defaultAuthenticationCallback(isAuthenticated, stateUrl);\n        }\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Authorization.html":{"url":"interfaces/Authorization.html","title":"interface - Authorization","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Authorization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        code\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Config.html":{"url":"interfaces/Config.html","title":"interface - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        audience\n                                \n                                \n                                        client_id\n                                \n                                \n                                            Optional\n                                        cryptr_base_url\n                                \n                                \n                                            Optional\n                                        default_locale\n                                \n                                \n                                        default_redirect_uri\n                                \n                                \n                                            Optional\n                                        region\n                                \n                                \n                                            Optional\n                                        telemetry\n                                \n                                \n                                        tenant_domain\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptr_base_url\n                                    \n                                \n                                \n                                    \n                                        cryptr_base_url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_locale\n                                    \n                                \n                                \n                                    \n                                        default_locale:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        default_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        region\n                                    \n                                \n                                \n                                    \n                                        region:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telemetry\n                                    \n                                \n                                \n                                    \n                                        telemetry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenant_domain\n                                    \n                                \n                                \n                                    \n                                        tenant_domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptrClient.html":{"url":"interfaces/CryptrClient.html","title":"interface - CryptrClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CryptrClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        config\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    canHandleAuthentication\n                                \n                                \n                                    canHandleInvitation\n                                \n                                \n                                    canRefresh\n                                \n                                \n                                    decoratedRequest\n                                \n                                \n                                    finalScope\n                                \n                                \n                                    getClaimsFromAccess\n                                \n                                \n                                    getCurrentAccessToken\n                                \n                                \n                                    getCurrentIdToken\n                                \n                                \n                                    getRefreshStore\n                                \n                                \n                                    getUser\n                                \n                                \n                                    handleInvitationState\n                                \n                                \n                                    handleNewTokens\n                                \n                                \n                                    handleRedirectCallback\n                                \n                                \n                                    handleRefreshTokens\n                                \n                                \n                                    handleTokensErrors\n                                \n                                \n                                    inviteWithoutRedirect\n                                \n                                \n                                    inviteWithRedirect\n                                \n                                \n                                    isAuthenticated\n                                \n                                \n                                    logOut\n                                \n                                \n                                    recurringRefreshToken\n                                \n                                \n                                    signInWithoutRedirect\n                                \n                                \n                                    signInWithRedirect\n                                \n                                \n                                    signUpWithoutRedirect\n                                \n                                \n                                    signUpWithRedirect\n                                \n                                \n                                    userAccountAccess\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleAuthentication\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleAuthentication(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canHandleInvitation\n                        \n                        \n                    \n                \n            \n            \n                \ncanHandleInvitation(searchParams?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParams\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canRefresh\n                        \n                        \n                    \n                \n            \n            \n                \ncanRefresh(refreshStore: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decoratedRequest\n                        \n                        \n                    \n                \n            \n            \n                \ndecoratedRequest(axiosRequestConfig: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    axiosRequestConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            finalScope\n                        \n                        \n                    \n                \n            \n            \n                \nfinalScope(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getClaimsFromAccess\n                        \n                        \n                    \n                \n            \n            \n                \ngetClaimsFromAccess(accessToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     object | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentAccessToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrentIdToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrentIdToken()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRefreshStore\n                        \n                        \n                    \n                \n            \n            \n                \ngetRefreshStore()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         RefreshStore\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \ngetUser()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     object | undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleInvitationState\n                        \n                        \n                    \n                \n            \n            \n                \nhandleInvitationState(scope?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleNewTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleNewTokens(refreshStore: RefreshStore, tokens?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshStore\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokens\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRedirectCallback\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRedirectCallback()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleRefreshTokens\n                        \n                        \n                    \n                \n            \n            \n                \nhandleRefreshTokens()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleTokensErrors\n                        \n                        \n                    \n                \n            \n            \n                \nhandleTokensErrors(errors: TokenError[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                TokenError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            inviteWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ninviteWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isAuthenticated\n                        \n                        \n                    \n                \n            \n            \n                \nisAuthenticated()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \nlogOut(callback: any, location?: Location)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    location\n                                    \n                                                Location\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recurringRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \nrecurringRefreshToken(refreshTokenWrapper: RefreshStore)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenWrapper\n                                    \n                                                RefreshStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signInWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignInWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithoutRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUpWithRedirect\n                        \n                        \n                    \n                \n            \n            \n                \nsignUpWithRedirect(scope?: string, redirectUri?: string, locale?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    redirectUri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    locale\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            userAccountAccess\n                        \n                        \n                    \n                \n            \n            \n                \nuserAccountAccess()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/utils/types.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         Config\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Config\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CryptrClientFactory.html":{"url":"classes/CryptrClientFactory.html","title":"class - CryptrClientFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CryptrClientFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.client.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            createClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createClient(configFactory: AuthClientConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/auth.client.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configFactory\n                                    \n                                                AuthClientConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport CryptrSpa from '@cryptr/cryptr-spa-js';\n\nimport { AuthClientConfig } from './auth.config';\nexport class CryptrClientFactory {\n  static createClient(configFactory: AuthClientConfig): any {\n    const config = configFactory.get();\n\n    try {\n      if (!config) {\n        throw new Error(\n          'Configuration must be specified either through AuthModule.forRoot or through AuthClientConfig.set'\n        );\n      } else {\n        const { httpInterceptor: { apiRequestsToSecure } } = config;\n        if (apiRequestsToSecure === undefined || apiRequestsToSecure.length === 0) {\n          throw new Error(\n            'You must specify at least one item in config.httpInterceptor.apiRequestsToSecure . Mainly use your Resource server url'\n          );\n        }\n        console.warn('Secured paths have to be decorated with \\'canActivate: [AuthGuard]\\' options');\n      }\n      return new CryptrSpa.client(config);\n    } catch (error) {\n      console.error('authclient error');\n      console.error(error);\n    }\n  }\n}\n\nexport const CryptrClientService = new InjectionToken('cryptr.client');\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorConfig.html":{"url":"interfaces/HttpInterceptorConfig.html","title":"interface - HttpInterceptorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        apiRequestsToSecure\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiRequestsToSecure\n                                    \n                                \n                                \n                                    \n                                        apiRequestsToSecure:         ApiRouteDefinition[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiRouteDefinition[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HttpInterceptorRouteConfig.html":{"url":"interfaces/HttpInterceptorRouteConfig.html","title":"interface - HttpInterceptorRouteConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HttpInterceptorRouteConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/auth.config.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        httpMethod\n                                \n                                \n                                            Optional\n                                        tokenOptions\n                                \n                                \n                                        uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpMethod\n                                    \n                                \n                                \n                                    \n                                        httpMethod:         HttpMethod | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenOptions\n                                    \n                                \n                                \n                                    \n                                        tokenOptions:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\n\n/**\n * Defines a common set of HTTP methods.\n */\nexport const enum HttpMethod {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n  Head = 'HEAD',\n}\n\nexport type ApiRouteDefinition = HttpInterceptorRouteConfig | string;\n\n\nexport function isHttpInterceptorRouteConfig(\n  def: ApiRouteDefinition\n): def is HttpInterceptorRouteConfig {\n  return (def as HttpInterceptorRouteConfig).uri !== undefined;\n}\n\nexport interface HttpInterceptorConfig {\n  apiRequestsToSecure: ApiRouteDefinition[];\n}\n\nexport interface HttpInterceptorRouteConfig {\n  uri: string;\n  tokenOptions?: any;\n  httpMethod?: HttpMethod | string;\n}\n\nexport interface AuthConfig {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  region?: string;\n  default_locale?: string;\n  cryptr_base_url?: string;\n  httpInterceptor: HttpInterceptorConfig;\n  has_ssr?: boolean;\n  other_key?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthClientConfig {\n  private config: AuthConfig;\n\n  constructor(@Optional() @Inject(AuthConfigService) config?: AuthConfig) {\n    if (config) {\n      this.set(config);\n    }\n  }\n\n  /**\n   * Sets configuration to be read by other consumers of the service (see usage notes)\n   * @param config The configuration to set\n   */\n  set(config: AuthConfig): void {\n    this.config = config;\n  }\n\n  /**\n   * Gets the config that has been set by other consumers of the service\n   */\n  get(): AuthConfig {\n    return this.config;\n  }\n}\n\nexport const AuthConfigService = new InjectionToken(\n  'cryptr-angular.config'\n);\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshStore.html":{"url":"interfaces/RefreshStore.html","title":"interface - RefreshStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_expiration_date\n                                \n                                \n                                        refresh_expiration_date\n                                \n                                \n                                        refresh_leeway\n                                \n                                \n                                        refresh_retry\n                                \n                                \n                                        refresh_token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_expiration_date\n                                    \n                                \n                                \n                                    \n                                        access_token_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_expiration_date\n                                    \n                                \n                                \n                                    \n                                        refresh_expiration_date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_leeway\n                                    \n                                \n                                \n                                    \n                                        refresh_leeway:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_retry\n                                    \n                                \n                                \n                                    \n                                        refresh_retry:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenError.html":{"url":"interfaces/TokenError.html","title":"interface - TokenError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TokenError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        error\n                                \n                                \n                                        error_description\n                                \n                                \n                                        http_response\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error_description\n                                    \n                                \n                                \n                                    \n                                        error_description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        http_response\n                                    \n                                \n                                \n                                    \n                                        http_response:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tokens.html":{"url":"interfaces/Tokens.html","title":"interface - Tokens","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Tokens\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        accessToken\n                                \n                                \n                                        valid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valid\n                                    \n                                \n                                \n                                    \n                                        valid:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/utils/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum Sign {\n  Invite = 'invite',\n  In = 'signin',\n  Up = 'signup',\n  Refresh = 'refresh'\n}\nexport interface Authorization {\n  id: string;\n  code: string;\n}\n\nexport interface Tokens {\n  valid: boolean;\n  accessToken?: string;\n}\n\nexport interface Config {\n  tenant_domain: string;\n  client_id: string;\n  audience: string;\n  default_redirect_uri: string;\n  default_locale?: string;\n  region?: string;\n  cryptr_base_url?: string;\n  telemetry?: boolean;\n}\n\nexport interface AuthResponseError {\n  field: string;\n  message: string;\n}\nexport interface TokenError {\n  http_response: any;\n  error: string;\n  error_description: string;\n}\n\nexport interface RefreshStore {\n  refresh_token: string;\n  access_token_expiration_date: number;\n  refresh_expiration_date: number;\n  refresh_leeway: number;\n  refresh_retry: number;\n}\n\nexport interface CryptrClient {\n  config: Config;\n  getCurrentAccessToken(): string | undefined;\n  getCurrentIdToken(): string | undefined;\n  isAuthenticated(): Promise;\n  finalScope(scope?: string): string;\n  signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise;\n  handleInvitationState(scope?: string): Promise;\n  handleTokensErrors(errors: TokenError[]): boolean;\n  handleNewTokens(refreshStore: RefreshStore, tokens?: any): void;\n  handleRedirectCallback(): Promise;\n  canRefresh(refreshStore: RefreshStore): boolean;\n  getRefreshStore(): RefreshStore;\n  handleRefreshTokens(): Promise;\n  recurringRefreshToken(refreshTokenWrapper: RefreshStore): void;\n  getUser(): object | undefined;\n  getClaimsFromAccess(accessToken: string): object | null;\n  canHandleAuthentication(searchParams?: string): boolean;\n  canHandleInvitation(searchParams?: string): boolean;\n  userAccountAccess(): Promise | undefined>;\n  logOut(callback: any, location?: Location): Promise;\n  decoratedRequest(axiosRequestConfig: any): any;\n}\n\nexport interface User {\n  email: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/abstract-navigator.ts\n            \n            injectable\n            AbstractNavigator\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/lib/account-access-button/account-access-button.component.ts\n            \n            component\n            AccountAccessButtonComponent\n            \n                0 %\n                (0/57)\n            \n        \n        \n            \n                \n                src/lib/auth.client.ts\n            \n            class\n            CryptrClientFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.client.ts\n            \n            variable\n            CryptrClientService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            injectable\n            AuthClientConfig\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            AuthConfig\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            interface\n            HttpInterceptorRouteConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            function\n            isHttpInterceptorRouteConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.config.ts\n            \n            variable\n            AuthConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/lib/auth.interceptor.ts\n            \n            interceptor\n            AuthHttpInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            BADGE_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            DEFAULT_SCOPE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            ERROR_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            LOG_OUT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            SIGN_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_CLOSED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            TOGGLE_CASS_OPENED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/constants.ts\n            \n            variable\n            USER_ACCOUNT_BTN_CLASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/enums.ts\n            \n            variable\n            LocalizedStrings\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Authorization\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            AuthResponseError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Config\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            CryptrClient\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            RefreshStore\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            TokenError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            Tokens\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/lib/utils/types.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            function\n            windowProvider\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/window.ts\n            \n            variable\n            WindowService\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @cryptr/cryptr-spa-js : ^0.1.10\n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : >=9 \n        \n            @angular/core : >=9 \n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            HttpMethod   (src/.../auth.config.ts)\n                        \n                        \n                            Sign   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n            \n                \n                    \n                        \n                        HttpMethod\n                    \n                \n                    \n                        \n                            Defines a common set of HTTP methods.\n\n                        \n                    \n                        \n                            \n                                 Get\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 Put\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 Patch\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 Head\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n            \n        \n\n    src/lib/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Sign\n                    \n                \n                        \n                            \n                                 Invite\n                            \n                        \n                        \n                            \n                                Value : invite\n                            \n                        \n                        \n                            \n                                 In\n                            \n                        \n                        \n                            \n                                Value : signin\n                            \n                        \n                        \n                            \n                                 Up\n                            \n                        \n                        \n                            \n                                Value : signup\n                            \n                        \n                        \n                            \n                                 Refresh\n                            \n                        \n                        \n                            \n                                Value : refresh\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            isHttpInterceptorRouteConfig   (src/.../auth.config.ts)\n                        \n                        \n                            windowProvider   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isHttpInterceptorRouteConfig\n                        \n                        \n                    \n                \n            \n            \n                \nisHttpInterceptorRouteConfig(def)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    def\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         HttpInterceptorRouteConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/window.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            windowProvider\n                        \n                        \n                    \n                \n            \n            \n                \nwindowProvider()\n                \n            \n\n\n\n\n            \n                \n                    Default window provider. Provides the actual window object.\n\n\n                    \n                        Returns :     Window\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nStatements\nBranches\nFunctions\nLines\n\n\n\n\n\n\n\n\n\n\n\nCryptrAngular\nFor more See our related live Doc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_declarations\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAccountAccessButtonComponent\n\nAccountAccessButtonComponent\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAccountAccessButtonComponent->AuthModule\n\n\n\n\n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent \n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\nAccountAccessButtonComponent  -->\n\nAuthModule->AccountAccessButtonComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiRouteDefinition   (src/.../auth.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n    \n        \n            \n                \n                    \n                    ApiRouteDefinition\n                \n            \n            \n                \n                        HttpInterceptorRouteConfig | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfigService   (src/.../auth.config.ts)\n                        \n                        \n                            BADGE_CLASS   (src/.../constants.ts)\n                        \n                        \n                            CryptrClientService   (src/.../auth.client.ts)\n                        \n                        \n                            DEFAULT_SCOPE   (src/.../constants.ts)\n                        \n                        \n                            ERROR_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            LocalizedStrings   (src/.../enums.ts)\n                        \n                        \n                            LOG_OUT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            SIGN_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_CLOSED   (src/.../constants.ts)\n                        \n                        \n                            TOGGLE_CASS_OPENED   (src/.../constants.ts)\n                        \n                        \n                            USER_ACCOUNT_BTN_CLASS   (src/.../constants.ts)\n                        \n                        \n                            WindowService   (src/.../window.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AuthConfigService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken(\n  'cryptr-angular.config'\n)\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BADGE_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'uppercase rounded-full h-6 w-6 flex items-center justify-center bg-blue-500 text-xs text-white'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_SCOPE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'openid email profile'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ERROR_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-red-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_OUT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-yellow-500 bg-white hover:text-yellow-400 focus:outline-none focus:border-yellow-300 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SIGN_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'relative inline-flex items-center px-5 py-3 border border-transparent text-base uppercase leading-5 font-bold rounded-md text-yellow-500 shadow-md hover:shadow-xl focus:outline-none transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_CLOSED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 transition ease-in-out duration-150 focus:outline-none'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TOGGLE_CASS_OPENED\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'bg-white shadow-lg px-6 py-2 rounded-md text-gray-500 flex flex-row items-center space-x-2 text-base leading-6 font-medium hover:bg-gray-100 focus:outline-none focus:bg-gray-200 focus:shadow-none transition ease-in-out duration-150'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_ACCOUNT_BTN_CLASS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'cursor-pointer mt-2 w-full flex items-center justify-center px-2 py-1 border border-transparent text-xs uppercase leading-6 font-bold rounded-md text-white bg-yellow-500 hover:bg-yellow-400 focus:outline-none focus:border-yellow-600 focus:shadow-outline-yellow transition duration-150 ease-in-out'\n                        \n                    \n\n\n            \n        \n\n    src/lib/auth.client.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CryptrClientService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('cryptr.client')\n                        \n                    \n\n\n            \n        \n\n    src/lib/utils/enums.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            LocalizedStrings\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  fr: {\n    signin: 'Connexion',\n    signup: 'Inscription',\n    logOut: 'Déconnexion',\n    manageAccount: 'Mon Compte'\n  },\n  en: {\n    signin: 'Sign In',\n    signup: 'Sign Up',\n    logOut: 'Log out',\n    manageAccount: 'Manage my account'\n  }\n}\n                        \n                    \n\n\n            \n        \n\n    src/lib/window.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WindowService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('Browser window')\n                        \n                    \n\n                \n                    \n                        Injection token for providing an instance of window\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
