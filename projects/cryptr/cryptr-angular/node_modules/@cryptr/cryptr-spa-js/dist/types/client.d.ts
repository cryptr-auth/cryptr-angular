import * as Interface from './interfaces';
declare class Client {
    config: Interface.Config;
    private memory;
    private worker?;
    constructor(config: Interface.Config);
    private configureSentry;
    getCurrentAccessToken(): string | undefined;
    getCurrentIdToken(): string | undefined;
    private currentAccessTokenPresent;
    isAuthenticated(): Promise<boolean>;
    finalScope(scope?: string): string;
    private signWithoutRedirect;
    signInWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    signUpWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    inviteWithoutRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    private signWithRedirect;
    signInWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    signUpWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    inviteWithRedirect(scope?: string, redirectUri?: string, locale?: string): Promise<void>;
    handleInvitationState(scope?: string): Promise<void>;
    handleNewTokens(refreshStore: Interface.RefreshStore, tokens?: any): void;
    handleRedirectCallback(): Promise<any>;
    canRefresh(refreshStore: Interface.RefreshStore): boolean;
    getRefreshStore(): Interface.RefreshStore;
    handleRefreshTokens(): Promise<boolean>;
    recurringRefreshToken(refreshTokenWrapper: Interface.RefreshStore): void;
    getUser(): object | undefined;
    getClaimsFromAccess(accessToken: string): object | null;
    private hasAuthenticationParams;
    private hasInvitationParams;
    canHandleAuthentication(searchParams?: string): boolean;
    canHandleInvitation(searchParams?: string): boolean;
    userAccountAccess(): Promise<import("axios").AxiosResponse<any> | undefined>;
    logOut(callback: any, location?: Location): Promise<boolean>;
    decoratedRequest(axiosRequestConfig: any): any;
}
export default Client;
