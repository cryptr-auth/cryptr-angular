declare const RequestMock: {
    postAuthorizationCodeResponse: () => import("msw/lib/types").RequestHandler<import("msw/lib/types").MockedRequest, {
        set: typeof import("msw/lib/types/context").set;
        status: (statusCode: number, statusText?: string | undefined) => import("msw/lib/types").ResponseTransformer;
        cookie: (name: string, value: string, options?: import("cookie").CookieSerializeOptions | undefined) => import("msw/lib/types").ResponseTransformer;
        body: <T>(value: T) => import("msw/lib/types").ResponseTransformer;
        text: (body: string) => import("msw/lib/types").ResponseTransformer;
        json: (body: Record<string, any>) => import("msw/lib/types").ResponseTransformer;
        xml: (body: string) => import("msw/lib/types").ResponseTransformer;
        delay: (durationMs?: number | undefined) => import("msw/lib/types").ResponseTransformer;
        fetch: <ResponseType_1 = any>(input: string | import("msw/lib/types").MockedRequest, requestInit?: RequestInit | undefined) => Promise<ResponseType_1>;
    }, any, import("msw/lib/types").MockedRequest>;
};
export default RequestMock;
