import { Authorization, Transaction as TransactionInterface, Config } from './interfaces';
export declare const tokenParams: (config: Config, authorization: Authorization, transaction: TransactionInterface) => {
    authorization_id: string;
    client_id: string;
    code: string;
    code_verifier: string;
    grant_type: string;
    nonce: string | undefined;
};
export declare const refreshTokensParams: (config: Config, transaction: TransactionInterface, refresh_token: string) => {
    client_id: string;
    grant_type: string;
    nonce: string | undefined;
    refresh_token: string;
};
export declare const revokeTokenUrl: (config: Config) => string;
export declare const tokenUrl: (config: Config, authorization: Authorization, transaction: TransactionInterface) => string;
export declare const refreshTokensUrl: (config: Config, transaction: TransactionInterface) => string;
declare const Request: {
    postAuthorizationCode: (config: Config, authorization: Authorization, transaction: TransactionInterface) => Promise<import("axios").AxiosResponse<any>>;
    revokeAccessToken: (client_config: Config, accessToken: string) => Promise<import("axios").AxiosResponse<any>>;
    revokeRefreshToken: (client_config: Config, refreshToken: string) => Promise<import("axios").AxiosResponse<any>>;
    refreshTokens: (config: Config, transaction: TransactionInterface, refresh_token: string) => Promise<import("axios").AxiosResponse<any>>;
    decoratedRequest: (accessToken: any, axiosRequestConfig: any) => any;
};
export default Request;
