"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validAppBaseUrl = exports.validRedirectUri = exports.validClientSecret = exports.validClientId = exports.validIssuer = void 0;
var ConfigurationValidationError = /** @class */ (function (_super) {
    __extends(ConfigurationValidationError, _super);
    function ConfigurationValidationError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ConfigurationValidationError;
}(Error));
var defaults_1 = require("./defaults");
exports.validIssuer = function (issuer, testing) {
    if (issuer === void 0) { issuer = ''; }
    if (testing === void 0) { testing = defaults_1.DEFAULT_TESTING_CONFIG; }
    var copyMessage = "You can copy your domain from the Cryptr Developer ";
    if (testing.disableHttpsCheck) {
        var httpsWarning = "Warning: HTTPS check is disabled." +
            "This allows for insecure configurations and is NOT recommended for production use.";
        /* eslint-disable-next-line no-console */
        console.warn(httpsWarning);
    }
    if (!issuer || issuer == '') {
        throw new ConfigurationValidationError("Your Cryptr URL issuer is missing.");
    }
    else if (!testing.disableHttpsCheck && !issuer.match(defaults_1.isHttps)) {
        throw new ConfigurationValidationError("Your Cryptr URL issuer must start with https." +
            ("Current value: " + issuer + ". " + copyMessage));
    }
    else if (issuer.match(/{yourCryptrDomain}/)) {
        throw new ConfigurationValidationError("Replace {yourCryptrDomain} with your Cryptr domain.");
    }
};
exports.validClientId = function (clientId) {
    if (clientId === void 0) { clientId = ''; }
    if (!clientId || clientId == '') {
        throw new ConfigurationValidationError("Your client ID is missing.");
    }
    else if (clientId.match(/{client_id}/)) {
        throw new ConfigurationValidationError("Replace " + clientId + " (client_id in cryptr.config.json) with the client ID of your Application.");
    }
};
exports.validClientSecret = function (clientSecret) {
    if (clientSecret === void 0) { clientSecret = ''; }
    if (!clientSecret || clientSecret == '') {
        throw new ConfigurationValidationError("Your client secret is missing.");
    }
    else if (clientSecret.match(/{clientSecret}/)) {
        throw new ConfigurationValidationError("Replace {clientSecret} with the client secret of your Application.");
    }
};
exports.validRedirectUri = function (redirectUri) {
    if (redirectUri === void 0) { redirectUri = ''; }
    if (!redirectUri || redirectUri == '') {
        throw new ConfigurationValidationError("Your redirect URI is missing.");
    }
    else if (redirectUri.match(/{redirectUri}/)) {
        throw new ConfigurationValidationError("Replace {redirectUri} with the redirect URI of your Application.");
    }
};
exports.validAppBaseUrl = function (appBaseUrl) {
    if (appBaseUrl === void 0) { appBaseUrl = ''; }
    if (!appBaseUrl || appBaseUrl == '') {
        throw new ConfigurationValidationError("Your appBaseUrl is missing.");
    }
    else if (appBaseUrl.match(/{appBaseUrl}/)) {
        throw new ConfigurationValidationError("Replace {appBaseUrl} with the base URL of your Application.");
    }
    else if (!appBaseUrl.match(defaults_1.hasProtocol)) {
        throw new ConfigurationValidationError("Your appBaseUrl must contain a protocol (e.g. https://). Current value: " + appBaseUrl + ".");
    }
    else if (appBaseUrl.match(defaults_1.endsInPath)) {
        throw new ConfigurationValidationError("Your appBaseUrl must not end in a '/'. Current value: " + appBaseUrl + ".");
    }
};
//# sourceMappingURL=functions.js.map